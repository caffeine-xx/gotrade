package fix44;
message AdvSide {
	enum AdvSideEnum {
		BUY = 0;
		SELL = 1;
		CROSS = 2;
		TRADE = 3;
	}
	required AdvSideEnum value = 1;
}

message AdvTransType {
	enum AdvTransTypeEnum {
		NEW = 0;
		CANCEL = 1;
		REPLACE = 2;
	}
	required AdvTransTypeEnum value = 1;
}

message CommType {
	enum CommTypeEnum {
		PER_UNIT = 0;
		PERCENTAGE = 1;
		ABSOLUTE = 2;
		PERCENTAGE_WAIVED_CASH_DISCOUNT = 3;
		PERCENTAGE_WAIVED_ENHANCED_UNITS = 4;
		POINTS_PER_BOND_OR_OR_CONTRACT = 5;
	}
	required CommTypeEnum value = 1;
}

message ExecInst {
	enum ExecInstEnum {
		NOT_HELD = 0;
		WORK = 1;
		GO_ALONG = 2;
		OVER_THE_DAY = 3;
		HELD = 4;
		PARTICIPATE_DONT_INITIATE = 5;
		STRICT_SCALE = 6;
		TRY_TO_SCALE = 7;
		STAY_ON_BIDSIDE = 8;
		STAY_ON_OFFERSIDE = 9;
		NO_CROSS = 10;
		OK_TO_CROSS = 11;
		CALL_FIRST = 12;
		PERCENT_OF_VOLUME = 13;
		DO_NOT_INCREASE = 14;
		DO_NOT_REDUCE = 15;
		ALL_OR_NONE = 16;
		REINSTATE_ON_SYSTEM_FAILURE = 17;
		INSTITUTIONS_ONLY = 18;
		REINSTATE_ON_TRADING_HALT = 19;
		CANCEL_ON_TRADING_HALT = 20;
		LAST_PEG = 21;
		MID_PRICE = 22;
		NON_NEGOTIABLE = 23;
		OPENING_PEG = 24;
		MARKET_PEG = 25;
		CANCEL_ON_SYSTEM_FAILURE = 26;
		PRIMARY_PEG = 27;
		SUSPEND = 28;
		FIXED_PEG_TO_LOCAL_BEST_BID_OR_OFFER_AT_TIME_OF_ORDER = 29;
		CUSTOMER_DISPLAY_INSTRUCTION = 30;
		NETTING = 31;
		PEG_TO_VWAP = 32;
		TRADE_ALONG = 33;
		TRY_TO_STOP = 34;
		CANCEL_IF_NOT_BEST = 35;
		TRAILING_STOP_PEG = 36;
		STRICT_LIMIT = 37;
		IGNORE_PRICE_VALIDITY_CHECKS = 38;
		PEG_TO_LIMIT_PRICE = 39;
		WORK_TO_TARGET_STRATEGY = 40;
	}
	required ExecInstEnum value = 1;
}

message HandlInst {
	enum HandlInstEnum {
		AUTOMATED_EXECUTION_ORDER_PRIVATE = 0;
		AUTOMATED_EXECUTION_ORDER_PUBLIC = 1;
		MANUAL_ORDER = 2;
	}
	required HandlInstEnum value = 1;
}

message SecurityIDSource {
	enum SecurityIDSourceEnum {
		CUSIP = 0;
		SEDOL = 1;
		QUIK = 2;
		ISIN_NUMBER = 3;
		RIC_CODE = 4;
		ISO_CURRENCY_CODE = 5;
		ISO_COUNTRY_CODE = 6;
		EXCHANGE_SYMBOL = 7;
		CONSOLIDATED_TAPE_ASSOCIATION = 8;
		BLOOMBERG_SYMBOL = 9;
		WERTPAPIER = 10;
		DUTCH = 11;
		VALOREN = 12;
		SICOVAM = 13;
		BELGIAN = 14;
		COMMON = 15;
		CLEARING_HOUSE_CLEARING_ORGANIZATION = 16;
		ISDA_FPML_PRODUCT_SPECIFICATION = 17;
		OPTIONS_PRICE_REPORTING_AUTHORITY = 18;
	}
	required SecurityIDSourceEnum value = 1;
}

message IOIQltyInd {
	enum IOIQltyIndEnum {
		LOW = 0;
		MEDIUM = 1;
		HIGH = 2;
	}
	required IOIQltyIndEnum value = 1;
}

message IOITransType {
	enum IOITransTypeEnum {
		NEW = 0;
		CANCEL = 1;
		REPLACE = 2;
	}
	required IOITransTypeEnum value = 1;
}

message LastCapacity {
	enum LastCapacityEnum {
		AGENT = 0;
		CROSS_AS_AGENT = 1;
		CROSS_AS_PRINCIPAL = 2;
		PRINCIPAL = 3;
	}
	required LastCapacityEnum value = 1;
}

message MsgType {
	enum MsgTypeEnum {
		HEARTBEAT = 0;
		TEST_REQUEST = 1;
		RESEND_REQUEST = 2;
		REJECT = 3;
		SEQUENCE_RESET = 4;
		LOGOUT = 5;
		INDICATION_OF_INTEREST = 6;
		ADVERTISEMENT = 7;
		EXECUTION_REPORT = 8;
		ORDER_CANCEL_REJECT = 9;
		LOGON = 10;
		NEWS = 11;
		EMAIL = 12;
		ORDER_SINGLE = 13;
		ORDER_LIST = 14;
		ORDER_CANCEL_REQUEST = 15;
		ORDER_CANCEL_REPLACE_REQUEST = 16;
		ORDER_STATUS_REQUEST = 17;
		ALLOCATION_INSTRUCTION = 18;
		LIST_CANCEL_REQUEST = 19;
		LIST_EXECUTE = 20;
		LIST_STATUS_REQUEST = 21;
		LIST_STATUS = 22;
		ALLOCATION_INSTRUCTION_ACK = 23;
		DONT_KNOW_TRADE = 24;
		QUOTE_REQUEST = 25;
		QUOTE = 26;
		SETTLEMENT_INSTRUCTIONS = 27;
		MARKET_DATA_REQUEST = 28;
		MARKET_DATA_SNAPSHOT_FULL_REFRESH = 29;
		MARKET_DATA_INCREMENTAL_REFRESH = 30;
		MARKET_DATA_REQUEST_REJECT = 31;
		QUOTE_CANCEL = 32;
		QUOTE_STATUS_REQUEST = 33;
		MASS_QUOTE_ACKNOWLEDGEMENT = 34;
		SECURITY_DEFINITION_REQUEST = 35;
		SECURITY_DEFINITION = 36;
		SECURITY_STATUS_REQUEST = 37;
		SECURITY_STATUS = 38;
		TRADING_SESSION_STATUS_REQUEST = 39;
		TRADING_SESSION_STATUS = 40;
		MASS_QUOTE = 41;
		BUSINESS_MESSAGE_REJECT = 42;
		BID_REQUEST = 43;
		BID_RESPONSE = 44;
		LIST_STRIKE_PRICE = 45;
		XML_MESSAGE = 46;
		REGISTRATION_INSTRUCTIONS = 47;
		REGISTRATION_INSTRUCTIONS_RESPONSE = 48;
		ORDER_MASS_CANCEL_REQUEST = 49;
		ORDER_MASS_CANCEL_REPORT = 50;
		NEW_ORDER_CROSS = 51;
		CROSS_ORDER_CANCEL_REPLACE_REQUEST = 52;
		CROSS_ORDER_CANCEL_REQUEST = 53;
		SECURITY_TYPE_REQUEST = 54;
		SECURITY_TYPES = 55;
		SECURITY_LIST_REQUEST = 56;
		SECURITY_LIST = 57;
		DERIVATIVE_SECURITY_LIST_REQUEST = 58;
		DERIVATIVE_SECURITY_LIST = 59;
		NEW_ORDER_MULTILEG = 60;
		MULTILEG_ORDER_CANCEL_REPLACE = 61;
		TRADE_CAPTURE_REPORT_REQUEST = 62;
		TRADE_CAPTURE_REPORT = 63;
		ORDER_MASS_STATUS_REQUEST = 64;
		QUOTE_REQUEST_REJECT = 65;
		RFQ_REQUEST = 66;
		QUOTE_STATUS_REPORT = 67;
		QUOTE_RESPONSE = 68;
		CONFIRMATION = 69;
		POSITION_MAINTENANCE_REQUEST = 70;
		POSITION_MAINTENANCE_REPORT = 71;
		REQUEST_FOR_POSITIONS = 72;
		REQUEST_FOR_POSITIONS_ACK = 73;
		POSITION_REPORT = 74;
		TRADE_CAPTURE_REPORT_REQUEST_ACK = 75;
		TRADE_CAPTURE_REPORT_ACK = 76;
		ALLOCATION_REPORT = 77;
		ALLOCATION_REPORT_ACK = 78;
		CONFIRMATION_ACK = 79;
		SETTLEMENT_INSTRUCTION_REQUEST = 80;
		ASSIGNMENT_REPORT = 81;
		COLLATERAL_REQUEST = 82;
		COLLATERAL_ASSIGNMENT = 83;
		COLLATERAL_RESPONSE = 84;
		COLLATERAL_REPORT = 85;
		COLLATERAL_INQUIRY = 86;
		NETWORK_STATUS_REQUEST = 87;
		NETWORK_STATUS_RESPONSE = 88;
		USER_REQUEST = 89;
		USER_RESPONSE = 90;
		COLLATERAL_INQUIRY_ACK = 91;
		CONFIRMATION_REQUEST = 92;
	}
	required MsgTypeEnum value = 1;
}

message OrdStatus {
	enum OrdStatusEnum {
		NEW = 0;
		PARTIALLY_FILLED = 1;
		FILLED = 2;
		DONE_FOR_DAY = 3;
		CANCELED = 4;
		REPLACED = 5;
		PENDING_CANCEL = 6;
		STOPPED = 7;
		REJECTED = 8;
		SUSPENDED = 9;
		PENDING_NEW = 10;
		CALCULATED = 11;
		EXPIRED = 12;
		ACCEPTED_FOR_BIDDING = 13;
		PENDING_REPLACE = 14;
	}
	required OrdStatusEnum value = 1;
}

message OrdType {
	enum OrdTypeEnum {
		MARKET = 0;
		LIMIT = 1;
		STOP = 2;
		STOP_LIMIT = 3;
		MARKET_ON_CLOSE = 4;
		WITH_OR_WITHOUT = 5;
		LIMIT_OR_BETTER = 6;
		LIMIT_WITH_OR_WITHOUT = 7;
		ON_BASIS = 8;
		ON_CLOSE = 9;
		LIMIT_ON_CLOSE = 10;
		FOREX_MARKET = 11;
		PREVIOUSLY_QUOTED = 12;
		PREVIOUSLY_INDICATED = 13;
		FOREX_LIMIT = 14;
		FOREX_SWAP = 15;
		FOREX_PREVIOUSLY_QUOTED = 16;
		FUNARI = 17;
		MARKET_IF_TOUCHED = 18;
		MARKET_WITH_LEFTOVER_AS_LIMIT = 19;
		PREVIOUS_FUND_VALUATION_POINT = 20;
		NEXT_FUND_VALUATION_POINT = 21;
		PEGGED = 22;
	}
	required OrdTypeEnum value = 1;
}

message Side {
	enum SideEnum {
		BUY = 0;
		SELL = 1;
		BUY_MINUS = 2;
		SELL_PLUS = 3;
		SELL_SHORT = 4;
		SELL_SHORT_EXEMPT = 5;
		UNDISCLOSED = 6;
		CROSS = 7;
		CROSS_SHORT = 8;
		CROSS_SHORT_EXEMPT = 9;
		AS_DEFINED = 10;
		OPPOSITE = 11;
		SUBSCRIBE = 12;
		REDEEM = 13;
		LEND = 14;
		BORROW = 15;
	}
	required SideEnum value = 1;
}

message TimeInForce {
	enum TimeInForceEnum {
		DAY = 0;
		GOOD_TILL_CANCEL = 1;
		AT_THE_OPENING = 2;
		IMMEDIATE_OR_CANCEL = 3;
		FILL_OR_KILL = 4;
		GOOD_TILL_CROSSING = 5;
		GOOD_TILL_DATE = 6;
		AT_THE_CLOSE = 7;
	}
	required TimeInForceEnum value = 1;
}

message Urgency {
	enum UrgencyEnum {
		NORMAL = 0;
		FLASH = 1;
		BACKGROUND = 2;
	}
	required UrgencyEnum value = 1;
}

message SettlType {
	enum SettlTypeEnum {
		REGULAR = 0;
		CASH = 1;
		NEXT_DAY = 2;
		T_PLUS_2 = 3;
		T_PLUS_3 = 4;
		T_PLUS_4 = 5;
		FUTURE = 6;
		WHEN_AND_IF_ISSUED = 7;
		SELLERS_OPTION = 8;
		T_PLUS_5 = 9;
	}
	required SettlTypeEnum value = 1;
}

message SymbolSfx {
	enum SymbolSfxEnum {
		WHEN_ISSUED = 0;
		A_EUCP_WITH_LUMP_SUM_INTEREST = 1;
	}
	required SymbolSfxEnum value = 1;
}

message AllocTransType {
	enum AllocTransTypeEnum {
		NEW = 0;
		REPLACE = 1;
		CANCEL = 2;
		PRELIMINARY = 3;
		CALCULATED = 4;
		CALCULATED_WITHOUT_PRELIMINARY = 5;
	}
	required AllocTransTypeEnum value = 1;
}

message PositionEffect {
	enum PositionEffectEnum {
		OPEN = 0;
		CLOSE = 1;
		ROLLED = 2;
		FIFO = 3;
	}
	required PositionEffectEnum value = 1;
}

message ProcessCode {
	enum ProcessCodeEnum {
		REGULAR = 0;
		SOFT_DOLLAR = 1;
		STEP_IN = 2;
		STEP_OUT = 3;
		SOFT_DOLLAR_STEP_IN = 4;
		SOFT_DOLLAR_STEP_OUT = 5;
		PLAN_SPONSOR = 6;
	}
	required ProcessCodeEnum value = 1;
}

message AllocStatus {
	enum AllocStatusEnum {
		ACCEPTED = 0;
		BLOCK_LEVEL_REJECT = 1;
		ACCOUNT_LEVEL_REJECT = 2;
		RECEIVED = 3;
		INCOMPLETE = 4;
		REJECTED_BY_INTERMEDIARY = 5;
	}
	required AllocStatusEnum value = 1;
}

message AllocRejCode {
	enum AllocRejCodeEnum {
		UNKNOWN_ACCOUNT = 0;
		INCORRECT_QUANTITY = 1;
		INCORRECT_AVERAGE_PRICE = 2;
		UNKNOWN_EXECUTING_BROKER_MNEMONIC = 3;
		COMMISSION_DIFFERENCE = 4;
		UNKNOWN_ORDERID = 5;
		UNKNOWN_LISTID = 6;
		OTHER = 7;
		INCORRECT_ALLOCATED_QUANTITY = 8;
		CALCULATION_DIFFERENCE = 9;
		UNKNOWN_OR_STALE_EXEC_ID = 10;
		MISMATCHED_DATA_VALUE = 11;
		UNKNOWN_CLORDID = 12;
		WAREHOUSE_REQUEST_REJECTED = 13;
	}
	required AllocRejCodeEnum value = 1;
}

message EmailType {
	enum EmailTypeEnum {
		NEW = 0;
		REPLY = 1;
		ADMIN_REPLY = 2;
	}
	required EmailTypeEnum value = 1;
}

message EncryptMethod {
	enum EncryptMethodEnum {
		NONE_OTHER = 0;
		PKCS = 1;
		DES = 2;
		PKCS_DES = 3;
		PGP_DES = 4;
		PGP_DES_MD5 = 5;
		PEM_DES_MD5 = 6;
	}
	required EncryptMethodEnum value = 1;
}

message CxlRejReason {
	enum CxlRejReasonEnum {
		TOO_LATE_TO_CANCEL = 0;
		UNKNOWN_ORDER = 1;
		BROKER_EXCHANGE_OPTION = 2;
		ORDER_ALREADY_IN_PENDING_CANCEL_OR_PENDING_REPLACE_STATUS = 3;
		UNABLE_TO_PROCESS_ORDER_MASS_CANCEL_REQUEST = 4;
		ORIGORDMODTIME_DID_NOT_MATCH_LAST_TRANSACTTIME_OF_ORDER = 5;
		DUPLICATE_CLORDID_RECEIVED = 6;
		OTHER = 7;
	}
	required CxlRejReasonEnum value = 1;
}

message OrdRejReason {
	enum OrdRejReasonEnum {
		BROKER_EXCHANGE_OPTION = 0;
		UNKNOWN_SYMBOL = 1;
		EXCHANGE_CLOSED = 2;
		ORDER_EXCEEDS_LIMIT = 3;
		TOO_LATE_TO_ENTER = 4;
		UNKNOWN_ORDER = 5;
		DUPLICATE_ORDER = 6;
		DUPLICATE_OF_A_VERBALLY_COMMUNICATED_ORDER = 7;
		STALE_ORDER = 8;
		TRADE_ALONG_REQUIRED = 9;
		INVALID_INVESTOR_ID = 10;
		UNSUPPORTED_ORDER_CHARACTERISTIC = 11;
		SURVEILLENCE_OPTION = 12;
		INCORRECT_QUANTITY = 13;
		INCORRECT_ALLOCATED_QUANTITY = 14;
		UNKNOWN_ACCOUNT = 15;
		OTHER = 16;
	}
	required OrdRejReasonEnum value = 1;
}

message IOIQualifier {
	enum IOIQualifierEnum {
		ALL_OR_NONE = 0;
		MARKET_ON_CLOSE = 1;
		AT_THE_CLOSE = 2;
		VWAP = 3;
		IN_TOUCH_WITH = 4;
		LIMIT = 5;
		MORE_BEHIND = 6;
		AT_THE_OPEN = 7;
		TAKING_A_POSITION = 8;
		AT_THE_MARKET = 9;
		READY_TO_TRADE = 10;
		PORTFOLIO_SHOWN = 11;
		THROUGH_THE_DAY = 12;
		VERSUS = 13;
		INDICATION_WORKING_AWAY = 14;
		CROSSING_OPPORTUNITY = 15;
		AT_THE_MIDPOINT = 16;
		PRE_OPEN = 17;
	}
	required IOIQualifierEnum value = 1;
}

message DKReason {
	enum DKReasonEnum {
		UNKNOWN_SYMBOL = 0;
		WRONG_SIDE = 1;
		QUANTITY_EXCEEDS_ORDER = 2;
		NO_MATCHING_ORDER = 3;
		PRICE_EXCEEDS_LIMIT = 4;
		CALCULATION_DIFFERENCE = 5;
		OTHER = 6;
	}
	required DKReasonEnum value = 1;
}

message MiscFeeType {
	enum MiscFeeTypeEnum {
		REGULATORY = 0;
		TAX = 1;
		LOCAL_COMMISSION = 2;
		EXCHANGE_FEES = 3;
		STAMP = 4;
		LEVY = 5;
		OTHER = 6;
		MARKUP = 7;
		CONSUMPTION_TAX = 8;
	}
	required MiscFeeTypeEnum value = 1;
}

message ExecType {
	enum ExecTypeEnum {
		NEW = 0;
		PARTIAL_FILL = 1;
		FILL = 2;
		DONE_FOR_DAY = 3;
		CANCELED = 4;
		REPLACE = 5;
		PENDING_CANCEL = 6;
		STOPPED = 7;
		REJECTED = 8;
		SUSPENDED = 9;
		PENDING_NEW = 10;
		CALCULATED = 11;
		EXPIRED = 12;
		RESTATED = 13;
		PENDING_REPLACE = 14;
		TRADE = 15;
		TRADE_CORRECT = 16;
		TRADE_CANCEL = 17;
		ORDER_STATUS = 18;
	}
	required ExecTypeEnum value = 1;
}

message SettlCurrFxRateCalc {
	enum SettlCurrFxRateCalcEnum {
		MULTIPLY = 0;
		DIVIDE = 1;
	}
	required SettlCurrFxRateCalcEnum value = 1;
}

message SettlInstMode {
	enum SettlInstModeEnum {
		DEFAULT = 0;
		STANDING_INSTRUCTIONS_PROVIDED = 1;
		SPECIFIC_ORDER_FOR_A_SINGLE_ACCOUNT = 2;
		REQUEST_REJECT = 3;
	}
	required SettlInstModeEnum value = 1;
}

message SettlInstTransType {
	enum SettlInstTransTypeEnum {
		NEW = 0;
		CANCEL = 1;
		REPLACE = 2;
		RESTATE = 3;
	}
	required SettlInstTransTypeEnum value = 1;
}

message SettlInstSource {
	enum SettlInstSourceEnum {
		BROKERS_INSTRUCTIONS = 0;
		INSTITUTIONS_INSTRUCTIONS = 1;
		INVESTOR = 2;
	}
	required SettlInstSourceEnum value = 1;
}

message SecurityType {
	enum SecurityTypeEnum {
		WILDCARD = 0;
		ASSET_BACKED_SECURITIES = 1;
		AMENDED_AND_RESTATED = 2;
		OTHER_ANTICIPATION_NOTES = 3;
		BANKERS_ACCEPTANCE = 4;
		BANK_NOTES = 5;
		BILL_OF_EXCHANGES = 6;
		BRADY_BOND = 7;
		BRIDGE_LOAN = 8;
		BUY_SELLBACK = 9;
		CONVERTIBLE_BOND = 10;
		CERTIFICATE_OF_DEPOSIT = 11;
		CALL_LOANS = 12;
		CORP_MORTGAGE_BACKED_SECURITIES = 13;
		COLLATERALIZED_MORTGAGE_OBLIGATION = 14;
		CERTIFICATE_OF_OBLIGATION = 15;
		CERTIFICATE_OF_PARTICIPATION = 16;
		CORPORATE_BOND = 17;
		COMMERCIAL_PAPER = 18;
		CORPORATE_PRIVATE_PLACEMENT = 19;
		COMMON_STOCK = 20;
		DEFAULTED = 21;
		DEBTOR_IN_POSSESSION = 22;
		DEPOSIT_NOTES = 23;
		DUAL_CURRENCY = 24;
		EURO_CERTIFICATE_OF_DEPOSIT = 25;
		EURO_CORPORATE_BOND = 26;
		EURO_COMMERCIAL_PAPER = 27;
		EURO_SOVEREIGNS = 28;
		EURO_SUPRANATIONAL_COUPONS = 29;
		FEDERAL_AGENCY_COUPON = 30;
		FEDERAL_AGENCY_DISCOUNT_NOTE = 31;
		FOREIGN_EXCHANGE_CONTRACT = 32;
		FORWARD = 33;
		FUTURE = 34;
		GENERAL_OBLIGATION_BONDS = 35;
		IOETTE_MORTGAGE = 36;
		LETTER_OF_CREDIT = 37;
		LIQUIDITY_NOTE = 38;
		MATURED = 39;
		MORTGAGE_BACKED_SECURITIES = 40;
		MUTUAL_FUND = 41;
		MORTGAGE_INTEREST_ONLY = 42;
		MULTI_LEG_INSTRUMENT = 43;
		MORTGAGE_PRINCIPAL_ONLY = 44;
		MORTGAGE_PRIVATE_PLACEMENT = 45;
		MISCELLANEOUS_PASS_THROUGH = 46;
		MANDATORY_TENDER = 47;
		MEDIUM_TERM_NOTES = 48;
		NO_SECURITY_TYPE = 49;
		OVERNIGHT = 50;
		OPTION = 51;
		PRIVATE_EXPORT_FUNDING = 52;
		PFANDBRIEFE = 53;
		PROMISSORY_NOTE = 54;
		PREFERRED_STOCK = 55;
		PLAZOS_FIJOS = 56;
		REVENUE_ANTICIPATION_NOTE = 57;
		REPLACED = 58;
		REPURCHASE = 59;
		RETIRED = 60;
		REVENUE_BONDS = 61;
		REVOLVER_LOAN = 62;
		REVOLVER_TERM_LOAN = 63;
		SECURITIES_LOAN = 64;
		SECURITIES_PLEDGE = 65;
		SPECIAL_ASSESSMENT = 66;
		SPECIAL_OBLIGATION = 67;
		SPECIAL_TAX = 68;
		SHORT_TERM_LOAN_NOTE = 69;
		STRUCTURED_NOTES = 70;
		USD_SUPRANATIONAL_COUPONS = 71;
		SWING_LINE_FACILITY = 72;
		TAX_ANTICIPATION_NOTE = 73;
		TAX_ALLOCATION = 74;
		TO_BE_ANNOUNCED = 75;
		US_TREASURY_BILL = 76;
		US_TREASURY_BOND = 77;
		PRINCIPAL_STRIP_OF_A_CALLABLE_BOND_OR_NOTE = 78;
		TIME_DEPOSIT = 79;
		TAX_EXEMPT_COMMERCIAL_PAPER = 80;
		TERM_LOAN = 81;
		INTEREST_STRIP_FROM_ANY_BOND_OR_NOTE = 82;
		TREASURY_INFLATION_PROTECTED_SECURITIES = 83;
		US_TREASURY_NOTE = 84;
		PRINCIPAL_STRIP_FROM_A_NON_CALLABLE_BOND_OR_NOTE = 85;
		TAX_AND_REVENUE_ANTICIPATION_NOTE = 86;
		VARIABLE_RATE_DEMAND_NOTE = 87;
		WARRANT = 88;
		WITHDRAWN = 89;
		EXTENDED_COMM_NOTE = 90;
		INDEXED_LINKED = 91;
		YANKEE_CORPORATE_BOND = 92;
		YANKEE_CERTIFICATE_OF_DEPOSIT = 93;
	}
	required SecurityTypeEnum value = 1;
}

message StandInstDbType {
	enum StandInstDbTypeEnum {
		OTHER = 0;
		DTC_SID = 1;
		THOMSON_ALERT = 2;
		A_GLOBAL_CUSTODIAN = 3;
		ACCOUNTNET = 4;
	}
	required StandInstDbTypeEnum value = 1;
}

message SettlDeliveryType {
	enum SettlDeliveryTypeEnum {
		VERSUS_PAYMENT = 0;
		FREE = 1;
		TRI_PARTY = 2;
		HOLD_IN_CUSTODY = 3;
	}
	required SettlDeliveryTypeEnum value = 1;
}

message AllocLinkType {
	enum AllocLinkTypeEnum {
		F_X_NETTING = 0;
		F_X_SWAP = 1;
	}
	required AllocLinkTypeEnum value = 1;
}

message CoveredOrUncovered {
	enum CoveredOrUncoveredEnum {
		COVERED = 0;
		UNCOVERED = 1;
	}
	required CoveredOrUncoveredEnum value = 1;
}

message AllocHandlInst {
	enum AllocHandlInstEnum {
		MATCH = 0;
		FORWARD = 1;
		FORWARD_AND_MATCH = 2;
	}
	required AllocHandlInstEnum value = 1;
}

message RoutingType {
	enum RoutingTypeEnum {
		TARGET_FIRM = 0;
		TARGET_LIST = 1;
		BLOCK_FIRM = 2;
		BLOCK_LIST = 3;
	}
	required RoutingTypeEnum value = 1;
}

message BenchmarkCurveName {
	enum BenchmarkCurveNameEnum {
		MUNIAAA = 0;
		FUTURESWAP = 1;
		LIBID = 2;
		LIBOR = 3;
		OTHER = 4;
		SWAP = 5;
		TREASURY = 6;
		EURIBOR = 7;
		PFANDBRIEFE = 8;
		EONIA = 9;
		SONIA = 10;
		EUREPO = 11;
	}
	required BenchmarkCurveNameEnum value = 1;
}

message StipulationType {
	enum StipulationTypeEnum {
		AMT = 0;
		AUTO_REINVESTMENT_AT_OR_BETTER = 1;
		BANK_QUALIFIED = 2;
		BARGAIN_CONDITIONS = 3;
		COUPON_RANGE = 4;
		ISO_CURRENCY_CODE = 5;
		CUSTOM_START_END_DATE = 6;
		GEOGRAPHICS_AND_PERCENT_RANGE = 7;
		VALUATION_DISCOUNT = 8;
		INSURED = 9;
		YEAR_OR_YEAR_MONTH_OF_ISSUE = 10;
		ISSUERS_TICKER = 11;
		ISSUE_SIZE_RANGE = 12;
		LOOKBACK_DAYS = 13;
		EXPLICIT_LOT_IDENTIFIER = 14;
		LOT_VARIANCE = 15;
		MATURITY_YEAR_AND_MONTH = 16;
		MATURITY_RANGE = 17;
		MAXIMUM_SUBSTITUTIONS = 18;
		MINIMUM_QUANTITY = 19;
		MINIMUM_INCREMENT = 20;
		MINIMUM_DENOMINATION = 21;
		PAYMENT_FREQUENCY_CALENDAR = 22;
		NUMBER_OF_PIECES = 23;
		POOLS_MAXIMUM = 24;
		POOLS_PER_MILLION = 25;
		POOLS_PER_LOT = 26;
		POOLS_PER_TRADE = 27;
		PRICE_RANGE = 28;
		PRICING_FREQUENCY = 29;
		PRODUCTION_YEAR = 30;
		CALL_PROTECTION = 31;
		PURPOSE = 32;
		BENCHMARK_PRICE_SOURCE = 33;
		RATING_SOURCE_AND_RANGE = 34;
		RESTRICTED = 35;
		MARKET_SECTOR = 36;
		SECURITYTYPE_INCLUDED_OR_EXCLUDED = 37;
		STRUCTURE = 38;
		SUBSTITUTIONS_FREQUENCY = 39;
		SUBSTITUTIONS_LEFT = 40;
		FREEFORM_TEXT = 41;
		TRADE_VARIANCE = 42;
		WEIGHTED_AVERAGE_COUPON = 43;
		WEIGHTED_AVERAGE_LIFE_COUPON = 44;
		WEIGHTED_AVERAGE_LOAN_AGE = 45;
		WEIGHTED_AVERAGE_MATURITY = 46;
		WHOLE_POOL = 47;
		YIELD_RANGE = 48;
		SINGLE_MONTHLY_MORTALITY = 49;
		CONSTANT_PREPAYMENT_RATE = 50;
		CONSTANT_PREPAYMENT_YIELD = 51;
		CONSTANT_PREPAYMENT_PENALTY = 52;
		ABSOLUTE_PREPAYMENT_SPEED = 53;
		MONTHLY_PREPAYMENT_RATE = 54;
		PERCENT_OF_BMA_PREPAYMENT_CURVE = 55;
		PERCENT_OF_PROSPECTUS_PREPAYMENT_CURVE = 56;
		PERCENT_OF_MANUFACTURED_HOUSING_PREPAYMENT_CURVE = 57;
		FINAL_CPR_OF_HOME_EQUITY_PREPAYMENT_CURVE = 58;
	}
	required StipulationTypeEnum value = 1;
}

message StipulationValue {
	enum StipulationValueEnum {
		SPECIAL_CUM_DIVIDEND = 0;
		SPECIAL_EX_DIVIDEND = 1;
		SPECIAL_CUM_COUPON = 2;
		SPECIAL_EX_COUPON = 3;
		SPECIAL_CUM_BONUS = 4;
		SPECIAL_EX_BONUS = 5;
		SPECIAL_CUM_RIGHTS = 6;
		SPECIAL_EX_RIGHTS = 7;
		SPECIAL_CUM_CAPITAL_REPAYMENTS = 8;
		SPECIAL_EX_CAPITAL_REPAYMENTS = 9;
		CASH_SETTLEMENT = 10;
		SPECIAL_PRICE = 11;
		REPORT_FOR_EUROPEAN_EQUITY_MARKET_SECURITIES = 12;
		GUARANTEED_DELIVERY = 13;
	}
	required StipulationValueEnum value = 1;
}

message YieldType {
	enum YieldTypeEnum {
		AFTER_TAX_YIELD = 0;
		ANNUAL_YIELD = 1;
		YIELD_AT_ISSUE = 2;
		YIELD_TO_AVERAGE_MATURITY = 3;
		BOOK_YIELD = 4;
		YIELD_TO_NEXT_CALL = 5;
		YIELD_CHANGE_SINCE_CLOSE = 6;
		CLOSING_YIELD = 7;
		COMPOUND_YIELD = 8;
		CURRENT_YIELD = 9;
		TRUE_GROSS_YIELD = 10;
		GOVERNMENT_EQUIVALENT_YIELD = 11;
		YIELD_WITH_INFLATION_ASSUMPTION = 12;
		INVERSE_FLOATER_BOND_YIELD = 13;
		MOST_RECENT_CLOSING_YIELD = 14;
		CLOSING_YIELD_MOST_RECENT_MONTH = 15;
		CLOSING_YIELD_MOST_RECENT_QUARTER = 16;
		CLOSING_YIELD_MOST_RECENT_YEAR = 17;
		YIELD_TO_LONGEST_AVERAGE_LIFE = 18;
		MARK_TO_MARKET_YIELD = 19;
		YIELD_TO_MATURITY = 20;
		YIELD_TO_NEXT_REFUND = 21;
		OPEN_AVERAGE_YIELD = 22;
		YIELD_TO_NEXT_PUT = 23;
		PREVIOUS_CLOSE_YIELD = 24;
		PROCEEDS_YIELD = 25;
		SEMI_ANNUAL_YIELD = 26;
		YIELD_TO_SHORTEST_AVERAGE_LIFE = 27;
		SIMPLE_YIELD = 28;
		TAX_EQUIVALENT_YIELD = 29;
		YIELD_TO_TENDER_DATE = 30;
		TRUE_YIELD = 31;
		YIELD_VALUE_OF_1_32 = 32;
		YIELD_TO_WORST = 33;
	}
	required YieldTypeEnum value = 1;
}

message SubscriptionRequestType {
	enum SubscriptionRequestTypeEnum {
		SNAPSHOT = 0;
		SNAPSHOT_PLUS_UPDATES = 1;
		DISABLE_PREVIOUS_SNAPSHOT_PLUS_UPDATE_REQUEST = 2;
	}
	required SubscriptionRequestTypeEnum value = 1;
}

message MDUpdateType {
	enum MDUpdateTypeEnum {
		FULL_REFRESH = 0;
		INCREMENTAL_REFRESH = 1;
	}
	required MDUpdateTypeEnum value = 1;
}

message MDEntryType {
	enum MDEntryTypeEnum {
		BID = 0;
		OFFER = 1;
		TRADE = 2;
		INDEX_VALUE = 3;
		OPENING_PRICE = 4;
		CLOSING_PRICE = 5;
		SETTLEMENT_PRICE = 6;
		TRADING_SESSION_HIGH_PRICE = 7;
		TRADING_SESSION_LOW_PRICE = 8;
		TRADING_SESSION_VWAP_PRICE = 9;
		IMBALANCE = 10;
		TRADE_VOLUME = 11;
		OPEN_INTEREST = 12;
	}
	required MDEntryTypeEnum value = 1;
}

message TickDirection {
	enum TickDirectionEnum {
		PLUS_TICK = 0;
		ZERO_PLUS_TICK = 1;
		MINUS_TICK = 2;
		ZERO_MINUS_TICK = 3;
	}
	required TickDirectionEnum value = 1;
}

message QuoteCondition {
	enum QuoteConditionEnum {
		OPEN_ACTIVE = 0;
		CLOSED_INACTIVE = 1;
		EXCHANGE_BEST = 2;
		CONSOLIDATED_BEST = 3;
		LOCKED = 4;
		CROSSED = 5;
		DEPTH = 6;
		FAST_TRADING = 7;
		NON_FIRM = 8;
	}
	required QuoteConditionEnum value = 1;
}

message TradeCondition {
	enum TradeConditionEnum {
		CASH_MARKET = 0;
		AVERAGE_PRICE_TRADE = 1;
		CASH_TRADE = 2;
		NEXT_DAY_MARKET = 3;
		OPENING_REOPENING_TRADE_DETAIL = 4;
		INTRADAY_TRADE_DETAIL = 5;
		RULE127 = 6;
		RULE155 = 7;
		SOLD_LAST = 8;
		NEXT_DAY_TRADE = 9;
		OPENED = 10;
		SELLER = 11;
		SOLD = 12;
		STOPPED_STOCK = 13;
		IMBALANCE_MORE_BUYERS = 14;
		IMBALANCE_MORE_SELLERS = 15;
		OPENING_PRICE = 16;
	}
	required TradeConditionEnum value = 1;
}

message MDUpdateAction {
	enum MDUpdateActionEnum {
		NEW = 0;
		CHANGE = 1;
		DELETE = 2;
	}
	required MDUpdateActionEnum value = 1;
}

message MDReqRejReason {
	enum MDReqRejReasonEnum {
		UNKNOWN_SYMBOL = 0;
		DUPLICATE_MDREQID = 1;
		INSUFFICIENT_BANDWIDTH = 2;
		INSUFFICIENT_PERMISSIONS = 3;
		UNSUPPORTED_SUBSCRIPTIONREQUESTTYPE = 4;
		UNSUPPORTED_MARKETDEPTH = 5;
		UNSUPPORTED_MDUPDATETYPE = 6;
		UNSUPPORTED_AGGREGATEDBOOK = 7;
		UNSUPPORTED_MDENTRYTYPE = 8;
		UNSUPPORTED_TRADINGSESSIONID = 9;
		UNSUPPORTED_SCOPE = 10;
		UNSUPPORTED_OPENCLOSESETTLEFLAG = 11;
		UNSUPPORTED_MDIMPLICITDELETE = 12;
	}
	required MDReqRejReasonEnum value = 1;
}

message DeleteReason {
	enum DeleteReasonEnum {
		CANCELATION_TRADE_BUST = 0;
		ERROR = 1;
	}
	required DeleteReasonEnum value = 1;
}

message OpenCloseSettlFlag {
	enum OpenCloseSettlFlagEnum {
		DAILY_OPEN_CLOSE_SETTLEMENT_ENTRY = 0;
		SESSION_OPEN_CLOSE_SETTLEMENT_ENTRY = 1;
		DELIVERY_SETTLEMENT_ENTRY = 2;
		EXPECTED_ENTRY = 3;
		ENTRY_FROM_PREVIOUS_BUSINESS_DAY = 4;
		THEORETICAL_PRICE_VALUE = 5;
	}
	required OpenCloseSettlFlagEnum value = 1;
}

message FinancialStatus {
	enum FinancialStatusEnum {
		BANKRUPT = 0;
		PENDING_DELISTING = 1;
	}
	required FinancialStatusEnum value = 1;
}

message CorporateAction {
	enum CorporateActionEnum {
		EX_DIVIDEND = 0;
		EX_DISTRIBUTION = 1;
		EX_RIGHTS = 2;
		NEW = 3;
		EX_INTEREST = 4;
	}
	required CorporateActionEnum value = 1;
}

message QuoteStatus {
	enum QuoteStatusEnum {
		ACCEPTED = 0;
		CANCELED_FOR_SYMBOL = 1;
		CANCELED_FOR_SECURITY_TYPE = 2;
		CANCELED_FOR_UNDERLYING = 3;
		CANCELED_ALL = 4;
		REJECTED = 5;
		REMOVED_FROM_MARKET = 6;
		EXPIRED = 7;
		QUERY = 8;
		QUOTE_NOT_FOUND = 9;
		PENDING = 10;
		PASS = 11;
		LOCKED_MARKET_WARNING = 12;
		CROSS_MARKET_WARNING = 13;
		CANCELED_DUE_TO_LOCK_MARKET = 14;
		CANCELED_DUE_TO_CROSS_MARKET = 15;
	}
	required QuoteStatusEnum value = 1;
}

message QuoteCancelType {
	enum QuoteCancelTypeEnum {
		CANCEL_FOR_SYMBOL = 0;
		CANCEL_FOR_SECURITY_TYPE = 1;
		CANCEL_FOR_UNDERLYING_SYMBOL = 2;
		CANCEL_ALL_QUOTES = 3;
	}
	required QuoteCancelTypeEnum value = 1;
}

message QuoteRejectReason {
	enum QuoteRejectReasonEnum {
		UNKNOWN_SYMBOL = 0;
		EXCHANGE_CLOSED = 1;
		QUOTE_REQUEST_EXCEEDS_LIMIT = 2;
		TOO_LATE_TO_ENTER = 3;
		UNKNOWN_QUOTE = 4;
		DUPLICATE_QUOTE = 5;
		INVALID_BID_ASK_SPREAD = 6;
		INVALID_PRICE = 7;
		NOT_AUTHORIZED_TO_QUOTE_SECURITY = 8;
	}
	required QuoteRejectReasonEnum value = 1;
}

message QuoteResponseLevel {
	enum QuoteResponseLevelEnum {
		NO_ACKNOWLEDGEMENT = 0;
		ACKNOWLEDGE_ONLY_NEGATIVE_OR_ERRONEOUS_QUOTES = 1;
		ACKNOWLEDGE_EACH_QUOTE_MESSAGES = 2;
	}
	required QuoteResponseLevelEnum value = 1;
}

message QuoteRequestType {
	enum QuoteRequestTypeEnum {
		MANUAL = 0;
		AUTOMATIC = 1;
	}
	required QuoteRequestTypeEnum value = 1;
}

message SecurityRequestType {
	enum SecurityRequestTypeEnum {
		REQUEST_SECURITY_IDENTITY_AND_SPECIFICATIONS = 0;
		REQUEST_SECURITY_IDENTITY_FOR_THE_SPECIFICATIONS_PROVIDED = 1;
		REQUEST_LIST_SECURITY_TYPES = 2;
		REQUEST_LIST_SECURITIES = 3;
	}
	required SecurityRequestTypeEnum value = 1;
}

message SecurityResponseType {
	enum SecurityResponseTypeEnum {
		ACCEPT_SECURITY_PROPOSAL_AS_IS = 0;
		ACCEPT_SECURITY_PROPOSAL_WITH_REVISIONS_AS_INDICATED_IN_THE_MESSAGE = 1;
		LIST_OF_SECURITY_TYPES_RETURNED_PER_REQUEST = 2;
		LIST_OF_SECURITIES_RETURNED_PER_REQUEST = 3;
		REJECT_SECURITY_PROPOSAL = 4;
		CAN_NOT_MATCH_SELECTION_CRITERIA = 5;
	}
	required SecurityResponseTypeEnum value = 1;
}

message SecurityTradingStatus {
	enum SecurityTradingStatusEnum {
		OPENING_DELAY = 0;
		TRADING_HALT = 1;
		RESUME = 2;
		NO_OPEN_NO_RESUME = 3;
		PRICE_INDICATION = 4;
		TRADING_RANGE_INDICATION = 5;
		MARKET_IMBALANCE_BUY = 6;
		MARKET_IMBALANCE_SELL = 7;
		MARKET_ON_CLOSE_IMBALANCE_BUY = 8;
		MARKET_ON_CLOSE_IMBALANCE_SELL = 9;
		NOT_ASSIGNED = 10;
		NO_MARKET_IMBALANCE = 11;
		NO_MARKET_ON_CLOSE_IMBALANCE = 12;
		ITS_PRE_OPENING = 13;
		NEW_PRICE_INDICATION = 14;
		TRADE_DISSEMINATION_TIME = 15;
		READY_TO_TRADE_START_OF_SESSION = 16;
		NOT_AVAILABLE_FOR_TRADING_END_OF_SESSION = 17;
		NOT_TRADED_ON_THIS_MARKET = 18;
		UNKNOWN_OR_INVALID = 19;
		PRE_OPEN = 20;
		OPENING_ROTATION = 21;
		FAST_MARKET = 22;
	}
	required SecurityTradingStatusEnum value = 1;
}

message HaltReason {
	enum HaltReasonEnum {
		ORDER_IMBALANCE = 0;
		EQUIPMENT_CHANGEOVER = 1;
		NEWS_PENDING = 2;
		NEWS_DISSEMINATION = 3;
		ORDER_INFLUX = 4;
		ADDITIONAL_INFORMATION = 5;
	}
	required HaltReasonEnum value = 1;
}

message Adjustment {
	enum AdjustmentEnum {
		CANCEL = 0;
		ERROR = 1;
		CORRECTION = 2;
	}
	required AdjustmentEnum value = 1;
}

message TradSesMethod {
	enum TradSesMethodEnum {
		ELECTRONIC = 0;
		OPEN_OUTCRY = 1;
		TWO_PARTY = 2;
	}
	required TradSesMethodEnum value = 1;
}

message TradSesMode {
	enum TradSesModeEnum {
		TESTING = 0;
		SIMULATED = 1;
		PRODUCTION = 2;
	}
	required TradSesModeEnum value = 1;
}

message TradSesStatus {
	enum TradSesStatusEnum {
		UNKNOWN = 0;
		HALTED = 1;
		OPEN = 2;
		CLOSED = 3;
		PRE_OPEN = 4;
		PRE_CLOSE = 5;
		REQUEST_REJECTED = 6;
	}
	required TradSesStatusEnum value = 1;
}

message MessageEncoding {
	enum MessageEncodingEnum {
		ISO_2022_JP = 0;
		EUC_JP = 1;
		SHIFT_JIS = 2;
		UTF_8 = 3;
	}
	required MessageEncodingEnum value = 1;
}

message QuoteEntryRejectReason {
	enum QuoteEntryRejectReasonEnum {
		UNKNOWN_SYMBOL = 0;
		EXCHANGE_CLOSED = 1;
		QUOTE_EXCEEDS_LIMIT = 2;
		TOO_LATE_TO_ENTER = 3;
		UNKNOWN_QUOTE = 4;
		DUPLICATE_QUOTE = 5;
		INVALID_BID_ASK_SPREAD = 6;
		INVALID_PRICE = 7;
		NOT_AUTHORIZED_TO_QUOTE_SECURITY = 8;
	}
	required QuoteEntryRejectReasonEnum value = 1;
}

message SessionRejectReason {
	enum SessionRejectReasonEnum {
		INVALID_TAG_NUMBER = 0;
		REQUIRED_TAG_MISSING = 1;
		TAG_NOT_DEFINED_FOR_THIS_MESSAGE_TYPE = 2;
		UNDEFINED_TAG = 3;
		TAG_SPECIFIED_WITHOUT_A_VALUE = 4;
		VALUE_IS_INCORRECT = 5;
		INCORRECT_DATA_FORMAT_FOR_VALUE = 6;
		DECRYPTION_PROBLEM = 7;
		SIGNATURE_PROBLEM = 8;
		COMPID_PROBLEM = 9;
		SENDINGTIME_ACCURACY_PROBLEM = 10;
		INVALID_MSGTYPE = 11;
		XML_VALIDATION_ERROR = 12;
		TAG_APPEARS_MORE_THAN_ONCE = 13;
		TAG_SPECIFIED_OUT_OF_REQUIRED_ORDER = 14;
		REPEATING_GROUP_FIELDS_OUT_OF_ORDER = 15;
		INCORRECT_NUMINGROUP_COUNT_FOR_REPEATING_GROUP = 16;
		NON_DATA_VALUE_INCLUDES_FIELD_DELIMITER = 17;
		OTHER = 18;
	}
	required SessionRejectReasonEnum value = 1;
}

message BidRequestTransType {
	enum BidRequestTransTypeEnum {
		NEW = 0;
		CANCEL = 1;
	}
	required BidRequestTransTypeEnum value = 1;
}

message ExecRestatementReason {
	enum ExecRestatementReasonEnum {
		GT_CORPORATE_ACTION = 0;
		GT_RENEWAL_RESTATEMENT = 1;
		VERBAL_CHANGE = 2;
		REPRICING_OF_ORDER = 3;
		BROKER_OPTION = 4;
		PARTIAL_DECLINE_OF_ORDERQTY = 5;
		CANCEL_ON_TRADING_HALT = 6;
		CANCEL_ON_SYSTEM_FAILURE = 7;
		MARKET_OPTION = 8;
		CANCELED_NOT_BEST = 9;
	}
	required ExecRestatementReasonEnum value = 1;
}

message BusinessRejectReason {
	enum BusinessRejectReasonEnum {
		OTHER = 0;
		UNKOWN_ID = 1;
		UNKNOWN_SECURITY = 2;
		UNSUPPORTED_MESSAGE_TYPE = 3;
		APPLICATION_NOT_AVAILABLE = 4;
		CONDITIONALLY_REQUIRED_FIELD_MISSING = 5;
		NOT_AUTHORIZED = 6;
		DELIVERTO_FIRM_NOT_AVAILABLE_AT_THIS_TIME = 7;
	}
	required BusinessRejectReasonEnum value = 1;
}

message MsgDirection {
	enum MsgDirectionEnum {
		SEND = 0;
		RECEIVE = 1;
	}
	required MsgDirectionEnum value = 1;
}

message DiscretionInst {
	enum DiscretionInstEnum {
		RELATED_TO_DISPLAYED_PRICE = 0;
		RELATED_TO_MARKET_PRICE = 1;
		RELATED_TO_PRIMARY_PRICE = 2;
		RELATED_TO_LOCAL_PRIMARY_PRICE = 3;
		RELATED_TO_MIDPOINT_PRICE = 4;
		RELATED_TO_LAST_TRADE_PRICE = 5;
		RELATED_TO_VWAP = 6;
	}
	required DiscretionInstEnum value = 1;
}

message BidType {
	enum BidTypeEnum {
		NON_DISCLOSED = 0;
		DISCLOSED_STYLE = 1;
		NO_BIDDING_PROCESS = 2;
	}
	required BidTypeEnum value = 1;
}

message BidDescriptorType {
	enum BidDescriptorTypeEnum {
		SECTOR = 0;
		COUNTRY = 1;
		INDEX = 2;
	}
	required BidDescriptorTypeEnum value = 1;
}

message SideValueInd {
	enum SideValueIndEnum {
		SIDEVALUE1 = 0;
		SIDEVALUE2 = 1;
	}
	required SideValueIndEnum value = 1;
}

message LiquidityIndType {
	enum LiquidityIndTypeEnum {
		FIVEDAY_MOVING_AVERAGE = 0;
		TWENTYDAY_MOVING_AVERAGE = 1;
		NORMAL_MARKET_SIZE = 2;
		OTHER = 3;
	}
	required LiquidityIndTypeEnum value = 1;
}

message ProgRptReqs {
	enum ProgRptReqsEnum {
		BUYSIDE_EXPLICITLY_REQUESTS_STATUS_USING_STATUSREQUEST = 0;
		SELLSIDE_PERIODICALLY_SENDS_STATUS_USING_LISTSTATUS = 1;
		REAL_TIME_EXECUTION_REPORTS = 2;
	}
	required ProgRptReqsEnum value = 1;
}

message IncTaxInd {
	enum IncTaxIndEnum {
		NET = 0;
		GROSS = 1;
	}
	required IncTaxIndEnum value = 1;
}

message BidTradeType {
	enum BidTradeTypeEnum {
		RISK_TRADE = 0;
		VWAP_GUARANTEE = 1;
		AGENCY = 2;
		GUARANTEED_CLOSE = 3;
	}
	required BidTradeTypeEnum value = 1;
}

message BasisPxType {
	enum BasisPxTypeEnum {
		CLOSING_PRICE_AT_MORNING_SESSION = 0;
		CLOSING_PRICE = 1;
		CURRENT_PRICE = 2;
		SQ = 3;
		VWAP_THROUGH_A_DAY = 4;
		VWAP_THROUGH_A_MORNING_SESSION = 5;
		VWAP_THROUGH_AN_AFTERNOON_SESSION = 6;
		VWAP_THROUGH_A_DAY_EXCEPT_YORI = 7;
		VWAP_THROUGH_A_MORNING_SESSION_EXCEPT_YORI = 8;
		VWAP_THROUGH_AN_AFTERNOON_SESSION_EXCEPT_YORI = 9;
		STRIKE = 10;
		OPEN = 11;
		OTHERS = 12;
	}
	required BasisPxTypeEnum value = 1;
}

message PriceType {
	enum PriceTypeEnum {
		PERCENTAGE = 0;
		PER_UNIT = 1;
		FIXED_AMOUNT = 2;
		DISCOUNT = 3;
		PREMIUM = 4;
		SPREAD = 5;
		TED_PRICE = 6;
		TED_YIELD = 7;
		YIELD = 8;
	}
	required PriceTypeEnum value = 1;
}

message GTBookingInst {
	enum GTBookingInstEnum {
		BOOK_OUT_ALL_TRADES_ON_DAY_OF_EXECUTION = 0;
		ACCUMULATE_EXECUTIONS_UNTIL_ORDER_IS_FILLED_OR_EXPIRES = 1;
		ACCUMULATE_UNTIL_VERBALLY_NOTIFIED_OTHERWISE = 2;
	}
	required GTBookingInstEnum value = 1;
}

message ListStatusType {
	enum ListStatusTypeEnum {
		ACK = 0;
		RESPONSE = 1;
		TIMED = 2;
		EXECSTARTED = 3;
		ALLDONE = 4;
		ALERT = 5;
	}
	required ListStatusTypeEnum value = 1;
}

message NetGrossInd {
	enum NetGrossIndEnum {
		NET = 0;
		GROSS = 1;
	}
	required NetGrossIndEnum value = 1;
}

message ListOrderStatus {
	enum ListOrderStatusEnum {
		INBIDDINGPROCESS = 0;
		RECEIVEDFOREXECUTION = 1;
		EXECUTING = 2;
		CANCELING = 3;
		ALERT = 4;
		ALL_DONE = 5;
		REJECT = 6;
	}
	required ListOrderStatusEnum value = 1;
}

message ListExecInstType {
	enum ListExecInstTypeEnum {
		IMMEDIATE = 0;
		WAIT_FOR_EXECUTE_INSTRUCTION = 1;
		EXCHANGE_SWITCH_CIV_ORDER_SELL_DRIVEN = 2;
		EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_TOP_UP = 3;
		EXCHANGE_SWITCH_CIV_ORDER_BUY_DRIVEN_CASH_WITHDRAW = 4;
	}
	required ListExecInstTypeEnum value = 1;
}

message CxlRejResponseTo {
	enum CxlRejResponseToEnum {
		ORDER_CANCEL_REQUEST = 0;
		ORDER_CANCEL_REPLACE_REQUEST = 1;
	}
	required CxlRejResponseToEnum value = 1;
}

message MultiLegReportingType {
	enum MultiLegReportingTypeEnum {
		SINGLE_SECURITY = 0;
		INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY = 1;
		MULTI_LEG_SECURITY = 2;
	}
	required MultiLegReportingTypeEnum value = 1;
}

message PartyIDSource {
	enum PartyIDSourceEnum {
		BIC = 0;
		GENERALLY_ACCEPTED_MARKET_PARTICIPANT_IDENTIFIER = 1;
		PROPRIETARY_CUSTOM_CODE = 2;
		ISO_COUNTRY_CODE = 3;
		SETTLEMENT_ENTITY_LOCATION = 4;
		MIC = 5;
		CSD_PARTICIPANT_MEMBER_CODE = 6;
		KOREAN_INVESTOR_ID = 7;
		TAIWANESE_QUALIFIED_FOREIGN_INVESTOR_ID_QFII_FID = 8;
		TAIWANESE_TRADING_ACCOUNT = 9;
		MALAYSIAN_CENTRAL_DEPOSITORY_NUMBER = 10;
		CHINESE_B_SHARE = 11;
		UK_NATIONAL_INSURANCE_OR_PENSION_NUMBER = 12;
		US_SOCIAL_SECURITY_NUMBER = 13;
		US_EMPLOYER_IDENTIFICATION_NUMBER = 14;
		AUSTRALIAN_BUSINESS_NUMBER = 15;
		AUSTRALIAN_TAX_FILE_NUMBER = 16;
		DIRECTED_BROKER = 17;
	}
	required PartyIDSourceEnum value = 1;
}

message PartyRole {
	enum PartyRoleEnum {
		EXECUTING_FIRM = 0;
		BROKER_OF_CREDIT = 1;
		CLIENT_ID = 2;
		CLEARING_FIRM = 3;
		INVESTOR_ID = 4;
		INTRODUCING_FIRM = 5;
		ENTERING_FIRM = 6;
		LOCATE_LENDING_FIRM = 7;
		FUND_MANAGER_CLIENT_ID = 8;
		SETTLEMENT_LOCATION = 9;
		ORDER_ORIGINATION_TRADER = 10;
		EXECUTING_TRADER = 11;
		ORDER_ORIGINATION_FIRM = 12;
		GIVEUP_CLEARING_FIRM = 13;
		CORRESPONDANT_CLEARING_FIRM = 14;
		EXECUTING_SYSTEM = 15;
		CONTRA_FIRM = 16;
		CONTRA_CLEARING_FIRM = 17;
		SPONSORING_FIRM = 18;
		UNDERLYING_CONTRA_FIRM = 19;
		CLEARING_ORGANIZATION = 20;
		EXCHANGE = 21;
		CUSTOMER_ACCOUNT = 22;
		CORRESPONDENT_CLEARING_ORGANIZATION = 23;
		CORRESPONDENT_BROKER = 24;
		BUYER_SELLER = 25;
		CUSTODIAN = 26;
		INTERMEDIARY = 27;
		AGENT = 28;
		SUB_CUSTODIAN = 29;
		BENEFICIARY = 30;
		INTERESTED_PARTY = 31;
		REGULATORY_BODY = 32;
		LIQUIDITY_PROVIDER = 33;
		ENTERING_TRADER = 34;
		CONTRA_TRADER = 35;
		POSITION_ACCOUNT = 36;
	}
	required PartyRoleEnum value = 1;
}

message Product {
	enum ProductEnum {
		AGENCY = 0;
		COMMODITY = 1;
		CORPORATE = 2;
		CURRENCY = 3;
		EQUITY = 4;
		GOVERNMENT = 5;
		INDEX = 6;
		LOAN = 7;
		MONEYMARKET = 8;
		MORTGAGE = 9;
		MUNICIPAL = 10;
		OTHER = 11;
		FINANCING = 12;
	}
	required ProductEnum value = 1;
}

message QuantityType {
	enum QuantityTypeEnum {
		SHARES = 0;
		BONDS = 1;
		CURRENTFACE = 2;
		ORIGINALFACE = 3;
		CURRENCY = 4;
		CONTRACTS = 5;
		OTHER = 6;
		PAR = 7;
	}
	required QuantityTypeEnum value = 1;
}

message RoundingDirection {
	enum RoundingDirectionEnum {
		ROUND_TO_NEAREST = 0;
		ROUND_DOWN = 1;
		ROUND_UP = 2;
	}
	required RoundingDirectionEnum value = 1;
}

message DistribPaymentMethod {
	enum DistribPaymentMethodEnum {
		CREST = 0;
		NSCC = 1;
		EUROCLEAR = 2;
		CLEARSTREAM = 3;
		CHEQUE = 4;
		TELEGRAPHIC_TRANSFER = 5;
		FEDWIRE = 6;
		DIRECT_CREDIT = 7;
		ACH_CREDIT = 8;
	}
	required DistribPaymentMethodEnum value = 1;
}

message CancellationRights {
	enum CancellationRightsEnum {
		NO_EXECUTION_ONLY = 0;
		NO_WAIVER_AGREEMENT = 1;
		NO_INSTITUTIONAL = 2;
	}
	required CancellationRightsEnum value = 1;
}

message MoneyLaunderingStatus {
	enum MoneyLaunderingStatusEnum {
		PASSED = 0;
		NOT_CHECKED = 1;
		EXEMPT_BELOW_THE_LIMIT = 2;
		EXEMPT_CLIENT_MONEY_TYPE_EXEMPTION = 3;
		EXEMPT_AUTHORISED_CREDIT_OR_FINANCIAL_INSTITUTION = 4;
	}
	required MoneyLaunderingStatusEnum value = 1;
}

message ExecPriceType {
	enum ExecPriceTypeEnum {
		BID_PRICE = 0;
		CREATION_PRICE = 1;
		CREATION_PRICE_PLUS_ADJUSTMENT_PERCENT = 2;
		CREATION_PRICE_PLUS_ADJUSTMENT_AMOUNT = 3;
		OFFER_PRICE = 4;
		OFFER_PRICE_MINUS_ADJUSTMENT_PERCENT = 5;
		OFFER_PRICE_MINUS_ADJUSTMENT_AMOUNT = 6;
		SINGLE_PRICE = 7;
	}
	required ExecPriceTypeEnum value = 1;
}

message TradeReportTransType {
	enum TradeReportTransTypeEnum {
		NEW = 0;
		CANCEL = 1;
		REPLACE = 2;
		RELEASE = 3;
		REVERSE = 4;
	}
	required TradeReportTransTypeEnum value = 1;
}

message PaymentMethod {
	enum PaymentMethodEnum {
		CREST = 0;
		NSCC = 1;
		EUROCLEAR = 2;
		CLEARSTREAM = 3;
		CHEQUE = 4;
		TELEGRAPHIC_TRANSFER = 5;
		FEDWIRE = 6;
		DEBIT_CARD = 7;
		DIRECT_DEBIT = 8;
	}
	required PaymentMethodEnum value = 1;
}

message TaxAdvantageType {
	enum TaxAdvantageTypeEnum {
		NONE = 0;
		MAXI_ISA = 1;
		TESSA = 2;
		MINI_CASH_ISA = 3;
		MINI_STOCKS_AND_SHARES_ISA = 4;
		MINI_INSURANCE_ISA = 5;
		CURRENT_YEAR_PAYMENT = 6;
		PRIOR_YEAR_PAYMENT = 7;
		ASSET_TRANSFER = 8;
		EMPLOYEE_PRIOR_YEAR = 9;
		OTHER = 10;
	}
	required TaxAdvantageTypeEnum value = 1;
}

message FundRenewWaiv {
	enum FundRenewWaivEnum {
		YES = 0;
		NO = 1;
	}
	required FundRenewWaivEnum value = 1;
}

message RegistStatus {
	enum RegistStatusEnum {
		ACCEPTED = 0;
		REJECTED = 1;
		HELD = 2;
		REMINDER = 3;
	}
	required RegistStatusEnum value = 1;
}

message RegistRejReasonCode {
	enum RegistRejReasonCodeEnum {
		INVALID_UNACCEPTABLE_ACCOUNT_TYPE = 0;
		INVALID_UNACCEPTABLE_TAX_EXEMPT_TYPE = 1;
		INVALID_UNACCEPTABLE_OWNERSHIP_TYPE = 2;
		INVALID_UNACCEPTABLE_NO_REG_DETLS = 3;
		INVALID_UNACCEPTABLE_REG_SEQ_NO = 4;
		INVALID_UNACCEPTABLE_REG_DTLS = 5;
		INVALID_UNACCEPTABLE_MAILING_DTLS = 6;
		INVALID_UNACCEPTABLE_MAILING_INST = 7;
		INVALID_UNACCEPTABLE_INVESTOR_ID = 8;
		INVALID_UNACCEPTABLE_INVESTOR_ID_SOURCE = 9;
		INVALID_UNACCEPTABLE_DATE_OF_BIRTH = 10;
		INVALID_UNACCEPTABLE_INVESTOR_COUNTRY_OF_RESIDENCE = 11;
		INVALID_UNACCEPTABLE_NODISTRIBINSTNS = 12;
		INVALID_UNACCEPTABLE_DISTRIB_PERCENTAGE = 13;
		INVALID_UNACCEPTABLE_DISTRIB_PAYMENT_METHOD = 14;
		INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NAME = 15;
		INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_CODE = 16;
		INVALID_UNACCEPTABLE_CASH_DISTRIB_AGENT_ACCT_NUM = 17;
		OTHER = 18;
	}
	required RegistRejReasonCodeEnum value = 1;
}

message RegistTransType {
	enum RegistTransTypeEnum {
		NEW = 0;
		REPLACE = 1;
		CANCEL = 2;
	}
	required RegistTransTypeEnum value = 1;
}

message OwnershipType {
	enum OwnershipTypeEnum {
		JOINT_INVESTORS = 0;
		TENANTS_IN_COMMON = 1;
		JOINT_TRUSTEES = 2;
	}
	required OwnershipTypeEnum value = 1;
}

message ContAmtType {
	enum ContAmtTypeEnum {
		COMMISSION_AMOUNT = 0;
		COMMISSION_PERCENT = 1;
		INITIAL_CHARGE_AMOUNT = 2;
		INITIAL_CHARGE_PERCENT = 3;
		DISCOUNT_AMOUNT = 4;
		DISCOUNT_PERCENT = 5;
		DILUTION_LEVY_AMOUNT = 6;
		DILUTION_LEVY_PERCENT = 7;
		EXIT_CHARGE_AMOUNT = 8;
	}
	required ContAmtTypeEnum value = 1;
}

message OwnerType {
	enum OwnerTypeEnum {
		INDIVIDUAL_INVESTOR = 0;
		PUBLIC_COMPANY = 1;
		PRIVATE_COMPANY = 2;
		INDIVIDUAL_TRUSTEE = 3;
		COMPANY_TRUSTEE = 4;
		PENSION_PLAN = 5;
		CUSTODIAN_UNDER_GIFTS_TO_MINORS_ACT = 6;
		TRUSTS = 7;
		FIDUCIARIES = 8;
	}
	required OwnerTypeEnum value = 1;
}

message OrderCapacity {
	enum OrderCapacityEnum {
		AGENCY = 0;
		PROPRIETARY = 1;
		INDIVIDUAL = 2;
		PRINCIPAL = 3;
		RISKLESS_PRINCIPAL = 4;
		AGENT_FOR_OTHER_MEMBER = 5;
	}
	required OrderCapacityEnum value = 1;
}

message OrderRestrictions {
	enum OrderRestrictionsEnum {
		PROGRAM_TRADE = 0;
		INDEX_ARBITRAGE = 1;
		NON_INDEX_ARBITRAGE = 2;
		COMPETING_MARKET_MAKER = 3;
		ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_SECURITY = 4;
		ACTING_AS_MARKET_MAKER_OR_SPECIALIST_IN_THE_UNDERLYING_SECURITY_OF_A_DERIVATIVE_SECURITY = 5;
		FOREIGN_ENTITY = 6;
		EXTERNAL_MARKET_PARTICIPANT = 7;
		EXTERNAL_INTER_CONNECTED_MARKET_LINKAGE = 8;
		RISKLESS_ARBITRAGE = 9;
	}
	required OrderRestrictionsEnum value = 1;
}

message MassCancelRequestType {
	enum MassCancelRequestTypeEnum {
		CANCEL_ORDERS_FOR_A_SECURITY = 0;
		CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = 1;
		CANCEL_ORDERS_FOR_A_PRODUCT = 2;
		CANCEL_ORDERS_FOR_A_CFICODE = 3;
		CANCEL_ORDERS_FOR_A_SECURITYTYPE = 4;
		CANCEL_ORDERS_FOR_A_TRADING_SESSION = 5;
		CANCEL_ALL_ORDERS = 6;
	}
	required MassCancelRequestTypeEnum value = 1;
}

message MassCancelResponse {
	enum MassCancelResponseEnum {
		CANCEL_REQUEST_REJECTED = 0;
		CANCEL_ORDERS_FOR_A_SECURITY = 1;
		CANCEL_ORDERS_FOR_AN_UNDERLYING_SECURITY = 2;
		CANCEL_ORDERS_FOR_A_PRODUCT = 3;
		CANCEL_ORDERS_FOR_A_CFICODE = 4;
		CANCEL_ORDERS_FOR_A_SECURITYTYPE = 5;
		CANCEL_ORDERS_FOR_A_TRADING_SESSION = 6;
		CANCEL_ALL_ORDERS = 7;
	}
	required MassCancelResponseEnum value = 1;
}

message MassCancelRejectReason {
	enum MassCancelRejectReasonEnum {
		MASS_CANCEL_NOT_SUPPORTED = 0;
		INVALID_OR_UNKNOWN_SECURITY = 1;
		INVALID_OR_UNKNOWN_UNDERLYING = 2;
		INVALID_OR_UNKNOWN_PRODUCT = 3;
		INVALID_OR_UNKNOWN_CFICODE = 4;
		INVALID_OR_UNKNOWN_SECURITY_TYPE = 5;
		INVALID_OR_UNKNOWN_TRADING_SESSION = 6;
	}
	required MassCancelRejectReasonEnum value = 1;
}

message QuoteType {
	enum QuoteTypeEnum {
		INDICATIVE = 0;
		TRADEABLE = 1;
		RESTRICTED_TRADEABLE = 2;
		COUNTER = 3;
	}
	required QuoteTypeEnum value = 1;
}

message CashMargin {
	enum CashMarginEnum {
		CASH = 0;
		MARGIN_OPEN = 1;
		MARGIN_CLOSE = 2;
	}
	required CashMarginEnum value = 1;
}

message Scope {
	enum ScopeEnum {
		LOCAL = 0;
		NATIONAL = 1;
		GLOBAL = 2;
	}
	required ScopeEnum value = 1;
}

message CrossType {
	enum CrossTypeEnum {
		CROSS_TRADE_WHICH_IS_EXECUTED_COMPLETELY_OR_NOT = 0;
		CROSS_TRADE_WHICH_IS_EXECUTED_PARTIALLY_AND_THE_REST_IS_CANCELLED = 1;
		CROSS_TRADE_WHICH_IS_PARTIALLY_EXECUTED_WITH_THE_UNFILLED_PORTIONS_REMAINING_ACTIVE = 2;
		CROSS_TRADE_IS_EXECUTED_WITH_EXISTING_ORDERS_WITH_THE_SAME_PRICE = 3;
	}
	required CrossTypeEnum value = 1;
}

message CrossPrioritization {
	enum CrossPrioritizationEnum {
		NONE = 0;
		BUY_SIDE_IS_PRIORITIZED = 1;
		SELL_SIDE_IS_PRIORITIZED = 2;
	}
	required CrossPrioritizationEnum value = 1;
}

message NoSides {
	enum NoSidesEnum {
		ONE_SIDE = 0;
		BOTH_SIDES = 1;
	}
	required NoSidesEnum value = 1;
}

message SecurityListRequestType {
	enum SecurityListRequestTypeEnum {
		SYMBOL = 0;
		SECURITYTYPE_AND_OR_CFICODE = 1;
		PRODUCT = 2;
		TRADINGSESSIONID = 3;
		ALL_SECURITIES = 4;
	}
	required SecurityListRequestTypeEnum value = 1;
}

message SecurityRequestResult {
	enum SecurityRequestResultEnum {
		VALID_REQUEST = 0;
		INVALID_OR_UNSUPPORTED_REQUEST = 1;
		NO_INSTRUMENTS_FOUND_THAT_MATCH_SELECTION_CRITERIA = 2;
		NOT_AUTHORIZED_TO_RETRIEVE_INSTRUMENT_DATA = 3;
		INSTRUMENT_DATA_TEMPORARILY_UNAVAILABLE = 4;
		REQUEST_FOR_INSTRUMENT_DATA_NOT_SUPPORTED = 5;
	}
	required SecurityRequestResultEnum value = 1;
}

message MultiLegRptTypeReq {
	enum MultiLegRptTypeReqEnum {
		REPORT_BY_MULITLEG_SECURITY_ONLY = 0;
		REPORT_BY_MULTILEG_SECURITY_AND_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY = 1;
		REPORT_BY_INSTRUMENT_LEGS_BELONGING_TO_THE_MULTILEG_SECURITY_ONLY = 2;
	}
	required MultiLegRptTypeReqEnum value = 1;
}

message TradSesStatusRejReason {
	enum TradSesStatusRejReasonEnum {
		UNKNOWN_OR_INVALID_TRADINGSESSIONID = 0;
	}
	required TradSesStatusRejReasonEnum value = 1;
}

message TradeRequestType {
	enum TradeRequestTypeEnum {
		ALL_TRADES = 0;
		MATCHED_TRADES_MATCHING_CRITERIA_PROVIDED_ON_REQUEST = 1;
		UNMATCHED_TRADES_THAT_MATCH_CRITERIA = 2;
		UNREPORTED_TRADES_THAT_MATCH_CRITERIA = 3;
		ADVISORIES_THAT_MATCH_CRITERIA = 4;
	}
	required TradeRequestTypeEnum value = 1;
}

message MatchStatus {
	enum MatchStatusEnum {
		COMPARED_MATCHED_OR_AFFIRMED = 0;
		UNCOMPARED_UNMATCHED_OR_UNAFFIRMED = 1;
		ADVISORY_OR_ALERT = 2;
	}
	required MatchStatusEnum value = 1;
}

message ClearingInstruction {
	enum ClearingInstructionEnum {
		PROCESS_NORMALLY = 0;
		EXCLUDE_FROM_ALL_NETTING = 1;
		BILATERAL_NETTING_ONLY = 2;
		EX_CLEARING = 3;
		SPECIAL_TRADE = 4;
		MULTILATERAL_NETTING = 5;
		CLEAR_AGAINST_CENTRAL_COUNTERPARTY = 6;
		EXCLUDE_FROM_CENTRAL_COUNTERPARTY = 7;
		MANUAL_MODE = 8;
		AUTOMATIC_POSTING_MODE = 9;
	}
	required ClearingInstructionEnum value = 1;
}

message AccountType {
	enum AccountTypeEnum {
		ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS = 0;
		ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS = 1;
		HOUSE_TRADER = 2;
		FLOOR_TRADER = 3;
		ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED = 4;
		ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED = 5;
		JOINT_BACKOFFICE_ACCOUNT = 6;
	}
	required AccountTypeEnum value = 1;
}

message CustOrderCapacity {
	enum CustOrderCapacityEnum {
		MEMBER_TRADING_FOR_THEIR_OWN_ACCOUNT = 0;
		CLEARING_FIRM_TRADING_FOR_ITS_PROPRIETARY_ACCOUNT = 1;
		MEMBER_TRADING_FOR_ANOTHER_MEMBER = 2;
		ALL_OTHER = 3;
	}
	required CustOrderCapacityEnum value = 1;
}

message MassStatusReqType {
	enum MassStatusReqTypeEnum {
		STATUS_FOR_ORDERS_FOR_A_SECURITY = 0;
		STATUS_FOR_ORDERS_FOR_AN_UNDERLYING_SECURITY = 1;
		STATUS_FOR_ORDERS_FOR_A_PRODUCT = 2;
		STATUS_FOR_ORDERS_FOR_A_CFICODE = 3;
		STATUS_FOR_ORDERS_FOR_A_SECURITYTYPE = 4;
		STATUS_FOR_ORDERS_FOR_A_TRADING_SESSION = 5;
		STATUS_FOR_ALL_ORDERS = 6;
		STATUS_FOR_ORDERS_FOR_A_PARTYID = 7;
	}
	required MassStatusReqTypeEnum value = 1;
}

message DayBookingInst {
	enum DayBookingInstEnum {
		CAN_TRIGGER_BOOKING_WITHOUT_REFERENCE_TO_THE_ORDER_INITIATOR = 0;
		SPEAK_WITH_ORDER_INITIATOR_BEFORE_BOOKING = 1;
		ACCUMULATE = 2;
	}
	required DayBookingInstEnum value = 1;
}

message BookingUnit {
	enum BookingUnitEnum {
		EACH_PARTIAL_EXECUTION_IS_A_BOOKABLE_UNIT = 0;
		AGGREGATE_PARTIAL_EXECUTIONS_ON_THIS_ORDER_AND_BOOK_ONE_TRADE_PER_ORDER = 1;
		AGGREGATE_EXECUTIONS_FOR_THIS_SYMBOL_SIDE_AND_SETTLEMENT_DATE = 2;
	}
	required BookingUnitEnum value = 1;
}

message PreallocMethod {
	enum PreallocMethodEnum {
		PRO_RATA = 0;
		DO_NOT_PRO_RATA = 1;
	}
	required PreallocMethodEnum value = 1;
}

message AllocType {
	enum AllocTypeEnum {
		CALCULATED = 0;
		PRELIMINARY = 1;
		READY_TO_BOOK_SINGLE_ORDER = 2;
		WAREHOUSE_INSTRUCTION = 3;
		REQUEST_TO_INTERMEDIARY = 4;
	}
	required AllocTypeEnum value = 1;
}

message ClearingFeeIndicator {
	enum ClearingFeeIndicatorEnum {
		CBOE_MEMBER = 0;
		NON_MEMBER_AND_CUSTOMER = 1;
		EQUITY_MEMBER_AND_CLEARING_MEMBER = 2;
		FULL_AND_ASSOCIATE_MEMBER_TRADING_FOR_OWN_ACCOUNT_AND_AS_FLOOR_BROKERS = 3;
		FIRMS_106H_AND_106J = 4;
		GIM_IDEM_AND_COM_MEMBERSHIP_INTEREST_HOLDERS = 5;
		LESSEE_AND_106F_EMPLOYEES = 6;
		ALL_OTHER_OWNERSHIP_TYPES = 7;
	}
	required ClearingFeeIndicatorEnum value = 1;
}

message PriorityIndicator {
	enum PriorityIndicatorEnum {
		PRIORITY_UNCHANGED = 0;
		LOST_PRIORITY_AS_RESULT_OF_ORDER_CHANGE = 1;
	}
	required PriorityIndicatorEnum value = 1;
}

message QuoteRequestRejectReason {
	enum QuoteRequestRejectReasonEnum {
		UNKNOWN_SYMBOL = 0;
		EXCHANGE_CLOSED = 1;
		QUOTE_REQUEST_EXCEEDS_LIMIT = 2;
		TOO_LATE_TO_ENTER = 3;
		INVALID_PRICE = 4;
		NOT_AUTHORIZED_TO_REQUEST_QUOTE = 5;
		NO_MATCH_FOR_INQUIRY = 6;
		NO_MARKET_FOR_INSTRUMENT = 7;
		NO_INVENTORY = 8;
		PASS = 9;
		OTHER = 10;
	}
	required QuoteRequestRejectReasonEnum value = 1;
}

message AcctIDSource {
	enum AcctIDSourceEnum {
		BIC = 0;
		SID_CODE = 1;
		TFM = 2;
		OMGEO = 3;
		DTCC_CODE = 4;
	}
	required AcctIDSourceEnum value = 1;
}

message ConfirmStatus {
	enum ConfirmStatusEnum {
		RECEIVED = 0;
		MISMATCHED_ACCOUNT = 1;
		MISSING_SETTLEMENT_INSTRUCTIONS = 2;
		CONFIRMED = 3;
		REQUEST_REJECTED = 4;
	}
	required ConfirmStatusEnum value = 1;
}

message ConfirmTransType {
	enum ConfirmTransTypeEnum {
		NEW = 0;
		REPLACE = 1;
		CANCEL = 2;
	}
	required ConfirmTransTypeEnum value = 1;
}

message DeliveryForm {
	enum DeliveryFormEnum {
		BOOKENTRY = 0;
		BEARER = 1;
	}
	required DeliveryFormEnum value = 1;
}

message LegSwapType {
	enum LegSwapTypeEnum {
		PAR_FOR_PAR = 0;
		MODIFIED_DURATION = 1;
		RISK = 2;
		PROCEEDS = 3;
	}
	required LegSwapTypeEnum value = 1;
}

message QuotePriceType {
	enum QuotePriceTypeEnum {
		PERCENT = 0;
		PER_SHARE = 1;
		FIXED_AMOUNT = 2;
		DISCOUNT = 3;
		PREMIUM = 4;
		BASIS_POINTS_RELATIVE_TO_BENCHMARK = 5;
		TED_PRICE = 6;
		TED_YIELD = 7;
		YIELD_SPREAD = 8;
	}
	required QuotePriceTypeEnum value = 1;
}

message QuoteRespType {
	enum QuoteRespTypeEnum {
		HIT_LIFT = 0;
		COUNTER = 1;
		EXPIRED = 2;
		COVER = 3;
		DONE_AWAY = 4;
		PASS = 5;
	}
	required QuoteRespTypeEnum value = 1;
}

message PosType {
	enum PosTypeEnum {
		TRANSACTION_QUANTITY = 0;
		INTRA_SPREAD_QTY = 1;
		INTER_SPREAD_QTY = 2;
		END_OF_DAY_QTY = 3;
		START_OF_DAY_QTY = 4;
		OPTION_EXERCISE_QTY = 5;
		OPTION_ASSIGNMENT = 6;
		TRANSACTION_FROM_EXERCISE = 7;
		TRANSACTION_FROM_ASSIGNMENT = 8;
		PIT_TRADE_QTY = 9;
		TRANSFER_TRADE_QTY = 10;
		ELECTRONIC_TRADE_QTY = 11;
		ALLOCATION_TRADE_QTY = 12;
		ADJUSTMENT_QTY = 13;
		AS_OF_TRADE_QTY = 14;
		DELIVERY_QTY = 15;
		TOTAL_TRANSACTION_QTY = 16;
		CROSS_MARGIN_QTY = 17;
		INTEGRAL_SPLIT = 18;
	}
	required PosTypeEnum value = 1;
}

message PosQtyStatus {
	enum PosQtyStatusEnum {
		SUBMITTED = 0;
		ACCEPTED = 1;
		REJECTED = 2;
	}
	required PosQtyStatusEnum value = 1;
}

message PosAmtType {
	enum PosAmtTypeEnum {
		FINAL_MARK_TO_MARKET_AMOUNT = 0;
		INCREMENTAL_MARK_TO_MARKET_AMOUNT = 1;
		TRADE_VARIATION_AMOUNT = 2;
		START_OF_DAY_MARK_TO_MARKET_AMOUNT = 3;
		PREMIUM_AMOUNT = 4;
		CASH_RESIDUAL_AMOUNT = 5;
		CASH_AMOUNT = 6;
		VALUE_ADJUSTED_AMOUNT = 7;
	}
	required PosAmtTypeEnum value = 1;
}

message PosTransType {
	enum PosTransTypeEnum {
		EXERCISE = 0;
		DO_NOT_EXERCISE = 1;
		POSITION_ADJUSTMENT = 2;
		POSITION_CHANGE_SUBMISSION_MARGIN_DISPOSITION = 3;
		PLEDGE = 4;
	}
	required PosTransTypeEnum value = 1;
}

message PosMaintAction {
	enum PosMaintActionEnum {
		NEW = 0;
		REPLACE = 1;
		CANCEL = 2;
	}
	required PosMaintActionEnum value = 1;
}

message AdjustmentType {
	enum AdjustmentTypeEnum {
		PROCESS_REQUEST_AS_MARGIN_DISPOSITION = 0;
		DELTA_PLUS = 1;
		DELTA_MINUS = 2;
		FINAL = 3;
	}
	required AdjustmentTypeEnum value = 1;
}

message PosMaintStatus {
	enum PosMaintStatusEnum {
		ACCEPTED = 0;
		ACCEPTED_WITH_WARNINGS = 1;
		REJECTED = 2;
		COMPLETED = 3;
		COMPLETED_WITH_WARNINGS = 4;
	}
	required PosMaintStatusEnum value = 1;
}

message PosMaintResult {
	enum PosMaintResultEnum {
		SUCCESSFUL_COMPLETION_NO_WARNINGS_OR_ERRORS = 0;
		REJECTED = 1;
	}
	required PosMaintResultEnum value = 1;
}

message PosReqType {
	enum PosReqTypeEnum {
		POSITIONS = 0;
		TRADES = 1;
		EXERCISES = 2;
		ASSIGNMENTS = 3;
	}
	required PosReqTypeEnum value = 1;
}

message ResponseTransportType {
	enum ResponseTransportTypeEnum {
		INBAND = 0;
		OUT_OF_BAND = 1;
	}
	required ResponseTransportTypeEnum value = 1;
}

message PosReqResult {
	enum PosReqResultEnum {
		VALID_REQUEST = 0;
		INVALID_OR_UNSUPPORTED_REQUEST = 1;
		NO_POSITIONS_FOUND_THAT_MATCH_CRITERIA = 2;
		NOT_AUTHORIZED_TO_REQUEST_POSITIONS = 3;
		REQUEST_FOR_POSITION_NOT_SUPPORTED = 4;
		OTHER = 5;
	}
	required PosReqResultEnum value = 1;
}

message PosReqStatus {
	enum PosReqStatusEnum {
		COMPLETED = 0;
		COMPLETED_WITH_WARNINGS = 1;
		REJECTED = 2;
	}
	required PosReqStatusEnum value = 1;
}

message SettlPriceType {
	enum SettlPriceTypeEnum {
		FINAL = 0;
		THEORETICAL = 1;
	}
	required SettlPriceTypeEnum value = 1;
}

message AssignmentMethod {
	enum AssignmentMethodEnum {
		RANDOM = 0;
		PRORATA = 1;
	}
	required AssignmentMethodEnum value = 1;
}

message ExerciseMethod {
	enum ExerciseMethodEnum {
		AUTOMATIC = 0;
		MANUAL = 1;
	}
	required ExerciseMethodEnum value = 1;
}

message TradeRequestResult {
	enum TradeRequestResultEnum {
		SUCCESSFUL = 0;
		INVALID_OR_UNKNOWN_INSTRUMENT = 1;
		INVALID_TYPE_OF_TRADE_REQUESTED = 2;
		INVALID_PARTIES = 3;
		INVALID_TRANSPORT_TYPE_REQUESTED = 4;
		INVALID_DESTINATION_REQUESTED = 5;
		TRADEREQUESTTYPE_NOT_SUPPORTED = 6;
		UNAUTHORIZED_FOR_TRADE_CAPTURE_REPORT_REQUEST = 7;
	}
	required TradeRequestResultEnum value = 1;
}

message TradeRequestStatus {
	enum TradeRequestStatusEnum {
		ACCEPTED = 0;
		COMPLETED = 1;
		REJECTED = 2;
	}
	required TradeRequestStatusEnum value = 1;
}

message TradeReportRejectReason {
	enum TradeReportRejectReasonEnum {
		SUCCESSFUL = 0;
		INVALID_PARTY_INFORMATION = 1;
		UNKNOWN_INSTRUMENT = 2;
		UNAUTHORIZED_TO_REPORT_TRADES = 3;
		INVALID_TRADE_TYPE = 4;
	}
	required TradeReportRejectReasonEnum value = 1;
}

message SideMultiLegReportingType {
	enum SideMultiLegReportingTypeEnum {
		SINGLE_SECURITY = 0;
		INDIVIDUAL_LEG_OF_A_MULTI_LEG_SECURITY = 1;
		MULTI_LEG_SECURITY = 2;
	}
	required SideMultiLegReportingTypeEnum value = 1;
}

message BenchmarkSecurityIDSource {
	enum BenchmarkSecurityIDSourceEnum {
		CUSIP = 0;
		SEDOL = 1;
		QUIK = 2;
		ISIN_NUMBER = 3;
		RIC_CODE = 4;
		ISO_CURRENCY_CODE = 5;
		ISO_COUNTRY_CODE = 6;
		EXCHANGE_SYMBOL = 7;
		CONSOLIDATED_TAPE_ASSOCIATION = 8;
		BLOOMBERG_SYMBOL = 9;
		WERTPAPIER = 10;
		DUTCH = 11;
		VALOREN = 12;
		SICOVAM = 13;
		BELGIAN = 14;
		COMMON = 15;
		CLEARING_HOUSE_CLEARING_ORGANIZATION = 16;
		ISDA_FPML_PRODUCT_SPECIFICATION = 17;
		OPTIONS_PRICE_REPORTING_AUTHORITY = 18;
	}
	required BenchmarkSecurityIDSourceEnum value = 1;
}

message TrdRegTimestampType {
	enum TrdRegTimestampTypeEnum {
		EXECUTION_TIME = 0;
		TIME_IN = 1;
		TIME_OUT = 2;
		BROKER_RECEIPT = 3;
		BROKER_EXECUTION = 4;
	}
	required TrdRegTimestampTypeEnum value = 1;
}

message ConfirmType {
	enum ConfirmTypeEnum {
		STATUS = 0;
		CONFIRMATION = 1;
		CONFIRMATION_REQUEST_REJECTED = 2;
	}
	required ConfirmTypeEnum value = 1;
}

message ConfirmRejReason {
	enum ConfirmRejReasonEnum {
		MISMATCHED_ACCOUNT = 0;
		MISSING_SETTLEMENT_INSTRUCTIONS = 1;
	}
	required ConfirmRejReasonEnum value = 1;
}

message BookingType {
	enum BookingTypeEnum {
		REGULAR_BOOKING = 0;
		CFD = 1;
		TOTAL_RETURN_SWAP = 2;
	}
	required BookingTypeEnum value = 1;
}

message AllocSettlInstType {
	enum AllocSettlInstTypeEnum {
		USE_DEFAULT_INSTRUCTIONS = 0;
		DERIVE_FROM_PARAMETERS_PROVIDED = 1;
		FULL_DETAILS_PROVIDED = 2;
		SSI_DB_IDS_PROVIDED = 3;
		PHONE_FOR_INSTRUCTIONS = 4;
	}
	required AllocSettlInstTypeEnum value = 1;
}

message DlvyInstType {
	enum DlvyInstTypeEnum {
		SECURITIES = 0;
		CASH = 1;
	}
	required DlvyInstTypeEnum value = 1;
}

message TerminationType {
	enum TerminationTypeEnum {
		OVERNIGHT = 0;
		TERM = 1;
		FLEXIBLE = 2;
		OPEN = 3;
	}
	required TerminationTypeEnum value = 1;
}

message SettlInstReqRejCode {
	enum SettlInstReqRejCodeEnum {
		UNABLE_TO_PROCESS_REQUEST = 0;
		UNKNOWN_ACCOUNT = 1;
		NO_MATCHING_SETTLEMENT_INSTRUCTIONS_FOUND = 2;
	}
	required SettlInstReqRejCodeEnum value = 1;
}

message AllocReportType {
	enum AllocReportTypeEnum {
		SELLSIDE_CALCULATED_USING_PRELIMINARY = 0;
		SELLSIDE_CALCULATED_WITHOUT_PRELIMINARY = 1;
		WAREHOUSE_RECAP = 2;
		REQUEST_TO_INTERMEDIARY = 3;
	}
	required AllocReportTypeEnum value = 1;
}

message AllocCancReplaceReason {
	enum AllocCancReplaceReasonEnum {
		ORIGINAL_DETAILS_INCOMPLETE_INCORRECT = 0;
		CHANGE_IN_UNDERLYING_ORDER_DETAILS = 1;
	}
	required AllocCancReplaceReasonEnum value = 1;
}

message AllocAccountType {
	enum AllocAccountTypeEnum {
		ACCOUNT_IS_CARRIED_ON_CUSTOMER_SIDE_OF_BOOKS = 0;
		ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS = 1;
		HOUSE_TRADER = 2;
		FLOOR_TRADER = 3;
		ACCOUNT_IS_CARRIED_ON_NON_CUSTOMER_SIDE_OF_BOOKS_AND_IS_CROSS_MARGINED = 4;
		ACCOUNT_IS_HOUSE_TRADER_AND_IS_CROSS_MARGINED = 5;
		JOINT_BACKOFFICE_ACCOUNT = 6;
	}
	required AllocAccountTypeEnum value = 1;
}

message AllocIntermedReqType {
	enum AllocIntermedReqTypeEnum {
		PENDING_ACCEPT = 0;
		PENDING_RELEASE = 1;
		PENDING_REVERSAL = 2;
		ACCEPT = 3;
		BLOCK_LEVEL_REJECT = 4;
		ACCOUNT_LEVEL_REJECT = 5;
	}
	required AllocIntermedReqTypeEnum value = 1;
}

message ApplQueueResolution {
	enum ApplQueueResolutionEnum {
		NO_ACTION_TAKEN = 0;
		QUEUE_FLUSHED = 1;
		OVERLAY_LAST = 2;
		END_SESSION = 3;
	}
	required ApplQueueResolutionEnum value = 1;
}

message ApplQueueAction {
	enum ApplQueueActionEnum {
		NO_ACTION_TAKEN = 0;
		QUEUE_FLUSHED = 1;
		OVERLAY_LAST = 2;
		END_SESSION = 3;
	}
	required ApplQueueActionEnum value = 1;
}

message AvgPxIndicator {
	enum AvgPxIndicatorEnum {
		NO_AVERAGE_PRICING = 0;
		TRADE_IS_PART_OF_AN_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID = 1;
		LAST_TRADE_IN_THE_AVERAGE_PRICE_GROUP_IDENTIFIED_BY_THE_TRADELINKID = 2;
	}
	required AvgPxIndicatorEnum value = 1;
}

message TradeAllocIndicator {
	enum TradeAllocIndicatorEnum {
		ALLOCATION_NOT_REQUIRED = 0;
		ALLOCATION_REQUIRED = 1;
		USE_ALLOCATION_PROVIDED_WITH_THE_TRADE = 2;
	}
	required TradeAllocIndicatorEnum value = 1;
}

message ExpirationCycle {
	enum ExpirationCycleEnum {
		EXPIRE_ON_TRADING_SESSION_CLOSE = 0;
		EXPIRE_ON_TRADING_SESSION_OPEN = 1;
	}
	required ExpirationCycleEnum value = 1;
}

message TrdType {
	enum TrdTypeEnum {
		REGULAR_TRADE = 0;
		BLOCK_TRADE = 1;
		EFP = 2;
		TRANSFER = 3;
		LATE_TRADE = 4;
		T_TRADE = 5;
		WEIGHTED_AVERAGE_PRICE_TRADE = 6;
		BUNCHED_TRADE = 7;
		LATE_BUNCHED_TRADE = 8;
		PRIOR_REFERENCE_PRICE_TRADE = 9;
	}
	required TrdTypeEnum value = 1;
}

message PegMoveType {
	enum PegMoveTypeEnum {
		FLOATING = 0;
		FIXED = 1;
	}
	required PegMoveTypeEnum value = 1;
}

message PegOffsetType {
	enum PegOffsetTypeEnum {
		PRICE = 0;
		BASIS_POINTS = 1;
		TICKS = 2;
		PRICE_TIER_LEVEL = 3;
	}
	required PegOffsetTypeEnum value = 1;
}

message PegLimitType {
	enum PegLimitTypeEnum {
		OR_BETTER = 0;
		STRICT = 1;
		OR_WORSE = 2;
	}
	required PegLimitTypeEnum value = 1;
}

message PegRoundDirection {
	enum PegRoundDirectionEnum {
		MORE_AGGRESSIVE = 0;
		MORE_PASSIVE = 1;
	}
	required PegRoundDirectionEnum value = 1;
}

message PegScope {
	enum PegScopeEnum {
		LOCAL = 0;
		NATIONAL = 1;
		GLOBAL = 2;
		NATIONAL_EXCLUDING_LOCAL = 3;
	}
	required PegScopeEnum value = 1;
}

message DiscretionMoveType {
	enum DiscretionMoveTypeEnum {
		FLOATING = 0;
		FIXED = 1;
	}
	required DiscretionMoveTypeEnum value = 1;
}

message DiscretionOffsetType {
	enum DiscretionOffsetTypeEnum {
		PRICE = 0;
		BASIS_POINTS = 1;
		TICKS = 2;
		PRICE_TIER_LEVEL = 3;
	}
	required DiscretionOffsetTypeEnum value = 1;
}

message DiscretionLimitType {
	enum DiscretionLimitTypeEnum {
		OR_BETTER = 0;
		STRICT = 1;
		OR_WORSE = 2;
	}
	required DiscretionLimitTypeEnum value = 1;
}

message DiscretionRoundDirection {
	enum DiscretionRoundDirectionEnum {
		MORE_AGGRESSIVE = 0;
		MORE_PASSIVE = 1;
	}
	required DiscretionRoundDirectionEnum value = 1;
}

message DiscretionScope {
	enum DiscretionScopeEnum {
		LOCAL = 0;
		NATIONAL = 1;
		GLOBAL = 2;
		NATIONAL_EXCLUDING_LOCAL = 3;
	}
	required DiscretionScopeEnum value = 1;
}

message LastLiquidityInd {
	enum LastLiquidityIndEnum {
		ADDED_LIQUIDITY = 0;
		REMOVED_LIQUIDITY = 1;
		LIQUIDITY_ROUTED_OUT = 2;
	}
	required LastLiquidityIndEnum value = 1;
}

message ShortSaleReason {
	enum ShortSaleReasonEnum {
		DEALER_SOLD_SHORT = 0;
		DEALER_SOLD_SHORT_EXEMPT = 1;
		SELLING_CUSTOMER_SOLD_SHORT = 2;
		SELLING_CUSTOMER_SOLD_SHORT_EXEMPT = 3;
		QUALIFED_SERVICE_REPRESENTATIVE_OR_AUTOMATIC_GIVEUP_CONTRA_SIDE_SOLD_SHORT = 4;
		QSR_OR_AGU_CONTRA_SIDE_SOLD_SHORT_EXEMPT = 5;
	}
	required ShortSaleReasonEnum value = 1;
}

message QtyType {
	enum QtyTypeEnum {
		UNITS = 0;
		CONTRACTS = 1;
	}
	required QtyTypeEnum value = 1;
}

message TradeReportType {
	enum TradeReportTypeEnum {
		SUBMIT = 0;
		ALLEGED = 1;
		ACCEPT = 2;
		DECLINE = 3;
		ADDENDUM = 4;
		NO_WAS = 5;
		TRADE_REPORT_CANCEL = 6;
		LOCKED_IN_TRADE_BREAK = 7;
	}
	required TradeReportTypeEnum value = 1;
}

message AllocNoOrdersType {
	enum AllocNoOrdersTypeEnum {
		NOT_SPECIFIED = 0;
		EXPLICIT_LIST_PROVIDED = 1;
	}
	required AllocNoOrdersTypeEnum value = 1;
}

message EventType {
	enum EventTypeEnum {
		PUT = 0;
		CALL = 1;
		TENDER = 2;
		SINKING_FUND_CALL = 3;
	}
	required EventTypeEnum value = 1;
}

message InstrAttribType {
	enum InstrAttribTypeEnum {
		FLAT = 0;
		ZERO_COUPON = 1;
		INTEREST_BEARING = 2;
		NO_PERIODIC_PAYMENTS = 3;
		VARIABLE_RATE = 4;
		LESS_FEE_FOR_PUT = 5;
		STEPPED_COUPON = 6;
		COUPON_PERIOD = 7;
		WHEN_AND_IF_ISSUED = 8;
	}
	required InstrAttribTypeEnum value = 1;
}

message MiscFeeBasis {
	enum MiscFeeBasisEnum {
		ABSOLUTE = 0;
		PER_UNIT = 1;
		PERCENTAGE = 2;
	}
	required MiscFeeBasisEnum value = 1;
}

message CollAsgnReason {
	enum CollAsgnReasonEnum {
		INITIAL = 0;
		SCHEDULED = 1;
		TIME_WARNING = 2;
		MARGIN_DEFICIENCY = 3;
		MARGIN_EXCESS = 4;
		FORWARD_COLLATERAL_DEMAND = 5;
		EVENT_OF_DEFAULT = 6;
		ADVERSE_TAX_EVENT = 7;
	}
	required CollAsgnReasonEnum value = 1;
}

message CollInquiryQualifier {
	enum CollInquiryQualifierEnum {
		TRADEDATE = 0;
		GC_INSTRUMENT = 1;
		COLLATERALINSTRUMENT = 2;
		SUBSTITUTION_ELIGIBLE = 3;
		NOT_ASSIGNED = 4;
		PARTIALLY_ASSIGNED = 5;
		FULLY_ASSIGNED = 6;
		OUTSTANDING_TRADES = 7;
	}
	required CollInquiryQualifierEnum value = 1;
}

message CollAsgnTransType {
	enum CollAsgnTransTypeEnum {
		NEW = 0;
		REPLACE = 1;
		CANCEL = 2;
		RELEASE = 3;
		REVERSE = 4;
	}
	required CollAsgnTransTypeEnum value = 1;
}

message CollAsgnRespType {
	enum CollAsgnRespTypeEnum {
		RECEIVED = 0;
		ACCEPTED = 1;
		DECLINED = 2;
		REJECTED = 3;
	}
	required CollAsgnRespTypeEnum value = 1;
}

message CollAsgnRejectReason {
	enum CollAsgnRejectReasonEnum {
		UNKNOWN_DEAL = 0;
		UNKNOWN_OR_INVALID_INSTRUMENT = 1;
		UNAUTHORIZED_TRANSACTION = 2;
		INSUFFICIENT_COLLATERAL = 3;
		INVALID_TYPE_OF_COLLATERAL = 4;
		EXCESSIVE_SUBSTITUTION = 5;
	}
	required CollAsgnRejectReasonEnum value = 1;
}

message CollStatus {
	enum CollStatusEnum {
		UNASSIGNED = 0;
		PARTIALLY_ASSIGNED = 1;
		ASSIGNMENT_PROPOSED = 2;
		ASSIGNED = 3;
		CHALLENGED = 4;
	}
	required CollStatusEnum value = 1;
}

message DeliveryType {
	enum DeliveryTypeEnum {
		VERSUS_PAYMENT = 0;
		FREE = 1;
		TRI_PARTY = 2;
		HOLD_IN_CUSTODY = 3;
	}
	required DeliveryTypeEnum value = 1;
}

message UserRequestType {
	enum UserRequestTypeEnum {
		LOGONUSER = 0;
		LOGOFFUSER = 1;
		CHANGEPASSWORDFORUSER = 2;
		REQUEST_INDIVIDUAL_USER_STATUS = 3;
	}
	required UserRequestTypeEnum value = 1;
}

message UserStatus {
	enum UserStatusEnum {
		LOGGED_IN = 0;
		NOT_LOGGED_IN = 1;
		USER_NOT_RECOGNISED = 2;
		PASSWORD_INCORRECT = 3;
		PASSWORD_CHANGED = 4;
		OTHER = 5;
	}
	required UserStatusEnum value = 1;
}

message StatusValue {
	enum StatusValueEnum {
		CONNECTED = 0;
		NOT_CONNECTED_DOWN_EXPECTED_UP = 1;
		NOT_CONNECTED_DOWN_EXPECTED_DOWN = 2;
		IN_PROCESS = 3;
	}
	required StatusValueEnum value = 1;
}

message NetworkRequestType {
	enum NetworkRequestTypeEnum {
		SNAPSHOT = 0;
		SUBSCRIBE = 1;
		STOP_SUBSCRIBING = 2;
		LEVEL_OF_DETAIL = 3;
	}
	required NetworkRequestTypeEnum value = 1;
}

message NetworkStatusResponseType {
	enum NetworkStatusResponseTypeEnum {
		FULL = 0;
		INCREMENTAL_UPDATE = 1;
	}
	required NetworkStatusResponseTypeEnum value = 1;
}

message TrdRptStatus {
	enum TrdRptStatusEnum {
		ACCEPTED = 0;
		REJECTED = 1;
	}
	required TrdRptStatusEnum value = 1;
}

message AffirmStatus {
	enum AffirmStatusEnum {
		RECEIVED = 0;
		CONFIRM_REJECTED = 1;
		AFFIRMED = 2;
	}
	required AffirmStatusEnum value = 1;
}

message CollAction {
	enum CollActionEnum {
		RETAIN = 0;
		ADD = 1;
		REMOVE = 2;
	}
	required CollActionEnum value = 1;
}

message CollInquiryStatus {
	enum CollInquiryStatusEnum {
		ACCEPTED = 0;
		ACCEPTED_WITH_WARNINGS = 1;
		COMPLETED = 2;
		COMPLETED_WITH_WARNINGS = 3;
		REJECTED = 4;
	}
	required CollInquiryStatusEnum value = 1;
}

message CollInquiryResult {
	enum CollInquiryResultEnum {
		SUCCESSFUL = 0;
		INVALID_OR_UNKNOWN_INSTRUMENT = 1;
		INVALID_OR_UNKNOWN_COLLATERAL_TYPE = 2;
		INVALID_PARTIES = 3;
		INVALID_TRANSPORT_TYPE_REQUESTED = 4;
		INVALID_DESTINATION_REQUESTED = 5;
		NO_COLLATERAL_FOUND_FOR_THE_TRADE_SPECIFIED = 6;
		NO_COLLATERAL_FOUND_FOR_THE_ORDER_SPECIFIED = 7;
		COLLATERAL_INQUIRY_TYPE_NOT_SUPPORTED = 8;
		UNAUTHORIZED_FOR_COLLATERAL_INQUIRY = 9;
		OTHER = 10;
	}
	required CollInquiryResultEnum value = 1;
}

message InstrumentComponent {
	required string Symbol = 1;
	optional string SymbolSfx = 2;
	optional string SecurityID = 3;
	optional string SecurityIDSource = 4;
	optional int64 Product = 5;
	optional string CFICode = 6;
	optional string SecurityType = 7;
	optional string SecuritySubType = 8;
	optional string MaturityMonthYear = 9;
	optional string MaturityDate = 10;
	optional string CouponPaymentDate = 11;
	optional string IssueDate = 12;
	optional int64 RepoCollateralSecurityType = 13;
	optional int64 RepurchaseTerm = 14;
	optional float RepurchaseRate = 15;
	optional float Factor = 16;
	optional string CreditRating = 17;
	optional string InstrRegistry = 18;
	optional string CountryOfIssue = 19;
	optional string StateOrProvinceOfIssue = 20;
	optional string LocaleOfIssue = 21;
	optional string RedemptionDate = 22;
	optional float StrikePrice = 23;
	optional string StrikeCurrency = 24;
	optional string OptAttribute = 25;
	optional float ContractMultiplier = 26;
	optional float CouponRate = 27;
	optional string SecurityExchange = 28;
	optional string Issuer = 29;
	optional uint32 EncodedIssuerLen = 30;
	optional bytes EncodedIssuer = 31;
	optional string SecurityDesc = 32;
	optional uint32 EncodedSecurityDescLen = 33;
	optional bytes EncodedSecurityDesc = 34;
	optional string Pool = 35;
	optional string ContractSettlMonth = 36;
	optional int64 CPProgram = 37;
	optional string CPRegType = 38;
	optional string DatedDate = 39;
	optional string InterestAccrualDate = 40;
	optional uint32 NoSecurityAltID = 41;
	message SecurityAltIDGroup {
		optional string SecurityAltID = 1;
		optional string SecurityAltIDSource = 2;
	}
	repeated SecurityAltIDGroup SecurityAltID = 42;
	optional uint32 NoEvents = 43;
	message EventsGroup {
		optional int64 EventType = 1;
		optional string EventDate = 2;
		optional float EventPx = 3;
		optional string EventText = 4;
	}
	repeated EventsGroup Events = 44;
}

message UnderlyingInstrumentComponent {
	required string UnderlyingSymbol = 1;
	optional string UnderlyingSymbolSfx = 2;
	optional string UnderlyingSecurityID = 3;
	optional string UnderlyingSecurityIDSource = 4;
	optional int64 UnderlyingProduct = 5;
	optional string UnderlyingCFICode = 6;
	optional string UnderlyingSecurityType = 7;
	optional string UnderlyingSecuritySubType = 8;
	optional string UnderlyingMaturityMonthYear = 9;
	optional string UnderlyingMaturityDate = 10;
	optional string UnderlyingCouponPaymentDate = 11;
	optional string UnderlyingIssueDate = 12;
	optional int64 UnderlyingRepoCollateralSecurityType = 13;
	optional int64 UnderlyingRepurchaseTerm = 14;
	optional float UnderlyingRepurchaseRate = 15;
	optional float UnderlyingFactor = 16;
	optional string UnderlyingCreditRating = 17;
	optional string UnderlyingInstrRegistry = 18;
	optional string UnderlyingCountryOfIssue = 19;
	optional string UnderlyingStateOrProvinceOfIssue = 20;
	optional string UnderlyingLocaleOfIssue = 21;
	optional string UnderlyingRedemptionDate = 22;
	optional float UnderlyingStrikePrice = 23;
	optional string UnderlyingStrikeCurrency = 24;
	optional string UnderlyingOptAttribute = 25;
	optional float UnderlyingContractMultiplier = 26;
	optional float UnderlyingCouponRate = 27;
	optional string UnderlyingSecurityExchange = 28;
	optional string UnderlyingIssuer = 29;
	optional uint32 EncodedUnderlyingIssuerLen = 30;
	optional bytes EncodedUnderlyingIssuer = 31;
	optional string UnderlyingSecurityDesc = 32;
	optional uint32 EncodedUnderlyingSecurityDescLen = 33;
	optional bytes EncodedUnderlyingSecurityDesc = 34;
	optional string UnderlyingCPProgram = 35;
	optional string UnderlyingCPRegType = 36;
	optional string UnderlyingCurrency = 37;
	optional float UnderlyingQty = 38;
	optional float UnderlyingPx = 39;
	optional float UnderlyingDirtyPrice = 40;
	optional float UnderlyingEndPrice = 41;
	optional float UnderlyingStartValue = 42;
	optional float UnderlyingCurrentValue = 43;
	optional float UnderlyingEndValue = 44;
	optional uint32 NoUnderlyingSecurityAltID = 45;
	message UnderlyingSecurityAltIDGroup {
		optional string UnderlyingSecurityAltID = 1;
		optional string UnderlyingSecurityAltIDSource = 2;
	}
	repeated UnderlyingSecurityAltIDGroup UnderlyingSecurityAltID = 46;
	optional UnderlyingStipulationsComponent UnderlyingStipulations = 47;
}

message InstrumentLegComponent {
	optional string LegSymbol = 1;
	optional string LegSymbolSfx = 2;
	optional string LegSecurityID = 3;
	optional string LegSecurityIDSource = 4;
	optional int64 LegProduct = 5;
	optional string LegCFICode = 6;
	optional string LegSecurityType = 7;
	optional string LegSecuritySubType = 8;
	optional string LegMaturityMonthYear = 9;
	optional string LegMaturityDate = 10;
	optional string LegCouponPaymentDate = 11;
	optional string LegIssueDate = 12;
	optional int64 LegRepoCollateralSecurityType = 13;
	optional int64 LegRepurchaseTerm = 14;
	optional float LegRepurchaseRate = 15;
	optional float LegFactor = 16;
	optional string LegCreditRating = 17;
	optional string LegInstrRegistry = 18;
	optional string LegCountryOfIssue = 19;
	optional string LegStateOrProvinceOfIssue = 20;
	optional string LegLocaleOfIssue = 21;
	optional string LegRedemptionDate = 22;
	optional float LegStrikePrice = 23;
	optional string LegStrikeCurrency = 24;
	optional string LegOptAttribute = 25;
	optional float LegContractMultiplier = 26;
	optional float LegCouponRate = 27;
	optional string LegSecurityExchange = 28;
	optional string LegIssuer = 29;
	optional uint32 EncodedLegIssuerLen = 30;
	optional bytes EncodedLegIssuer = 31;
	optional string LegSecurityDesc = 32;
	optional uint32 EncodedLegSecurityDescLen = 33;
	optional bytes EncodedLegSecurityDesc = 34;
	optional float LegRatioQty = 35;
	optional string LegSide = 36;
	optional string LegCurrency = 37;
	optional string LegPool = 38;
	optional string LegDatedDate = 39;
	optional string LegContractSettlMonth = 40;
	optional string LegInterestAccrualDate = 41;
	optional string NoLegSecurityAltID = 42;
	message LegSecurityAltIDGroup {
		optional string LegSecurityAltID = 1;
		optional string LegSecurityAltIDSource = 2;
	}
	repeated LegSecurityAltIDGroup LegSecurityAltID = 43;
}

message InstrumentExtensionComponent {
	optional int64 DeliveryForm = 1;
	optional float PctAtRisk = 2;
	optional uint32 NoInstrAttrib = 3;
	message InstrAttribGroup {
		optional int64 InstrAttribType = 1;
		optional string InstrAttribValue = 2;
	}
	repeated InstrAttribGroup InstrAttrib = 4;
}

message OrderQtyDataComponent {
	optional float OrderQty = 1;
	optional float CashOrderQty = 2;
	optional float OrderPercent = 3;
	optional string RoundingDirection = 4;
	optional float RoundingModulus = 5;
}

message CommissionDataComponent {
	optional float Commission = 1;
	optional string CommType = 2;
	optional string CommCurrency = 3;
	optional string FundRenewWaiv = 4;
}

message PartiesComponent {
	optional uint32 NoPartyIDs = 1;
	message PartyIDsGroup {
		optional string PartyID = 1;
		optional string PartyIDSource = 2;
		optional int64 PartyRole = 3;
		optional uint32 NoPartySubIDs = 4;
		message PartySubIDsGroup {
			optional string PartySubID = 1;
			optional int64 PartySubIDType = 2;
		}
		repeated PartySubIDsGroup PartySubIDs = 5;
	}
	repeated PartyIDsGroup PartyIDs = 2;
}

message NestedPartiesComponent {
	optional uint32 NoNestedPartyIDs = 1;
	message NestedPartyIDsGroup {
		optional string NestedPartyID = 1;
		optional string NestedPartyIDSource = 2;
		optional int64 NestedPartyRole = 3;
		optional uint32 NoNestedPartySubIDs = 4;
		message NestedPartySubIDsGroup {
			optional string NestedPartySubID = 1;
			optional int64 NestedPartySubIDType = 2;
		}
		repeated NestedPartySubIDsGroup NestedPartySubIDs = 5;
	}
	repeated NestedPartyIDsGroup NestedPartyIDs = 2;
}

message NestedParties2Component {
	optional uint32 NoNested2PartyIDs = 1;
	message Nested2PartyIDsGroup {
		optional string Nested2PartyID = 1;
		optional string Nested2PartyIDSource = 2;
		optional int64 Nested2PartyRole = 3;
		optional uint32 NoNested2PartySubIDs = 4;
		message Nested2PartySubIDsGroup {
			optional string Nested2PartySubID = 1;
			optional int64 Nested2PartySubIDType = 2;
		}
		repeated Nested2PartySubIDsGroup Nested2PartySubIDs = 5;
	}
	repeated Nested2PartyIDsGroup Nested2PartyIDs = 2;
}

message NestedParties3Component {
	optional uint32 NoNested3PartyIDs = 1;
	message Nested3PartyIDsGroup {
		optional string Nested3PartyID = 1;
		optional string Nested3PartyIDSource = 2;
		optional int64 Nested3PartyRole = 3;
		optional uint32 NoNested3PartySubIDs = 4;
		message Nested3PartySubIDsGroup {
			optional string Nested3PartySubID = 1;
			optional int64 Nested3PartySubIDType = 2;
		}
		repeated Nested3PartySubIDsGroup Nested3PartySubIDs = 5;
	}
	repeated Nested3PartyIDsGroup Nested3PartyIDs = 2;
}

message SettlPartiesComponent {
	optional uint32 NoSettlPartyIDs = 1;
	message SettlPartyIDsGroup {
		optional string SettlPartyID = 1;
		optional string SettlPartyIDSource = 2;
		optional int64 SettlPartyRole = 3;
		optional uint32 NoSettlPartySubIDs = 4;
		message SettlPartySubIDsGroup {
			optional string SettlPartySubID = 1;
			optional int64 SettlPartySubIDType = 2;
		}
		repeated SettlPartySubIDsGroup SettlPartySubIDs = 5;
	}
	repeated SettlPartyIDsGroup SettlPartyIDs = 2;
}

message SpreadOrBenchmarkCurveDataComponent {
	optional float Spread = 1;
	optional string BenchmarkCurveCurrency = 2;
	optional string BenchmarkCurveName = 3;
	optional string BenchmarkCurvePoint = 4;
	optional float BenchmarkPrice = 5;
	optional int64 BenchmarkPriceType = 6;
	optional string BenchmarkSecurityID = 7;
	optional string BenchmarkSecurityIDSource = 8;
}

message LegBenchmarkCurveDataComponent {
	optional string LegBenchmarkCurveCurrency = 1;
	optional string LegBenchmarkCurveName = 2;
	optional string LegBenchmarkCurvePoint = 3;
	optional float LegBenchmarkPrice = 4;
	optional int64 LegBenchmarkPriceType = 5;
}

message StipulationsComponent {
	optional uint32 NoStipulations = 1;
	message StipulationsGroup {
		optional string StipulationType = 1;
		optional string StipulationValue = 2;
	}
	repeated StipulationsGroup Stipulations = 2;
}

message UnderlyingStipulationsComponent {
	optional uint32 NoUnderlyingStips = 1;
	message UnderlyingStipsGroup {
		optional string UnderlyingStipType = 1;
		optional string UnderlyingStipValue = 2;
	}
	repeated UnderlyingStipsGroup UnderlyingStips = 2;
}

message LegStipulationsComponent {
	optional uint32 NoLegStipulations = 1;
	message LegStipulationsGroup {
		optional string LegStipulationType = 1;
		optional string LegStipulationValue = 2;
	}
	repeated LegStipulationsGroup LegStipulations = 2;
}

message YieldDataComponent {
	optional string YieldType = 1;
	optional float Yield = 2;
	optional string YieldCalcDate = 3;
	optional string YieldRedemptionDate = 4;
	optional float YieldRedemptionPrice = 5;
	optional int64 YieldRedemptionPriceType = 6;
}

message PositionQtyComponent {
	required uint32 NoPositions = 1;
	message PositionsGroup {
		optional string PosType = 1;
		optional float LongQty = 2;
		optional float ShortQty = 3;
		optional int64 PosQtyStatus = 4;
		optional NestedPartiesComponent NestedParties = 5;
	}
	repeated PositionsGroup Positions = 2;
}

message PositionAmountDataComponent {
	required uint32 NoPosAmt = 1;
	message PosAmtGroup {
		required string PosAmtType = 1;
		required float PosAmt = 2;
	}
	repeated PosAmtGroup PosAmt = 2;
}

message TrdRegTimestampsComponent {
	required uint32 NoTrdRegTimestamps = 1;
	message TrdRegTimestampsGroup {
		optional string TrdRegTimestamp = 1;
		optional int64 TrdRegTimestampType = 2;
		optional string TrdRegTimestampOrigin = 3;
	}
	repeated TrdRegTimestampsGroup TrdRegTimestamps = 2;
}

message SettlInstructionsDataComponent {
	optional int64 SettlDeliveryType = 1;
	optional int64 StandInstDbType = 2;
	optional string StandInstDbName = 3;
	optional string StandInstDbID = 4;
	optional uint32 NoDlvyInst = 5;
	message DlvyInstGroup {
		optional string SettlInstSource = 1;
		optional string DlvyInstType = 2;
		optional SettlPartiesComponent SettlParties = 3;
	}
	repeated DlvyInstGroup DlvyInst = 6;
}

message PegInstructionsComponent {
	optional float PegOffsetValue = 1;
	optional int64 PegMoveType = 2;
	optional int64 PegOffsetType = 3;
	optional int64 PegLimitType = 4;
	optional int64 PegRoundDirection = 5;
	optional int64 PegScope = 6;
}

message DiscretionInstructionsComponent {
	optional string DiscretionInst = 1;
	optional float DiscretionOffsetValue = 2;
	optional int64 DiscretionMoveType = 3;
	optional int64 DiscretionOffsetType = 4;
	optional int64 DiscretionLimitType = 5;
	optional int64 DiscretionRoundDirection = 6;
	optional int64 DiscretionScope = 7;
}

message FinancingDetailsComponent {
	optional string AgreementDesc = 1;
	optional string AgreementID = 2;
	optional string AgreementDate = 3;
	optional string AgreementCurrency = 4;
	optional int64 TerminationType = 5;
	optional string StartDate = 6;
	optional string EndDate = 7;
	optional int64 DeliveryType = 8;
	optional float MarginRatio = 9;
}

message Heartbeat {
	optional string TestReqID = 1;
}

message Logon {
	required int64 EncryptMethod = 1;
	required int64 HeartBtInt = 2;
	optional uint32 RawDataLength = 3;
	optional bytes RawData = 4;
	optional bool ResetSeqNumFlag = 5;
	optional uint32 NextExpectedMsgSeqNum = 6;
	optional uint32 MaxMessageSize = 7;
	optional bool TestMessageIndicator = 8;
	optional string Username = 9;
	optional string Password = 10;
	optional uint32 NoMsgTypes = 11;
	message MsgTypesGroup {
		optional string RefMsgType = 1;
		optional string MsgDirection = 2;
	}
	repeated MsgTypesGroup MsgTypes = 12;
}

message TestRequest {
	required string TestReqID = 1;
}

message ResendRequest {
	required uint32 BeginSeqNo = 1;
	required uint32 EndSeqNo = 2;
}

message Reject {
	required uint32 RefSeqNum = 1;
	optional int64 RefTagID = 2;
	optional string RefMsgType = 3;
	optional int64 SessionRejectReason = 4;
	optional string Text = 5;
	optional uint32 EncodedTextLen = 6;
	optional bytes EncodedText = 7;
}

message SequenceReset {
	optional bool GapFillFlag = 1;
	required uint32 NewSeqNo = 2;
}

message Logout {
	optional string Text = 1;
	optional uint32 EncodedTextLen = 2;
	optional bytes EncodedText = 3;
}

message BusinessMessageReject {
	optional uint32 RefSeqNum = 1;
	required string RefMsgType = 2;
	optional string BusinessRejectRefID = 3;
	required int64 BusinessRejectReason = 4;
	optional string Text = 5;
	optional uint32 EncodedTextLen = 6;
	optional bytes EncodedText = 7;
}

message UserRequest {
	required string UserRequestID = 1;
	required int64 UserRequestType = 2;
	required string Username = 3;
	optional string Password = 4;
	optional string NewPassword = 5;
	optional uint32 RawDataLength = 6;
	optional bytes RawData = 7;
}

message UserResponse {
	required string UserRequestID = 1;
	required string Username = 2;
	optional int64 UserStatus = 3;
	optional string UserStatusText = 4;
}

message Advertisement {
	required string AdvId = 1;
	required string AdvTransType = 2;
	optional string AdvRefID = 3;
	required string AdvSide = 4;
	required float Quantity = 5;
	optional int64 QtyType = 6;
	optional float Price = 7;
	optional string Currency = 8;
	optional string TradeDate = 9;
	optional string TransactTime = 10;
	optional string Text = 11;
	optional uint32 EncodedTextLen = 12;
	optional bytes EncodedText = 13;
	optional string URLLink = 14;
	optional string LastMkt = 15;
	optional string TradingSessionID = 16;
	optional string TradingSessionSubID = 17;
	optional uint32 NoLegs = 18;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 19;
	optional uint32 NoUnderlyings = 20;
	message UnderlyingsGroup {
		required UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 21;
	required InstrumentComponent Instrument = 22;
}

message IndicationOfInterest {
	required string IOIid = 1;
	required string IOITransType = 2;
	optional string IOIRefID = 3;
	required string Side = 4;
	optional int64 QtyType = 5;
	required string IOIQty = 6;
	optional string Currency = 7;
	optional int64 PriceType = 8;
	optional float Price = 9;
	optional string ValidUntilTime = 10;
	optional string IOIQltyInd = 11;
	optional bool IOINaturalFlag = 12;
	optional string Text = 13;
	optional uint32 EncodedTextLen = 14;
	optional bytes EncodedText = 15;
	optional string TransactTime = 16;
	optional string URLLink = 17;
	optional uint32 NoUnderlyings = 18;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 19;
	optional uint32 NoLegs = 20;
	message LegsGroup {
		optional string LegIOIQty = 1;
		optional InstrumentLegComponent InstrumentLeg = 2;
		optional LegStipulationsComponent LegStipulations = 3;
	}
	repeated LegsGroup Legs = 21;
	optional uint32 NoIOIQualifiers = 22;
	message IOIQualifiersGroup {
		optional string IOIQualifier = 1;
	}
	repeated IOIQualifiersGroup IOIQualifiers = 23;
	optional uint32 NoRoutingIDs = 24;
	message RoutingIDsGroup {
		optional int64 RoutingType = 1;
		optional string RoutingID = 2;
	}
	repeated RoutingIDsGroup RoutingIDs = 25;
	required InstrumentComponent Instrument = 26;
	optional FinancingDetailsComponent FinancingDetails = 27;
	optional OrderQtyDataComponent OrderQtyData = 28;
	optional StipulationsComponent Stipulations = 29;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 30;
	optional YieldDataComponent YieldData = 31;
}

message News {
	optional string OrigTime = 1;
	optional string Urgency = 2;
	required string Headline = 3;
	optional uint32 EncodedHeadlineLen = 4;
	optional bytes EncodedHeadline = 5;
	optional string URLLink = 6;
	optional uint32 RawDataLength = 7;
	optional bytes RawData = 8;
	optional uint32 NoRoutingIDs = 9;
	message RoutingIDsGroup {
		optional int64 RoutingType = 1;
		optional string RoutingID = 2;
	}
	repeated RoutingIDsGroup RoutingIDs = 10;
	optional uint32 NoRelatedSym = 11;
	message RelatedSymGroup {
		optional InstrumentComponent Instrument = 1;
	}
	repeated RelatedSymGroup RelatedSym = 12;
	optional uint32 NoLegs = 13;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 14;
	optional uint32 NoUnderlyings = 15;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 16;
	required uint32 LinesOfText = 17;
	message nesOfTextGroup {
		required string Text = 1;
		optional uint32 EncodedTextLen = 2;
		optional bytes EncodedText = 3;
	}
	repeated nesOfTextGroup nesOfText = 18;
}

message Email {
	required string EmailThreadID = 1;
	required string EmailType = 2;
	optional string OrigTime = 3;
	required string Subject = 4;
	optional uint32 EncodedSubjectLen = 5;
	optional bytes EncodedSubject = 6;
	optional string OrderID = 7;
	optional string ClOrdID = 8;
	optional uint32 RawDataLength = 9;
	optional bytes RawData = 10;
	optional uint32 NoRoutingIDs = 11;
	message RoutingIDsGroup {
		optional int64 RoutingType = 1;
		optional string RoutingID = 2;
	}
	repeated RoutingIDsGroup RoutingIDs = 12;
	optional uint32 NoRelatedSym = 13;
	message RelatedSymGroup {
		optional InstrumentComponent Instrument = 1;
	}
	repeated RelatedSymGroup RelatedSym = 14;
	optional uint32 NoUnderlyings = 15;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 16;
	optional uint32 NoLegs = 17;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 18;
	required uint32 LinesOfText = 19;
	message nesOfTextGroup {
		required string Text = 1;
		optional uint32 EncodedTextLen = 2;
		optional bytes EncodedText = 3;
	}
	repeated nesOfTextGroup nesOfText = 20;
}

message QuoteRequest {
	required string QuoteReqID = 1;
	optional string RFQReqID = 2;
	optional string ClOrdID = 3;
	optional string OrderCapacity = 4;
	optional string Text = 5;
	optional uint32 EncodedTextLen = 6;
	optional bytes EncodedText = 7;
	required uint32 NoRelatedSym = 8;
	message RelatedSymGroup {
		optional float PrevClosePx = 1;
		optional int64 QuoteRequestType = 2;
		optional int64 QuoteType = 3;
		optional string TradingSessionID = 4;
		optional string TradingSessionSubID = 5;
		optional string TradeOriginationDate = 6;
		optional string Side = 7;
		optional int64 QtyType = 8;
		optional string SettlType = 9;
		optional string SettlDate = 10;
		optional string SettlDate2 = 11;
		optional float OrderQty2 = 12;
		optional string Currency = 13;
		optional string Account = 14;
		optional int64 AcctIDSource = 15;
		optional int64 AccountType = 16;
		optional int64 QuotePriceType = 17;
		optional string OrdType = 18;
		optional string ValidUntilTime = 19;
		optional string ExpireTime = 20;
		optional string TransactTime = 21;
		optional int64 PriceType = 22;
		optional float Price = 23;
		optional float Price2 = 24;
		optional uint32 NoUnderlyings = 25;
		message UnderlyingsGroup {
			optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
		}
		repeated UnderlyingsGroup Underlyings = 26;
		optional uint32 NoLegs = 27;
		message LegsGroup {
			optional float LegQty = 1;
			optional int64 LegSwapType = 2;
			optional string LegSettlType = 3;
			optional string LegSettlDate = 4;
			optional InstrumentLegComponent InstrumentLeg = 5;
			optional LegStipulationsComponent LegStipulations = 6;
			optional NestedPartiesComponent NestedParties = 7;
			optional LegBenchmarkCurveDataComponent LegBenchmarkCurveData = 8;
		}
		repeated LegsGroup Legs = 28;
		optional uint32 NoQuoteQualifiers = 29;
		message QuoteQualifiersGroup {
			optional string QuoteQualifier = 1;
		}
		repeated QuoteQualifiersGroup QuoteQualifiers = 30;
		required InstrumentComponent Instrument = 31;
		optional FinancingDetailsComponent FinancingDetails = 32;
		optional OrderQtyDataComponent OrderQtyData = 33;
		optional StipulationsComponent Stipulations = 34;
		optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 35;
		optional YieldDataComponent YieldData = 36;
		optional PartiesComponent Parties = 37;
	}
	repeated RelatedSymGroup RelatedSym = 9;
}

message QuoteResponse {
	required string QuoteRespID = 1;
	optional string QuoteID = 2;
	required int64 QuoteRespType = 3;
	optional string ClOrdID = 4;
	optional string OrderCapacity = 5;
	optional string IOIid = 6;
	optional int64 QuoteType = 7;
	optional string TradingSessionID = 8;
	optional string TradingSessionSubID = 9;
	optional string Side = 10;
	optional string SettlType = 11;
	optional string SettlDate = 12;
	optional string SettlDate2 = 13;
	optional float OrderQty2 = 14;
	optional string Currency = 15;
	optional string Account = 16;
	optional int64 AcctIDSource = 17;
	optional int64 AccountType = 18;
	optional float BidPx = 19;
	optional float OfferPx = 20;
	optional float MktBidPx = 21;
	optional float MktOfferPx = 22;
	optional float MinBidSize = 23;
	optional float BidSize = 24;
	optional float MinOfferSize = 25;
	optional float OfferSize = 26;
	optional string ValidUntilTime = 27;
	optional float BidSpotRate = 28;
	optional float OfferSpotRate = 29;
	optional float BidForwardPoints = 30;
	optional float OfferForwardPoints = 31;
	optional float MidPx = 32;
	optional float BidYield = 33;
	optional float MidYield = 34;
	optional float OfferYield = 35;
	optional string TransactTime = 36;
	optional string OrdType = 37;
	optional float BidForwardPoints2 = 38;
	optional float OfferForwardPoints2 = 39;
	optional float SettlCurrBidFxRate = 40;
	optional float SettlCurrOfferFxRate = 41;
	optional string SettlCurrFxRateCalc = 42;
	optional float Commission = 43;
	optional string CommType = 44;
	optional int64 CustOrderCapacity = 45;
	optional string ExDestination = 46;
	optional string Text = 47;
	optional uint32 EncodedTextLen = 48;
	optional bytes EncodedText = 49;
	optional float Price = 50;
	optional int64 PriceType = 51;
	optional uint32 NoQuoteQualifiers = 52;
	message QuoteQualifiersGroup {
		optional string QuoteQualifier = 1;
	}
	repeated QuoteQualifiersGroup QuoteQualifiers = 53;
	optional uint32 NoUnderlyings = 54;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 55;
	optional uint32 NoLegs = 56;
	message LegsGroup {
		optional float LegQty = 1;
		optional int64 LegSwapType = 2;
		optional string LegSettlType = 3;
		optional string LegSettlDate = 4;
		optional int64 LegPriceType = 5;
		optional float LegBidPx = 6;
		optional float LegOfferPx = 7;
		optional InstrumentLegComponent InstrumentLeg = 8;
		optional LegStipulationsComponent LegStipulations = 9;
		optional NestedPartiesComponent NestedParties = 10;
		optional LegBenchmarkCurveDataComponent LegBenchmarkCurveData = 11;
	}
	repeated LegsGroup Legs = 57;
	optional PartiesComponent Parties = 58;
	required InstrumentComponent Instrument = 59;
	optional FinancingDetailsComponent FinancingDetails = 60;
	optional OrderQtyDataComponent OrderQtyData = 61;
	optional StipulationsComponent Stipulations = 62;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 63;
	optional YieldDataComponent YieldData = 64;
}

message QuoteRequestReject {
	required string QuoteReqID = 1;
	optional string RFQReqID = 2;
	required int64 QuoteRequestRejectReason = 3;
	optional int64 QuotePriceType = 4;
	optional string OrdType = 5;
	optional string ExpireTime = 6;
	optional string TransactTime = 7;
	optional int64 PriceType = 8;
	optional float Price = 9;
	optional float Price2 = 10;
	optional string Text = 11;
	optional uint32 EncodedTextLen = 12;
	optional bytes EncodedText = 13;
	required uint32 NoRelatedSym = 14;
	message RelatedSymGroup {
		optional float PrevClosePx = 1;
		optional int64 QuoteRequestType = 2;
		optional int64 QuoteType = 3;
		optional string TradingSessionID = 4;
		optional string TradingSessionSubID = 5;
		optional string TradeOriginationDate = 6;
		optional string Side = 7;
		optional int64 QtyType = 8;
		optional string SettlType = 9;
		optional string SettlDate = 10;
		optional string SettlDate2 = 11;
		optional float OrderQty2 = 12;
		optional string Currency = 13;
		optional string Account = 14;
		optional int64 AcctIDSource = 15;
		optional int64 AccountType = 16;
		optional uint32 NoUnderlyings = 17;
		message UnderlyingsGroup {
			optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
		}
		repeated UnderlyingsGroup Underlyings = 18;
		optional uint32 NoLegs = 19;
		message LegsGroup {
			optional float LegQty = 1;
			optional int64 LegSwapType = 2;
			optional string LegSettlType = 3;
			optional string LegSettlDate = 4;
			optional InstrumentLegComponent InstrumentLeg = 5;
			optional LegStipulationsComponent LegStipulations = 6;
			optional NestedPartiesComponent NestedParties = 7;
			optional LegBenchmarkCurveDataComponent LegBenchmarkCurveData = 8;
		}
		repeated LegsGroup Legs = 20;
		required InstrumentComponent Instrument = 21;
		optional FinancingDetailsComponent FinancingDetails = 22;
		optional OrderQtyDataComponent OrderQtyData = 23;
		optional StipulationsComponent Stipulations = 24;
	}
	repeated RelatedSymGroup RelatedSym = 15;
	optional uint32 NoQuoteQualifiers = 16;
	message QuoteQualifiersGroup {
		optional string QuoteQualifier = 1;
	}
	repeated QuoteQualifiersGroup QuoteQualifiers = 17;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 18;
	optional YieldDataComponent YieldData = 19;
	optional PartiesComponent Parties = 20;
}

message RFQRequest {
	required string RFQReqID = 1;
	optional string SubscriptionRequestType = 2;
	required uint32 NoRelatedSym = 3;
	message RelatedSymGroup {
		optional float PrevClosePx = 1;
		optional int64 QuoteRequestType = 2;
		optional int64 QuoteType = 3;
		optional string TradingSessionID = 4;
		optional string TradingSessionSubID = 5;
		optional uint32 NoUnderlyings = 6;
		message UnderlyingsGroup {
			optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
		}
		repeated UnderlyingsGroup Underlyings = 7;
		optional uint32 NoLegs = 8;
		message LegsGroup {
			optional InstrumentLegComponent InstrumentLeg = 1;
		}
		repeated LegsGroup Legs = 9;
		required InstrumentComponent Instrument = 10;
	}
	repeated RelatedSymGroup RelatedSym = 4;
}

message Quote {
	optional string QuoteReqID = 1;
	required string QuoteID = 2;
	optional string QuoteRespID = 3;
	optional int64 QuoteType = 4;
	optional int64 QuoteResponseLevel = 5;
	optional string TradingSessionID = 6;
	optional string TradingSessionSubID = 7;
	optional string Side = 8;
	optional string SettlType = 9;
	optional string SettlDate = 10;
	optional string SettlDate2 = 11;
	optional float OrderQty2 = 12;
	optional string Currency = 13;
	optional string Account = 14;
	optional int64 AcctIDSource = 15;
	optional int64 AccountType = 16;
	optional float BidPx = 17;
	optional float OfferPx = 18;
	optional float MktBidPx = 19;
	optional float MktOfferPx = 20;
	optional float MinBidSize = 21;
	optional float BidSize = 22;
	optional float MinOfferSize = 23;
	optional float OfferSize = 24;
	optional string ValidUntilTime = 25;
	optional float BidSpotRate = 26;
	optional float OfferSpotRate = 27;
	optional float BidForwardPoints = 28;
	optional float OfferForwardPoints = 29;
	optional float MidPx = 30;
	optional float BidYield = 31;
	optional float MidYield = 32;
	optional float OfferYield = 33;
	optional string TransactTime = 34;
	optional string OrdType = 35;
	optional float BidForwardPoints2 = 36;
	optional float OfferForwardPoints2 = 37;
	optional float SettlCurrBidFxRate = 38;
	optional float SettlCurrOfferFxRate = 39;
	optional string SettlCurrFxRateCalc = 40;
	optional string CommType = 41;
	optional float Commission = 42;
	optional int64 CustOrderCapacity = 43;
	optional string ExDestination = 44;
	optional string OrderCapacity = 45;
	optional int64 PriceType = 46;
	optional string Text = 47;
	optional uint32 EncodedTextLen = 48;
	optional bytes EncodedText = 49;
	optional uint32 NoQuoteQualifiers = 50;
	message QuoteQualifiersGroup {
		optional string QuoteQualifier = 1;
	}
	repeated QuoteQualifiersGroup QuoteQualifiers = 51;
	optional uint32 NoUnderlyings = 52;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 53;
	optional uint32 NoLegs = 54;
	message LegsGroup {
		optional float LegQty = 1;
		optional int64 LegSwapType = 2;
		optional string LegSettlType = 3;
		optional string LegSettlDate = 4;
		optional int64 LegPriceType = 5;
		optional float LegBidPx = 6;
		optional float LegOfferPx = 7;
		optional InstrumentLegComponent InstrumentLeg = 8;
		optional LegStipulationsComponent LegStipulations = 9;
		optional NestedPartiesComponent NestedParties = 10;
		optional LegBenchmarkCurveDataComponent LegBenchmarkCurveData = 11;
	}
	repeated LegsGroup Legs = 55;
	optional PartiesComponent Parties = 56;
	required InstrumentComponent Instrument = 57;
	optional FinancingDetailsComponent FinancingDetails = 58;
	optional OrderQtyDataComponent OrderQtyData = 59;
	optional StipulationsComponent Stipulations = 60;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 61;
	optional YieldDataComponent YieldData = 62;
}

message QuoteCancel {
	optional string QuoteReqID = 1;
	required string QuoteID = 2;
	required int64 QuoteCancelType = 3;
	optional int64 QuoteResponseLevel = 4;
	optional string Account = 5;
	optional int64 AcctIDSource = 6;
	optional int64 AccountType = 7;
	optional string TradingSessionID = 8;
	optional string TradingSessionSubID = 9;
	optional uint32 NoQuoteEntries = 10;
	message QuoteEntriesGroup {
		optional uint32 NoUnderlyings = 1;
		message UnderlyingsGroup {
			optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
		}
		repeated UnderlyingsGroup Underlyings = 2;
		optional uint32 NoLegs = 3;
		message LegsGroup {
			optional InstrumentLegComponent InstrumentLeg = 1;
		}
		repeated LegsGroup Legs = 4;
		optional InstrumentComponent Instrument = 5;
		optional FinancingDetailsComponent FinancingDetails = 6;
	}
	repeated QuoteEntriesGroup QuoteEntries = 11;
	optional PartiesComponent Parties = 12;
}

message QuoteStatusRequest {
	optional string QuoteStatusReqID = 1;
	optional string QuoteID = 2;
	optional string Account = 3;
	optional int64 AcctIDSource = 4;
	optional int64 AccountType = 5;
	optional string TradingSessionID = 6;
	optional string TradingSessionSubID = 7;
	optional string SubscriptionRequestType = 8;
	optional uint32 NoUnderlyings = 9;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 10;
	optional uint32 NoLegs = 11;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 12;
	required InstrumentComponent Instrument = 13;
	optional FinancingDetailsComponent FinancingDetails = 14;
	optional PartiesComponent Parties = 15;
}

message QuoteStatusReport {
	optional string QuoteStatusReqID = 1;
	optional string QuoteReqID = 2;
	required string QuoteID = 3;
	optional string QuoteRespID = 4;
	optional int64 QuoteType = 5;
	optional string TradingSessionID = 6;
	optional string TradingSessionSubID = 7;
	optional string Side = 8;
	optional string SettlType = 9;
	optional string SettlDate = 10;
	optional string SettlDate2 = 11;
	optional float OrderQty2 = 12;
	optional string Currency = 13;
	optional string Account = 14;
	optional int64 AcctIDSource = 15;
	optional int64 AccountType = 16;
	optional string ExpireTime = 17;
	optional float Price = 18;
	optional int64 PriceType = 19;
	optional float BidPx = 20;
	optional float OfferPx = 21;
	optional float MktBidPx = 22;
	optional float MktOfferPx = 23;
	optional float MinBidSize = 24;
	optional float BidSize = 25;
	optional float MinOfferSize = 26;
	optional float OfferSize = 27;
	optional string ValidUntilTime = 28;
	optional float BidSpotRate = 29;
	optional float OfferSpotRate = 30;
	optional float BidForwardPoints = 31;
	optional float OfferForwardPoints = 32;
	optional float MidPx = 33;
	optional float BidYield = 34;
	optional float MidYield = 35;
	optional float OfferYield = 36;
	optional string TransactTime = 37;
	optional string OrdType = 38;
	optional float BidForwardPoints2 = 39;
	optional float OfferForwardPoints2 = 40;
	optional float SettlCurrBidFxRate = 41;
	optional float SettlCurrOfferFxRate = 42;
	optional string SettlCurrFxRateCalc = 43;
	optional string CommType = 44;
	optional float Commission = 45;
	optional int64 CustOrderCapacity = 46;
	optional string ExDestination = 47;
	optional int64 QuoteStatus = 48;
	optional string Text = 49;
	optional uint32 EncodedTextLen = 50;
	optional bytes EncodedText = 51;
	optional uint32 NoUnderlyings = 52;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 53;
	optional uint32 NoLegs = 54;
	message LegsGroup {
		optional float LegQty = 1;
		optional int64 LegSwapType = 2;
		optional string LegSettlType = 3;
		optional string LegSettlDate = 4;
		optional InstrumentLegComponent InstrumentLeg = 5;
		optional LegStipulationsComponent LegStipulations = 6;
		optional NestedPartiesComponent NestedParties = 7;
	}
	repeated LegsGroup Legs = 55;
	optional uint32 NoQuoteQualifiers = 56;
	message QuoteQualifiersGroup {
		optional string QuoteQualifier = 1;
	}
	repeated QuoteQualifiersGroup QuoteQualifiers = 57;
	optional PartiesComponent Parties = 58;
	required InstrumentComponent Instrument = 59;
	optional FinancingDetailsComponent FinancingDetails = 60;
	optional OrderQtyDataComponent OrderQtyData = 61;
	optional StipulationsComponent Stipulations = 62;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 63;
	optional YieldDataComponent YieldData = 64;
}

message MassQuote {
	optional string QuoteReqID = 1;
	required string QuoteID = 2;
	optional int64 QuoteType = 3;
	optional int64 QuoteResponseLevel = 4;
	optional string Account = 5;
	optional int64 AcctIDSource = 6;
	optional int64 AccountType = 7;
	optional float DefBidSize = 8;
	optional float DefOfferSize = 9;
	required uint32 NoQuoteSets = 10;
	message QuoteSetsGroup {
		required string QuoteSetID = 1;
		optional string QuoteSetValidUntilTime = 2;
		required int64 TotNoQuoteEntries = 3;
		optional bool LastFragment = 4;
		required uint32 NoQuoteEntries = 5;
		message QuoteEntriesGroup {
			required string QuoteEntryID = 1;
			optional float BidPx = 2;
			optional float OfferPx = 3;
			optional float BidSize = 4;
			optional float OfferSize = 5;
			optional string ValidUntilTime = 6;
			optional float BidSpotRate = 7;
			optional float OfferSpotRate = 8;
			optional float BidForwardPoints = 9;
			optional float OfferForwardPoints = 10;
			optional float MidPx = 11;
			optional float BidYield = 12;
			optional float MidYield = 13;
			optional float OfferYield = 14;
			optional string TransactTime = 15;
			optional string TradingSessionID = 16;
			optional string TradingSessionSubID = 17;
			optional string SettlDate = 18;
			optional string OrdType = 19;
			optional string SettlDate2 = 20;
			optional float OrderQty2 = 21;
			optional float BidForwardPoints2 = 22;
			optional float OfferForwardPoints2 = 23;
			optional string Currency = 24;
			optional uint32 NoLegs = 25;
			message LegsGroup {
				optional InstrumentLegComponent InstrumentLeg = 1;
			}
			repeated LegsGroup Legs = 26;
			optional InstrumentComponent Instrument = 27;
		}
		repeated QuoteEntriesGroup QuoteEntries = 6;
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 7;
	}
	repeated QuoteSetsGroup QuoteSets = 11;
	optional PartiesComponent Parties = 12;
}

message MassQuoteAcknowledgement {
	optional string QuoteReqID = 1;
	optional string QuoteID = 2;
	required int64 QuoteStatus = 3;
	optional int64 QuoteRejectReason = 4;
	optional int64 QuoteResponseLevel = 5;
	optional int64 QuoteType = 6;
	optional string Account = 7;
	optional int64 AcctIDSource = 8;
	optional int64 AccountType = 9;
	optional string Text = 10;
	optional uint32 EncodedTextLen = 11;
	optional bytes EncodedText = 12;
	optional uint32 NoQuoteSets = 13;
	message QuoteSetsGroup {
		optional string QuoteSetID = 1;
		optional int64 TotNoQuoteEntries = 2;
		optional bool LastFragment = 3;
		optional uint32 NoQuoteEntries = 4;
		message QuoteEntriesGroup {
			optional string QuoteEntryID = 1;
			optional float BidPx = 2;
			optional float OfferPx = 3;
			optional float BidSize = 4;
			optional float OfferSize = 5;
			optional string ValidUntilTime = 6;
			optional float BidSpotRate = 7;
			optional float OfferSpotRate = 8;
			optional float BidForwardPoints = 9;
			optional float OfferForwardPoints = 10;
			optional float MidPx = 11;
			optional float BidYield = 12;
			optional float MidYield = 13;
			optional float OfferYield = 14;
			optional string TransactTime = 15;
			optional string TradingSessionID = 16;
			optional string TradingSessionSubID = 17;
			optional string SettlDate = 18;
			optional string OrdType = 19;
			optional string SettlDate2 = 20;
			optional float OrderQty2 = 21;
			optional float BidForwardPoints2 = 22;
			optional float OfferForwardPoints2 = 23;
			optional string Currency = 24;
			optional int64 QuoteEntryRejectReason = 25;
			optional uint32 NoLegs = 26;
			message LegsGroup {
				optional InstrumentLegComponent InstrumentLeg = 1;
			}
			repeated LegsGroup Legs = 27;
			optional InstrumentComponent Instrument = 28;
		}
		repeated QuoteEntriesGroup QuoteEntries = 5;
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 6;
	}
	repeated QuoteSetsGroup QuoteSets = 14;
	optional PartiesComponent Parties = 15;
}

message MarketDataRequest {
	required string MDReqID = 1;
	required string SubscriptionRequestType = 2;
	required int64 MarketDepth = 3;
	optional int64 MDUpdateType = 4;
	optional bool AggregatedBook = 5;
	optional string OpenCloseSettlFlag = 6;
	optional string Scope = 7;
	optional bool MDImplicitDelete = 8;
	optional int64 ApplQueueAction = 9;
	optional int64 ApplQueueMax = 10;
	required uint32 NoMDEntryTypes = 11;
	message MDEntryTypesGroup {
		required string MDEntryType = 1;
	}
	repeated MDEntryTypesGroup MDEntryTypes = 12;
	required uint32 NoRelatedSym = 13;
	message RelatedSymGroup {
		optional uint32 NoUnderlyings = 1;
		message UnderlyingsGroup {
			optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
		}
		repeated UnderlyingsGroup Underlyings = 2;
		optional uint32 NoLegs = 3;
		message LegsGroup {
			optional InstrumentLegComponent InstrumentLeg = 1;
		}
		repeated LegsGroup Legs = 4;
		required InstrumentComponent Instrument = 5;
	}
	repeated RelatedSymGroup RelatedSym = 14;
	optional uint32 NoTradingSessions = 15;
	message TradingSessionsGroup {
		optional string TradingSessionID = 1;
		optional string TradingSessionSubID = 2;
	}
	repeated TradingSessionsGroup TradingSessions = 16;
}

message MarketDataSnapshotFullRefresh {
	optional string MDReqID = 1;
	optional string FinancialStatus = 2;
	optional string CorporateAction = 3;
	optional float NetChgPrevDay = 4;
	optional int64 ApplQueueDepth = 5;
	optional int64 ApplQueueResolution = 6;
	optional uint32 NoUnderlyings = 7;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 8;
	optional uint32 NoLegs = 9;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 10;
	required uint32 NoMDEntries = 11;
	message MDEntriesGroup {
		required string MDEntryType = 1;
		optional float MDEntryPx = 2;
		optional string Currency = 3;
		optional float MDEntrySize = 4;
		optional string MDEntryDate = 5;
		optional string MDEntryTime = 6;
		optional string TickDirection = 7;
		optional string MDMkt = 8;
		optional string TradingSessionID = 9;
		optional string TradingSessionSubID = 10;
		optional string QuoteCondition = 11;
		optional string TradeCondition = 12;
		optional string MDEntryOriginator = 13;
		optional string LocationID = 14;
		optional string DeskID = 15;
		optional string OpenCloseSettlFlag = 16;
		optional string TimeInForce = 17;
		optional string ExpireDate = 18;
		optional string ExpireTime = 19;
		optional float MinQty = 20;
		optional string ExecInst = 21;
		optional int64 SellerDays = 22;
		optional string OrderID = 23;
		optional string QuoteEntryID = 24;
		optional string MDEntryBuyer = 25;
		optional string MDEntrySeller = 26;
		optional int64 NumberOfOrders = 27;
		optional int64 MDEntryPositionNo = 28;
		optional string Scope = 29;
		optional float PriceDelta = 30;
		optional string Text = 31;
		optional uint32 EncodedTextLen = 32;
		optional bytes EncodedText = 33;
	}
	repeated MDEntriesGroup MDEntries = 12;
	required InstrumentComponent Instrument = 13;
}

message MarketDataIncrementalRefresh {
	optional string MDReqID = 1;
	optional int64 ApplQueueDepth = 2;
	optional int64 ApplQueueResolution = 3;
	required uint32 NoMDEntries = 4;
	message MDEntriesGroup {
		required string MDUpdateAction = 1;
		optional string DeleteReason = 2;
		optional string MDEntryType = 3;
		optional string MDEntryID = 4;
		optional string MDEntryRefID = 5;
		optional string FinancialStatus = 6;
		optional string CorporateAction = 7;
		optional float MDEntryPx = 8;
		optional string Currency = 9;
		optional float MDEntrySize = 10;
		optional string MDEntryDate = 11;
		optional string MDEntryTime = 12;
		optional string TickDirection = 13;
		optional string MDMkt = 14;
		optional string TradingSessionID = 15;
		optional string TradingSessionSubID = 16;
		optional string QuoteCondition = 17;
		optional string TradeCondition = 18;
		optional string MDEntryOriginator = 19;
		optional string LocationID = 20;
		optional string DeskID = 21;
		optional string OpenCloseSettlFlag = 22;
		optional string TimeInForce = 23;
		optional string ExpireDate = 24;
		optional string ExpireTime = 25;
		optional float MinQty = 26;
		optional string ExecInst = 27;
		optional int64 SellerDays = 28;
		optional string OrderID = 29;
		optional string QuoteEntryID = 30;
		optional string MDEntryBuyer = 31;
		optional string MDEntrySeller = 32;
		optional int64 NumberOfOrders = 33;
		optional int64 MDEntryPositionNo = 34;
		optional string Scope = 35;
		optional float PriceDelta = 36;
		optional float NetChgPrevDay = 37;
		optional string Text = 38;
		optional uint32 EncodedTextLen = 39;
		optional bytes EncodedText = 40;
		optional uint32 NoUnderlyings = 41;
		message UnderlyingsGroup {
			optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
		}
		repeated UnderlyingsGroup Underlyings = 42;
		optional uint32 NoLegs = 43;
		message LegsGroup {
			optional InstrumentLegComponent InstrumentLeg = 1;
		}
		repeated LegsGroup Legs = 44;
		optional InstrumentComponent Instrument = 45;
	}
	repeated MDEntriesGroup MDEntries = 5;
}

message MarketDataRequestReject {
	required string MDReqID = 1;
	optional string MDReqRejReason = 2;
	optional string Text = 3;
	optional uint32 EncodedTextLen = 4;
	optional bytes EncodedText = 5;
	optional uint32 NoAltMDSource = 6;
	message AltMDSourceGroup {
		optional string AltMDSourceID = 1;
	}
	repeated AltMDSourceGroup AltMDSource = 7;
}

message SecurityDefinitionRequest {
	required string SecurityReqID = 1;
	required int64 SecurityRequestType = 2;
	optional string Currency = 3;
	optional string Text = 4;
	optional uint32 EncodedTextLen = 5;
	optional bytes EncodedText = 6;
	optional string TradingSessionID = 7;
	optional string TradingSessionSubID = 8;
	optional int64 ExpirationCycle = 9;
	optional string SubscriptionRequestType = 10;
	optional uint32 NoUnderlyings = 11;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 12;
	optional uint32 NoLegs = 13;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 14;
	optional InstrumentComponent Instrument = 15;
	optional InstrumentExtensionComponent InstrumentExtension = 16;
}

message SecurityDefinition {
	required string SecurityReqID = 1;
	required string SecurityResponseID = 2;
	required int64 SecurityResponseType = 3;
	optional string Currency = 4;
	optional string TradingSessionID = 5;
	optional string TradingSessionSubID = 6;
	optional string Text = 7;
	optional uint32 EncodedTextLen = 8;
	optional bytes EncodedText = 9;
	optional int64 ExpirationCycle = 10;
	optional float RoundLot = 11;
	optional float MinTradeVol = 12;
	optional uint32 NoUnderlyings = 13;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 14;
	optional uint32 NoLegs = 15;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 16;
	optional InstrumentComponent Instrument = 17;
	optional InstrumentExtensionComponent InstrumentExtension = 18;
}

message SecurityTypeRequest {
	required string SecurityReqID = 1;
	optional string Text = 2;
	optional uint32 EncodedTextLen = 3;
	optional bytes EncodedText = 4;
	optional string TradingSessionID = 5;
	optional string TradingSessionSubID = 6;
	optional int64 Product = 7;
	optional string SecurityType = 8;
	optional string SecuritySubType = 9;
}

message SecurityTypes {
	required string SecurityReqID = 1;
	required string SecurityResponseID = 2;
	required int64 SecurityResponseType = 3;
	optional int64 TotNoSecurityTypes = 4;
	optional bool LastFragment = 5;
	optional string Text = 6;
	optional uint32 EncodedTextLen = 7;
	optional bytes EncodedText = 8;
	optional string TradingSessionID = 9;
	optional string TradingSessionSubID = 10;
	optional string SubscriptionRequestType = 11;
	optional uint32 NoSecurityTypes = 12;
	message SecurityTypesGroup {
		optional string SecurityType = 1;
		optional string SecuritySubType = 2;
		optional int64 Product = 3;
		optional string CFICode = 4;
	}
	repeated SecurityTypesGroup SecurityTypes = 13;
}

message SecurityListRequest {
	required string SecurityReqID = 1;
	required int64 SecurityListRequestType = 2;
	optional string Currency = 3;
	optional string Text = 4;
	optional uint32 EncodedTextLen = 5;
	optional bytes EncodedText = 6;
	optional string TradingSessionID = 7;
	optional string TradingSessionSubID = 8;
	optional string SubscriptionRequestType = 9;
	optional uint32 NoUnderlyings = 10;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 11;
	optional uint32 NoLegs = 12;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 13;
	optional InstrumentComponent Instrument = 14;
	optional InstrumentExtensionComponent InstrumentExtension = 15;
	optional FinancingDetailsComponent FinancingDetails = 16;
}

message SecurityList {
	required string SecurityReqID = 1;
	required string SecurityResponseID = 2;
	required int64 SecurityRequestResult = 3;
	optional int64 TotNoRelatedSym = 4;
	optional bool LastFragment = 5;
	optional uint32 NoRelatedSym = 6;
	message RelatedSymGroup {
		optional string Currency = 1;
		optional float RoundLot = 2;
		optional float MinTradeVol = 3;
		optional string TradingSessionID = 4;
		optional string TradingSessionSubID = 5;
		optional int64 ExpirationCycle = 6;
		optional string Text = 7;
		optional uint32 EncodedTextLen = 8;
		optional bytes EncodedText = 9;
		optional uint32 NoUnderlyings = 10;
		message UnderlyingsGroup {
			optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
		}
		repeated UnderlyingsGroup Underlyings = 11;
		optional uint32 NoLegs = 12;
		message LegsGroup {
			optional int64 LegSwapType = 1;
			optional string LegSettlType = 2;
			optional InstrumentLegComponent InstrumentLeg = 3;
			optional LegStipulationsComponent LegStipulations = 4;
			optional LegBenchmarkCurveDataComponent LegBenchmarkCurveData = 5;
		}
		repeated LegsGroup Legs = 13;
		optional InstrumentComponent Instrument = 14;
		optional InstrumentExtensionComponent InstrumentExtension = 15;
		optional FinancingDetailsComponent FinancingDetails = 16;
		optional StipulationsComponent Stipulations = 17;
		optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 18;
		optional YieldDataComponent YieldData = 19;
	}
	repeated RelatedSymGroup RelatedSym = 7;
}

message DerivativeSecurityListRequest {
	required string SecurityReqID = 1;
	required int64 SecurityListRequestType = 2;
	optional string SecuritySubType = 3;
	optional string Currency = 4;
	optional string Text = 5;
	optional uint32 EncodedTextLen = 6;
	optional bytes EncodedText = 7;
	optional string TradingSessionID = 8;
	optional string TradingSessionSubID = 9;
	optional string SubscriptionRequestType = 10;
	optional UnderlyingInstrumentComponent UnderlyingInstrument = 11;
}

message DerivativeSecurityList {
	required string SecurityReqID = 1;
	required string SecurityResponseID = 2;
	required int64 SecurityRequestResult = 3;
	optional int64 TotNoRelatedSym = 4;
	optional bool LastFragment = 5;
	optional uint32 NoRelatedSym = 6;
	message RelatedSymGroup {
		optional string Currency = 1;
		optional int64 ExpirationCycle = 2;
		optional string TradingSessionID = 3;
		optional string TradingSessionSubID = 4;
		optional string Text = 5;
		optional uint32 EncodedTextLen = 6;
		optional bytes EncodedText = 7;
		optional uint32 NoLegs = 8;
		message LegsGroup {
			optional InstrumentLegComponent InstrumentLeg = 1;
		}
		repeated LegsGroup Legs = 9;
		optional InstrumentComponent Instrument = 10;
		optional InstrumentExtensionComponent InstrumentExtension = 11;
	}
	repeated RelatedSymGroup RelatedSym = 7;
	optional UnderlyingInstrumentComponent UnderlyingInstrument = 8;
}

message SecurityStatusRequest {
	required string SecurityStatusReqID = 1;
	optional string Currency = 2;
	required string SubscriptionRequestType = 3;
	optional string TradingSessionID = 4;
	optional string TradingSessionSubID = 5;
	optional uint32 NoUnderlyings = 6;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 7;
	optional uint32 NoLegs = 8;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 9;
	required InstrumentComponent Instrument = 10;
	optional InstrumentExtensionComponent InstrumentExtension = 11;
}

message SecurityStatus {
	optional string SecurityStatusReqID = 1;
	optional string Currency = 2;
	optional string TradingSessionID = 3;
	optional string TradingSessionSubID = 4;
	optional bool UnsolicitedIndicator = 5;
	optional int64 SecurityTradingStatus = 6;
	optional string FinancialStatus = 7;
	optional string CorporateAction = 8;
	optional string HaltReason = 9;
	optional bool InViewOfCommon = 10;
	optional bool DueToRelated = 11;
	optional float BuyVolume = 12;
	optional float SellVolume = 13;
	optional float HighPx = 14;
	optional float LowPx = 15;
	optional float LastPx = 16;
	optional string TransactTime = 17;
	optional int64 Adjustment = 18;
	optional string Text = 19;
	optional uint32 EncodedTextLen = 20;
	optional bytes EncodedText = 21;
	optional uint32 NoUnderlyings = 22;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 23;
	optional uint32 NoLegs = 24;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 25;
	required InstrumentComponent Instrument = 26;
	optional InstrumentExtensionComponent InstrumentExtension = 27;
}

message TradingSessionStatusRequest {
	required string TradSesReqID = 1;
	optional string TradingSessionID = 2;
	optional string TradingSessionSubID = 3;
	optional int64 TradSesMethod = 4;
	optional int64 TradSesMode = 5;
	required string SubscriptionRequestType = 6;
}

message TradingSessionStatus {
	optional string TradSesReqID = 1;
	required string TradingSessionID = 2;
	optional string TradingSessionSubID = 3;
	optional int64 TradSesMethod = 4;
	optional int64 TradSesMode = 5;
	optional bool UnsolicitedIndicator = 6;
	required int64 TradSesStatus = 7;
	optional int64 TradSesStatusRejReason = 8;
	optional string TradSesStartTime = 9;
	optional string TradSesOpenTime = 10;
	optional string TradSesPreCloseTime = 11;
	optional string TradSesCloseTime = 12;
	optional string TradSesEndTime = 13;
	optional float TotalVolumeTraded = 14;
	optional string Text = 15;
	optional uint32 EncodedTextLen = 16;
	optional bytes EncodedText = 17;
}

message NewOrderSingle {
	required string ClOrdID = 1;
	optional string SecondaryClOrdID = 2;
	optional string ClOrdLinkID = 3;
	optional string TradeOriginationDate = 4;
	optional string TradeDate = 5;
	optional string Account = 6;
	optional int64 AcctIDSource = 7;
	optional int64 AccountType = 8;
	optional string DayBookingInst = 9;
	optional string BookingUnit = 10;
	optional string PreallocMethod = 11;
	optional string AllocID = 12;
	optional string SettlType = 13;
	optional string SettlDate = 14;
	optional string CashMargin = 15;
	optional string ClearingFeeIndicator = 16;
	optional string HandlInst = 17;
	optional string ExecInst = 18;
	optional float MinQty = 19;
	optional float MaxFloor = 20;
	optional string ExDestination = 21;
	optional string ProcessCode = 22;
	optional float PrevClosePx = 23;
	required string Side = 24;
	optional bool LocateReqd = 25;
	required string TransactTime = 26;
	optional int64 QtyType = 27;
	required string OrdType = 28;
	optional int64 PriceType = 29;
	optional float Price = 30;
	optional float StopPx = 31;
	optional string Currency = 32;
	optional string ComplianceID = 33;
	optional bool SolicitedFlag = 34;
	optional string IOIid = 35;
	optional string QuoteID = 36;
	optional string TimeInForce = 37;
	optional string EffectiveTime = 38;
	optional string ExpireDate = 39;
	optional string ExpireTime = 40;
	optional int64 GTBookingInst = 41;
	optional string OrderCapacity = 42;
	optional string OrderRestrictions = 43;
	optional int64 CustOrderCapacity = 44;
	optional bool ForexReq = 45;
	optional string SettlCurrency = 46;
	optional int64 BookingType = 47;
	optional string Text = 48;
	optional uint32 EncodedTextLen = 49;
	optional bytes EncodedText = 50;
	optional string SettlDate2 = 51;
	optional float OrderQty2 = 52;
	optional float Price2 = 53;
	optional string PositionEffect = 54;
	optional int64 CoveredOrUncovered = 55;
	optional float MaxShow = 56;
	optional int64 TargetStrategy = 57;
	optional string TargetStrategyParameters = 58;
	optional float ParticipationRate = 59;
	optional string CancellationRights = 60;
	optional string MoneyLaunderingStatus = 61;
	optional string RegistID = 62;
	optional string Designation = 63;
	optional uint32 NoAllocs = 64;
	message AllocsGroup {
		optional string AllocAccount = 1;
		optional int64 AllocAcctIDSource = 2;
		optional string AllocSettlCurrency = 3;
		optional string IndividualAllocID = 4;
		optional float AllocQty = 5;
		optional NestedPartiesComponent NestedParties = 6;
	}
	repeated AllocsGroup Allocs = 65;
	optional uint32 NoTradingSessions = 66;
	message TradingSessionsGroup {
		optional string TradingSessionID = 1;
		optional string TradingSessionSubID = 2;
	}
	repeated TradingSessionsGroup TradingSessions = 67;
	optional uint32 NoUnderlyings = 68;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 69;
	optional PartiesComponent Parties = 70;
	required InstrumentComponent Instrument = 71;
	optional FinancingDetailsComponent FinancingDetails = 72;
	optional StipulationsComponent Stipulations = 73;
	required OrderQtyDataComponent OrderQtyData = 74;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 75;
	optional YieldDataComponent YieldData = 76;
	optional CommissionDataComponent CommissionData = 77;
	optional PegInstructionsComponent PegInstructions = 78;
	optional DiscretionInstructionsComponent DiscretionInstructions = 79;
}

message ExecutionReport {
	required string OrderID = 1;
	optional string SecondaryOrderID = 2;
	optional string SecondaryClOrdID = 3;
	optional string SecondaryExecID = 4;
	optional string ClOrdID = 5;
	optional string OrigClOrdID = 6;
	optional string ClOrdLinkID = 7;
	optional string QuoteRespID = 8;
	optional string OrdStatusReqID = 9;
	optional string MassStatusReqID = 10;
	optional int64 TotNumReports = 11;
	optional bool LastRptRequested = 12;
	optional string TradeOriginationDate = 13;
	optional string ListID = 14;
	optional string CrossID = 15;
	optional string OrigCrossID = 16;
	optional int64 CrossType = 17;
	required string ExecID = 18;
	optional string ExecRefID = 19;
	required string ExecType = 20;
	required string OrdStatus = 21;
	optional bool WorkingIndicator = 22;
	optional int64 OrdRejReason = 23;
	optional int64 ExecRestatementReason = 24;
	optional string Account = 25;
	optional int64 AcctIDSource = 26;
	optional int64 AccountType = 27;
	optional string DayBookingInst = 28;
	optional string BookingUnit = 29;
	optional string PreallocMethod = 30;
	optional string SettlType = 31;
	optional string SettlDate = 32;
	optional string CashMargin = 33;
	optional string ClearingFeeIndicator = 34;
	required string Side = 35;
	optional int64 QtyType = 36;
	optional string OrdType = 37;
	optional int64 PriceType = 38;
	optional float Price = 39;
	optional float StopPx = 40;
	optional float PeggedPrice = 41;
	optional float DiscretionPrice = 42;
	optional int64 TargetStrategy = 43;
	optional string TargetStrategyParameters = 44;
	optional float ParticipationRate = 45;
	optional float TargetStrategyPerformance = 46;
	optional string Currency = 47;
	optional string ComplianceID = 48;
	optional bool SolicitedFlag = 49;
	optional string TimeInForce = 50;
	optional string EffectiveTime = 51;
	optional string ExpireDate = 52;
	optional string ExpireTime = 53;
	optional string ExecInst = 54;
	optional string OrderCapacity = 55;
	optional string OrderRestrictions = 56;
	optional int64 CustOrderCapacity = 57;
	optional float LastQty = 58;
	optional float UnderlyingLastQty = 59;
	optional float LastPx = 60;
	optional float UnderlyingLastPx = 61;
	optional float LastParPx = 62;
	optional float LastSpotRate = 63;
	optional float LastForwardPoints = 64;
	optional string LastMkt = 65;
	optional string TradingSessionID = 66;
	optional string TradingSessionSubID = 67;
	optional string TimeBracket = 68;
	optional string LastCapacity = 69;
	required float LeavesQty = 70;
	required float CumQty = 71;
	required float AvgPx = 72;
	optional float DayOrderQty = 73;
	optional float DayCumQty = 74;
	optional float DayAvgPx = 75;
	optional int64 GTBookingInst = 76;
	optional string TradeDate = 77;
	optional string TransactTime = 78;
	optional bool ReportToExch = 79;
	optional float GrossTradeAmt = 80;
	optional int64 NumDaysInterest = 81;
	optional string ExDate = 82;
	optional float AccruedInterestRate = 83;
	optional float AccruedInterestAmt = 84;
	optional float InterestAtMaturity = 85;
	optional float EndAccruedInterestAmt = 86;
	optional float StartCash = 87;
	optional float EndCash = 88;
	optional bool TradedFlatSwitch = 89;
	optional string BasisFeatureDate = 90;
	optional float BasisFeaturePrice = 91;
	optional float Concession = 92;
	optional float TotalTakedown = 93;
	optional float NetMoney = 94;
	optional float SettlCurrAmt = 95;
	optional string SettlCurrency = 96;
	optional float SettlCurrFxRate = 97;
	optional string SettlCurrFxRateCalc = 98;
	optional string HandlInst = 99;
	optional float MinQty = 100;
	optional float MaxFloor = 101;
	optional string PositionEffect = 102;
	optional float MaxShow = 103;
	optional int64 BookingType = 104;
	optional string Text = 105;
	optional uint32 EncodedTextLen = 106;
	optional bytes EncodedText = 107;
	optional string SettlDate2 = 108;
	optional float OrderQty2 = 109;
	optional float LastForwardPoints2 = 110;
	optional string MultiLegReportingType = 111;
	optional string CancellationRights = 112;
	optional string MoneyLaunderingStatus = 113;
	optional string RegistID = 114;
	optional string Designation = 115;
	optional string TransBkdTime = 116;
	optional string ExecValuationPoint = 117;
	optional string ExecPriceType = 118;
	optional float ExecPriceAdjustment = 119;
	optional int64 PriorityIndicator = 120;
	optional float PriceImprovement = 121;
	optional int64 LastLiquidityInd = 122;
	optional bool CopyMsgIndicator = 123;
	optional uint32 NoContraBrokers = 124;
	message ContraBrokersGroup {
		optional string ContraBroker = 1;
		optional string ContraTrader = 2;
		optional float ContraTradeQty = 3;
		optional string ContraTradeTime = 4;
		optional string ContraLegRefID = 5;
	}
	repeated ContraBrokersGroup ContraBrokers = 125;
	optional uint32 NoUnderlyings = 126;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 127;
	optional uint32 NoContAmts = 128;
	message ContAmtsGroup {
		optional int64 ContAmtType = 1;
		optional float ContAmtValue = 2;
		optional string ContAmtCurr = 3;
	}
	repeated ContAmtsGroup ContAmts = 129;
	optional uint32 NoLegs = 130;
	message LegsGroup {
		optional float LegQty = 1;
		optional int64 LegSwapType = 2;
		optional string LegPositionEffect = 3;
		optional int64 LegCoveredOrUncovered = 4;
		optional string LegRefID = 5;
		optional float LegPrice = 6;
		optional string LegSettlType = 7;
		optional string LegSettlDate = 8;
		optional float LegLastPx = 9;
		optional InstrumentLegComponent InstrumentLeg = 10;
		optional LegStipulationsComponent LegStipulations = 11;
		optional NestedPartiesComponent NestedParties = 12;
	}
	repeated LegsGroup Legs = 131;
	optional uint32 NoMiscFees = 132;
	message MiscFeesGroup {
		optional float MiscFeeAmt = 1;
		optional string MiscFeeCurr = 2;
		optional string MiscFeeType = 3;
		optional int64 MiscFeeBasis = 4;
	}
	repeated MiscFeesGroup MiscFees = 133;
	optional PartiesComponent Parties = 134;
	required InstrumentComponent Instrument = 135;
	optional FinancingDetailsComponent FinancingDetails = 136;
	optional StipulationsComponent Stipulations = 137;
	optional OrderQtyDataComponent OrderQtyData = 138;
	optional PegInstructionsComponent PegInstructions = 139;
	optional DiscretionInstructionsComponent DiscretionInstructions = 140;
	optional CommissionDataComponent CommissionData = 141;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 142;
	optional YieldDataComponent YieldData = 143;
}

message DontKnowTrade {
	required string OrderID = 1;
	optional string SecondaryOrderID = 2;
	required string ExecID = 3;
	required string DKReason = 4;
	required string Side = 5;
	optional float LastQty = 6;
	optional float LastPx = 7;
	optional string Text = 8;
	optional uint32 EncodedTextLen = 9;
	optional bytes EncodedText = 10;
	optional uint32 NoUnderlyings = 11;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 12;
	optional uint32 NoLegs = 13;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 14;
	required InstrumentComponent Instrument = 15;
	required OrderQtyDataComponent OrderQtyData = 16;
}

message OrderCancelReplaceRequest {
	optional string OrderID = 1;
	optional string TradeOriginationDate = 2;
	optional string TradeDate = 3;
	required string OrigClOrdID = 4;
	required string ClOrdID = 5;
	optional string SecondaryClOrdID = 6;
	optional string ClOrdLinkID = 7;
	optional string ListID = 8;
	optional string OrigOrdModTime = 9;
	optional string Account = 10;
	optional int64 AcctIDSource = 11;
	optional int64 AccountType = 12;
	optional string DayBookingInst = 13;
	optional string BookingUnit = 14;
	optional string PreallocMethod = 15;
	optional string AllocID = 16;
	optional string SettlType = 17;
	optional string SettlDate = 18;
	optional string CashMargin = 19;
	optional string ClearingFeeIndicator = 20;
	optional string HandlInst = 21;
	optional string ExecInst = 22;
	optional float MinQty = 23;
	optional float MaxFloor = 24;
	optional string ExDestination = 25;
	required string Side = 26;
	required string TransactTime = 27;
	optional int64 QtyType = 28;
	required string OrdType = 29;
	optional int64 PriceType = 30;
	optional float Price = 31;
	optional float StopPx = 32;
	optional int64 TargetStrategy = 33;
	optional string TargetStrategyParameters = 34;
	optional float ParticipationRate = 35;
	optional string ComplianceID = 36;
	optional bool SolicitedFlag = 37;
	optional string Currency = 38;
	optional string TimeInForce = 39;
	optional string EffectiveTime = 40;
	optional string ExpireDate = 41;
	optional string ExpireTime = 42;
	optional int64 GTBookingInst = 43;
	optional string OrderCapacity = 44;
	optional string OrderRestrictions = 45;
	optional int64 CustOrderCapacity = 46;
	optional bool ForexReq = 47;
	optional string SettlCurrency = 48;
	optional int64 BookingType = 49;
	optional string Text = 50;
	optional uint32 EncodedTextLen = 51;
	optional bytes EncodedText = 52;
	optional string SettlDate2 = 53;
	optional float OrderQty2 = 54;
	optional float Price2 = 55;
	optional string PositionEffect = 56;
	optional int64 CoveredOrUncovered = 57;
	optional float MaxShow = 58;
	optional bool LocateReqd = 59;
	optional string CancellationRights = 60;
	optional string MoneyLaunderingStatus = 61;
	optional string RegistID = 62;
	optional string Designation = 63;
	optional uint32 NoAllocs = 64;
	message AllocsGroup {
		optional string AllocAccount = 1;
		optional int64 AllocAcctIDSource = 2;
		optional string AllocSettlCurrency = 3;
		optional string IndividualAllocID = 4;
		optional float AllocQty = 5;
		optional NestedPartiesComponent NestedParties = 6;
	}
	repeated AllocsGroup Allocs = 65;
	optional uint32 NoTradingSessions = 66;
	message TradingSessionsGroup {
		optional string TradingSessionID = 1;
		optional string TradingSessionSubID = 2;
	}
	repeated TradingSessionsGroup TradingSessions = 67;
	optional uint32 NoUnderlyings = 68;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 69;
	optional PartiesComponent Parties = 70;
	required InstrumentComponent Instrument = 71;
	optional FinancingDetailsComponent FinancingDetails = 72;
	required OrderQtyDataComponent OrderQtyData = 73;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 74;
	optional YieldDataComponent YieldData = 75;
	optional PegInstructionsComponent PegInstructions = 76;
	optional DiscretionInstructionsComponent DiscretionInstructions = 77;
	optional CommissionDataComponent CommissionData = 78;
}

message OrderCancelRequest {
	required string OrigClOrdID = 1;
	optional string OrderID = 2;
	required string ClOrdID = 3;
	optional string SecondaryClOrdID = 4;
	optional string ClOrdLinkID = 5;
	optional string ListID = 6;
	optional string OrigOrdModTime = 7;
	optional string Account = 8;
	optional int64 AcctIDSource = 9;
	optional int64 AccountType = 10;
	required string Side = 11;
	required string TransactTime = 12;
	optional string ComplianceID = 13;
	optional string Text = 14;
	optional uint32 EncodedTextLen = 15;
	optional bytes EncodedText = 16;
	optional uint32 NoUnderlyings = 17;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 18;
	optional PartiesComponent Parties = 19;
	required InstrumentComponent Instrument = 20;
	optional FinancingDetailsComponent FinancingDetails = 21;
	required OrderQtyDataComponent OrderQtyData = 22;
}

message OrderCancelReject {
	required string OrderID = 1;
	optional string SecondaryOrderID = 2;
	optional string SecondaryClOrdID = 3;
	required string ClOrdID = 4;
	optional string ClOrdLinkID = 5;
	required string OrigClOrdID = 6;
	required string OrdStatus = 7;
	optional bool WorkingIndicator = 8;
	optional string OrigOrdModTime = 9;
	optional string ListID = 10;
	optional string Account = 11;
	optional int64 AcctIDSource = 12;
	optional int64 AccountType = 13;
	optional string TradeOriginationDate = 14;
	optional string TradeDate = 15;
	optional string TransactTime = 16;
	required string CxlRejResponseTo = 17;
	optional int64 CxlRejReason = 18;
	optional string Text = 19;
	optional uint32 EncodedTextLen = 20;
	optional bytes EncodedText = 21;
}

message OrderStatusRequest {
	optional string OrderID = 1;
	required string ClOrdID = 2;
	optional string SecondaryClOrdID = 3;
	optional string ClOrdLinkID = 4;
	optional string OrdStatusReqID = 5;
	optional string Account = 6;
	optional int64 AcctIDSource = 7;
	required string Side = 8;
	optional uint32 NoUnderlyings = 9;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 10;
	optional PartiesComponent Parties = 11;
	required InstrumentComponent Instrument = 12;
	optional FinancingDetailsComponent FinancingDetails = 13;
}

message OrderMassCancelRequest {
	required string ClOrdID = 1;
	optional string SecondaryClOrdID = 2;
	required string MassCancelRequestType = 3;
	optional string TradingSessionID = 4;
	optional string TradingSessionSubID = 5;
	optional string Side = 6;
	required string TransactTime = 7;
	optional string Text = 8;
	optional uint32 EncodedTextLen = 9;
	optional bytes EncodedText = 10;
	optional InstrumentComponent Instrument = 11;
	optional UnderlyingInstrumentComponent UnderlyingInstrument = 12;
}

message OrderMassCancelReport {
	optional string ClOrdID = 1;
	optional string SecondaryClOrdID = 2;
	required string OrderID = 3;
	optional string SecondaryOrderID = 4;
	required string MassCancelRequestType = 5;
	required string MassCancelResponse = 6;
	optional string MassCancelRejectReason = 7;
	optional int64 TotalAffectedOrders = 8;
	optional string TradingSessionID = 9;
	optional string TradingSessionSubID = 10;
	optional string Side = 11;
	optional string TransactTime = 12;
	optional string Text = 13;
	optional uint32 EncodedTextLen = 14;
	optional bytes EncodedText = 15;
	optional int64 NoAffectedOrders = 16;
	message AffectedOrdersGroup {
		optional string OrigClOrdID = 1;
		optional string AffectedOrderID = 2;
		optional string AffectedSecondaryOrderID = 3;
	}
	repeated AffectedOrdersGroup AffectedOrders = 17;
	optional InstrumentComponent Instrument = 18;
	optional UnderlyingInstrumentComponent UnderlyingInstrument = 19;
}

message OrderMassStatusRequest {
	required string MassStatusReqID = 1;
	required int64 MassStatusReqType = 2;
	optional string Account = 3;
	optional int64 AcctIDSource = 4;
	optional string TradingSessionID = 5;
	optional string TradingSessionSubID = 6;
	optional string Side = 7;
	optional PartiesComponent Parties = 8;
	optional InstrumentComponent Instrument = 9;
	optional UnderlyingInstrumentComponent UnderlyingInstrument = 10;
}

message NewOrderCross {
	required string CrossID = 1;
	required int64 CrossType = 2;
	required int64 CrossPrioritization = 3;
	optional string SettlType = 4;
	optional string SettlDate = 5;
	optional string HandlInst = 6;
	optional string ExecInst = 7;
	optional float MinQty = 8;
	optional float MaxFloor = 9;
	optional string ExDestination = 10;
	optional string ProcessCode = 11;
	optional float PrevClosePx = 12;
	optional bool LocateReqd = 13;
	required string TransactTime = 14;
	required string OrdType = 15;
	optional int64 PriceType = 16;
	optional float Price = 17;
	optional float StopPx = 18;
	optional string Currency = 19;
	optional string ComplianceID = 20;
	optional string IOIid = 21;
	optional string QuoteID = 22;
	optional string TimeInForce = 23;
	optional string EffectiveTime = 24;
	optional string ExpireDate = 25;
	optional string ExpireTime = 26;
	optional int64 GTBookingInst = 27;
	optional float MaxShow = 28;
	optional int64 TargetStrategy = 29;
	optional string TargetStrategyParameters = 30;
	optional float ParticipationRate = 31;
	optional string CancellationRights = 32;
	optional string MoneyLaunderingStatus = 33;
	optional string RegistID = 34;
	optional string Designation = 35;
	required uint32 NoSides = 36;
	message SidesGroup {
		required string Side = 1;
		required string ClOrdID = 2;
		optional string SecondaryClOrdID = 3;
		optional string ClOrdLinkID = 4;
		optional string TradeOriginationDate = 5;
		optional string TradeDate = 6;
		optional string Account = 7;
		optional int64 AcctIDSource = 8;
		optional int64 AccountType = 9;
		optional string DayBookingInst = 10;
		optional string BookingUnit = 11;
		optional string PreallocMethod = 12;
		optional string AllocID = 13;
		optional int64 QtyType = 14;
		optional string OrderCapacity = 15;
		optional string OrderRestrictions = 16;
		optional int64 CustOrderCapacity = 17;
		optional bool ForexReq = 18;
		optional string SettlCurrency = 19;
		optional int64 BookingType = 20;
		optional string Text = 21;
		optional uint32 EncodedTextLen = 22;
		optional bytes EncodedText = 23;
		optional string PositionEffect = 24;
		optional int64 CoveredOrUncovered = 25;
		optional string CashMargin = 26;
		optional string ClearingFeeIndicator = 27;
		optional bool SolicitedFlag = 28;
		optional string SideComplianceID = 29;
		optional uint32 NoAllocs = 30;
		message AllocsGroup {
			optional string AllocAccount = 1;
			optional int64 AllocAcctIDSource = 2;
			optional string AllocSettlCurrency = 3;
			optional string IndividualAllocID = 4;
			optional float AllocQty = 5;
			optional NestedPartiesComponent NestedParties = 6;
		}
		repeated AllocsGroup Allocs = 31;
		optional PartiesComponent Parties = 32;
		required OrderQtyDataComponent OrderQtyData = 33;
		optional CommissionDataComponent CommissionData = 34;
	}
	repeated SidesGroup Sides = 37;
	optional uint32 NoUnderlyings = 38;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 39;
	optional uint32 NoLegs = 40;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 41;
	optional uint32 NoTradingSessions = 42;
	message TradingSessionsGroup {
		optional string TradingSessionID = 1;
		optional string TradingSessionSubID = 2;
	}
	repeated TradingSessionsGroup TradingSessions = 43;
	required InstrumentComponent Instrument = 44;
	optional StipulationsComponent Stipulations = 45;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 46;
	optional YieldDataComponent YieldData = 47;
	optional PegInstructionsComponent PegInstructions = 48;
	optional DiscretionInstructionsComponent DiscretionInstructions = 49;
}

message CrossOrderCancelReplaceRequest {
	optional string OrderID = 1;
	required string CrossID = 2;
	required string OrigCrossID = 3;
	required int64 CrossType = 4;
	required int64 CrossPrioritization = 5;
	optional string SettlType = 6;
	optional string SettlDate = 7;
	optional string HandlInst = 8;
	optional string ExecInst = 9;
	optional float MinQty = 10;
	optional float MaxFloor = 11;
	optional string ExDestination = 12;
	optional string ProcessCode = 13;
	optional float PrevClosePx = 14;
	optional bool LocateReqd = 15;
	required string TransactTime = 16;
	required string OrdType = 17;
	optional int64 PriceType = 18;
	optional float Price = 19;
	optional float StopPx = 20;
	optional string Currency = 21;
	optional string ComplianceID = 22;
	optional string IOIid = 23;
	optional string QuoteID = 24;
	optional string TimeInForce = 25;
	optional string EffectiveTime = 26;
	optional string ExpireDate = 27;
	optional string ExpireTime = 28;
	optional int64 GTBookingInst = 29;
	optional float MaxShow = 30;
	optional int64 TargetStrategy = 31;
	optional string TargetStrategyParameters = 32;
	optional float ParticipationRate = 33;
	optional string CancellationRights = 34;
	optional string MoneyLaunderingStatus = 35;
	optional string RegistID = 36;
	optional string Designation = 37;
	required uint32 NoSides = 38;
	message SidesGroup {
		required string Side = 1;
		required string OrigClOrdID = 2;
		required string ClOrdID = 3;
		optional string SecondaryClOrdID = 4;
		optional string ClOrdLinkID = 5;
		optional string OrigOrdModTime = 6;
		optional string TradeOriginationDate = 7;
		optional string TradeDate = 8;
		optional string Account = 9;
		optional int64 AcctIDSource = 10;
		optional int64 AccountType = 11;
		optional string DayBookingInst = 12;
		optional string BookingUnit = 13;
		optional string PreallocMethod = 14;
		optional string AllocID = 15;
		optional int64 QtyType = 16;
		optional string OrderCapacity = 17;
		optional string OrderRestrictions = 18;
		optional int64 CustOrderCapacity = 19;
		optional bool ForexReq = 20;
		optional string SettlCurrency = 21;
		optional int64 BookingType = 22;
		optional string Text = 23;
		optional uint32 EncodedTextLen = 24;
		optional bytes EncodedText = 25;
		optional string PositionEffect = 26;
		optional int64 CoveredOrUncovered = 27;
		optional string CashMargin = 28;
		optional string ClearingFeeIndicator = 29;
		optional bool SolicitedFlag = 30;
		optional string SideComplianceID = 31;
		optional uint32 NoAllocs = 32;
		message AllocsGroup {
			optional string AllocAccount = 1;
			optional int64 AllocAcctIDSource = 2;
			optional string AllocSettlCurrency = 3;
			optional string IndividualAllocID = 4;
			optional float AllocQty = 5;
			optional NestedPartiesComponent NestedParties = 6;
		}
		repeated AllocsGroup Allocs = 33;
		optional PartiesComponent Parties = 34;
		required OrderQtyDataComponent OrderQtyData = 35;
		optional CommissionDataComponent CommissionData = 36;
	}
	repeated SidesGroup Sides = 39;
	optional uint32 NoUnderlyings = 40;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 41;
	optional uint32 NoLegs = 42;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 43;
	optional uint32 NoTradingSessions = 44;
	message TradingSessionsGroup {
		optional string TradingSessionID = 1;
		optional string TradingSessionSubID = 2;
	}
	repeated TradingSessionsGroup TradingSessions = 45;
	required InstrumentComponent Instrument = 46;
	optional StipulationsComponent Stipulations = 47;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 48;
	optional YieldDataComponent YieldData = 49;
	optional PegInstructionsComponent PegInstructions = 50;
	optional DiscretionInstructionsComponent DiscretionInstructions = 51;
}

message CrossOrderCancelRequest {
	optional string OrderID = 1;
	required string CrossID = 2;
	required string OrigCrossID = 3;
	required int64 CrossType = 4;
	required int64 CrossPrioritization = 5;
	required string TransactTime = 6;
	required uint32 NoSides = 7;
	message SidesGroup {
		required string Side = 1;
		required string OrigClOrdID = 2;
		required string ClOrdID = 3;
		optional string SecondaryClOrdID = 4;
		optional string ClOrdLinkID = 5;
		optional string OrigOrdModTime = 6;
		optional string TradeOriginationDate = 7;
		optional string TradeDate = 8;
		optional string ComplianceID = 9;
		optional string Text = 10;
		optional uint32 EncodedTextLen = 11;
		optional bytes EncodedText = 12;
		optional PartiesComponent Parties = 13;
		required OrderQtyDataComponent OrderQtyData = 14;
	}
	repeated SidesGroup Sides = 8;
	optional uint32 NoUnderlyings = 9;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 10;
	optional uint32 NoLegs = 11;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 12;
	required InstrumentComponent Instrument = 13;
}

message NewOrderMultileg {
	required string ClOrdID = 1;
	optional string SecondaryClOrdID = 2;
	optional string ClOrdLinkID = 3;
	optional string TradeOriginationDate = 4;
	optional string TradeDate = 5;
	optional string Account = 6;
	optional int64 AcctIDSource = 7;
	optional int64 AccountType = 8;
	optional string DayBookingInst = 9;
	optional string BookingUnit = 10;
	optional string PreallocMethod = 11;
	optional string AllocID = 12;
	optional string SettlType = 13;
	optional string SettlDate = 14;
	optional string CashMargin = 15;
	optional string ClearingFeeIndicator = 16;
	optional string HandlInst = 17;
	optional string ExecInst = 18;
	optional float MinQty = 19;
	optional float MaxFloor = 20;
	optional string ExDestination = 21;
	optional string ProcessCode = 22;
	required string Side = 23;
	optional float PrevClosePx = 24;
	optional bool LocateReqd = 25;
	required string TransactTime = 26;
	optional int64 QtyType = 27;
	required string OrdType = 28;
	optional int64 PriceType = 29;
	optional float Price = 30;
	optional float StopPx = 31;
	optional string Currency = 32;
	optional string ComplianceID = 33;
	optional bool SolicitedFlag = 34;
	optional string IOIid = 35;
	optional string QuoteID = 36;
	optional string TimeInForce = 37;
	optional string EffectiveTime = 38;
	optional string ExpireDate = 39;
	optional string ExpireTime = 40;
	optional int64 GTBookingInst = 41;
	optional string OrderCapacity = 42;
	optional string OrderRestrictions = 43;
	optional int64 CustOrderCapacity = 44;
	optional bool ForexReq = 45;
	optional string SettlCurrency = 46;
	optional int64 BookingType = 47;
	optional string Text = 48;
	optional uint32 EncodedTextLen = 49;
	optional bytes EncodedText = 50;
	optional string PositionEffect = 51;
	optional int64 CoveredOrUncovered = 52;
	optional float MaxShow = 53;
	optional int64 TargetStrategy = 54;
	optional string TargetStrategyParameters = 55;
	optional float ParticipationRate = 56;
	optional string CancellationRights = 57;
	optional string MoneyLaunderingStatus = 58;
	optional string RegistID = 59;
	optional string Designation = 60;
	optional int64 MultiLegRptTypeReq = 61;
	optional uint32 NoAllocs = 62;
	message AllocsGroup {
		optional string AllocAccount = 1;
		optional int64 AllocAcctIDSource = 2;
		optional string AllocSettlCurrency = 3;
		optional string IndividualAllocID = 4;
		optional float AllocQty = 5;
		optional NestedParties3Component NestedParties3 = 6;
	}
	repeated AllocsGroup Allocs = 63;
	optional uint32 NoTradingSessions = 64;
	message TradingSessionsGroup {
		optional string TradingSessionID = 1;
		optional string TradingSessionSubID = 2;
	}
	repeated TradingSessionsGroup TradingSessions = 65;
	optional uint32 NoUnderlyings = 66;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 67;
	required uint32 NoLegs = 68;
	message LegsGroup {
		optional float LegQty = 1;
		optional int64 LegSwapType = 2;
		optional string LegPositionEffect = 3;
		optional int64 LegCoveredOrUncovered = 4;
		optional string LegRefID = 5;
		optional float LegPrice = 6;
		optional string LegSettlType = 7;
		optional string LegSettlDate = 8;
		optional uint32 NoLegAllocs = 9;
		message LegAllocsGroup {
			optional string LegAllocAccount = 1;
			optional string LegIndividualAllocID = 2;
			optional float LegAllocQty = 3;
			optional string LegAllocAcctIDSource = 4;
			optional string LegSettlCurrency = 5;
			optional NestedParties2Component NestedParties2 = 6;
		}
		repeated LegAllocsGroup LegAllocs = 10;
		optional InstrumentLegComponent InstrumentLeg = 11;
		optional LegStipulationsComponent LegStipulations = 12;
		optional NestedPartiesComponent NestedParties = 13;
	}
	repeated LegsGroup Legs = 69;
	optional PartiesComponent Parties = 70;
	required InstrumentComponent Instrument = 71;
	required OrderQtyDataComponent OrderQtyData = 72;
	optional CommissionDataComponent CommissionData = 73;
	optional PegInstructionsComponent PegInstructions = 74;
	optional DiscretionInstructionsComponent DiscretionInstructions = 75;
}

message MultilegOrderCancelReplaceRequest {
	optional string OrderID = 1;
	required string OrigClOrdID = 2;
	required string ClOrdID = 3;
	optional string SecondaryClOrdID = 4;
	optional string ClOrdLinkID = 5;
	optional string OrigOrdModTime = 6;
	optional string TradeOriginationDate = 7;
	optional string TradeDate = 8;
	optional string Account = 9;
	optional int64 AcctIDSource = 10;
	optional int64 AccountType = 11;
	optional string DayBookingInst = 12;
	optional string BookingUnit = 13;
	optional string PreallocMethod = 14;
	optional string AllocID = 15;
	optional string SettlType = 16;
	optional string SettlDate = 17;
	optional string CashMargin = 18;
	optional string ClearingFeeIndicator = 19;
	optional string HandlInst = 20;
	optional string ExecInst = 21;
	optional float MinQty = 22;
	optional float MaxFloor = 23;
	optional string ExDestination = 24;
	optional string ProcessCode = 25;
	required string Side = 26;
	optional float PrevClosePx = 27;
	optional bool LocateReqd = 28;
	required string TransactTime = 29;
	optional int64 QtyType = 30;
	required string OrdType = 31;
	optional int64 PriceType = 32;
	optional float Price = 33;
	optional float StopPx = 34;
	optional string Currency = 35;
	optional string ComplianceID = 36;
	optional bool SolicitedFlag = 37;
	optional string IOIid = 38;
	optional string QuoteID = 39;
	optional string TimeInForce = 40;
	optional string EffectiveTime = 41;
	optional string ExpireDate = 42;
	optional string ExpireTime = 43;
	optional int64 GTBookingInst = 44;
	optional string OrderCapacity = 45;
	optional string OrderRestrictions = 46;
	optional int64 CustOrderCapacity = 47;
	optional bool ForexReq = 48;
	optional string SettlCurrency = 49;
	optional int64 BookingType = 50;
	optional string Text = 51;
	optional uint32 EncodedTextLen = 52;
	optional bytes EncodedText = 53;
	optional string PositionEffect = 54;
	optional int64 CoveredOrUncovered = 55;
	optional float MaxShow = 56;
	optional int64 TargetStrategy = 57;
	optional string TargetStrategyParameters = 58;
	optional float ParticipationRate = 59;
	optional string CancellationRights = 60;
	optional string MoneyLaunderingStatus = 61;
	optional string RegistID = 62;
	optional string Designation = 63;
	optional int64 MultiLegRptTypeReq = 64;
	optional uint32 NoAllocs = 65;
	message AllocsGroup {
		optional string AllocAccount = 1;
		optional int64 AllocAcctIDSource = 2;
		optional string AllocSettlCurrency = 3;
		optional string IndividualAllocID = 4;
		optional float AllocQty = 5;
		optional NestedParties3Component NestedParties3 = 6;
	}
	repeated AllocsGroup Allocs = 66;
	optional uint32 NoTradingSessions = 67;
	message TradingSessionsGroup {
		optional string TradingSessionID = 1;
		optional string TradingSessionSubID = 2;
	}
	repeated TradingSessionsGroup TradingSessions = 68;
	optional uint32 NoUnderlyings = 69;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 70;
	required uint32 NoLegs = 71;
	message LegsGroup {
		optional float LegQty = 1;
		optional int64 LegSwapType = 2;
		optional string LegPositionEffect = 3;
		optional int64 LegCoveredOrUncovered = 4;
		optional string LegRefID = 5;
		optional float LegPrice = 6;
		optional string LegSettlType = 7;
		optional string LegSettlDate = 8;
		optional uint32 NoLegAllocs = 9;
		message LegAllocsGroup {
			optional string LegAllocAccount = 1;
			optional string LegIndividualAllocID = 2;
			optional float LegAllocQty = 3;
			optional string LegAllocAcctIDSource = 4;
			optional string LegSettlCurrency = 5;
			optional NestedParties2Component NestedParties2 = 6;
		}
		repeated LegAllocsGroup LegAllocs = 10;
		optional InstrumentLegComponent InstrumentLeg = 11;
		optional LegStipulationsComponent LegStipulations = 12;
		optional NestedPartiesComponent NestedParties = 13;
	}
	repeated LegsGroup Legs = 72;
	optional PartiesComponent Parties = 73;
	required InstrumentComponent Instrument = 74;
	required OrderQtyDataComponent OrderQtyData = 75;
	optional CommissionDataComponent CommissionData = 76;
	optional PegInstructionsComponent PegInstructions = 77;
	optional DiscretionInstructionsComponent DiscretionInstructions = 78;
}

message BidRequest {
	optional string BidID = 1;
	required string ClientBidID = 2;
	required string BidRequestTransType = 3;
	optional string ListName = 4;
	required int64 TotNoRelatedSym = 5;
	required int64 BidType = 6;
	optional int64 NumTickets = 7;
	optional string Currency = 8;
	optional float SideValue1 = 9;
	optional float SideValue2 = 10;
	optional int64 LiquidityIndType = 11;
	optional float WtAverageLiquidity = 12;
	optional bool ExchangeForPhysical = 13;
	optional float OutMainCntryUIndex = 14;
	optional float CrossPercent = 15;
	optional int64 ProgRptReqs = 16;
	optional int64 ProgPeriodInterval = 17;
	optional int64 IncTaxInd = 18;
	optional bool ForexReq = 19;
	optional int64 NumBidders = 20;
	optional string TradeDate = 21;
	required string BidTradeType = 22;
	required string BasisPxType = 23;
	optional string StrikeTime = 24;
	optional string Text = 25;
	optional uint32 EncodedTextLen = 26;
	optional bytes EncodedText = 27;
	optional uint32 NoBidDescriptors = 28;
	message BidDescriptorsGroup {
		optional int64 BidDescriptorType = 1;
		optional string BidDescriptor = 2;
		optional int64 SideValueInd = 3;
		optional float LiquidityValue = 4;
		optional int64 LiquidityNumSecurities = 5;
		optional float LiquidityPctLow = 6;
		optional float LiquidityPctHigh = 7;
		optional float EFPTrackingError = 8;
		optional float FairValue = 9;
		optional float OutsideIndexPct = 10;
		optional float ValueOfFutures = 11;
	}
	repeated BidDescriptorsGroup BidDescriptors = 29;
	optional uint32 NoBidComponents = 30;
	message BidComponentsGroup {
		optional string ListID = 1;
		optional string Side = 2;
		optional string TradingSessionID = 3;
		optional string TradingSessionSubID = 4;
		optional int64 NetGrossInd = 5;
		optional string SettlType = 6;
		optional string SettlDate = 7;
		optional string Account = 8;
		optional int64 AcctIDSource = 9;
	}
	repeated BidComponentsGroup BidComponents = 31;
}

message BidResponse {
	optional string BidID = 1;
	optional string ClientBidID = 2;
	required uint32 NoBidComponents = 3;
	message BidComponentsGroup {
		optional string ListID = 1;
		optional string Country = 2;
		optional string Side = 3;
		optional float Price = 4;
		optional int64 PriceType = 5;
		optional float FairValue = 6;
		optional int64 NetGrossInd = 7;
		optional string SettlType = 8;
		optional string SettlDate = 9;
		optional string TradingSessionID = 10;
		optional string TradingSessionSubID = 11;
		optional string Text = 12;
		optional uint32 EncodedTextLen = 13;
		optional bytes EncodedText = 14;
		required CommissionDataComponent CommissionData = 15;
	}
	repeated BidComponentsGroup BidComponents = 4;
}

message NewOrderList {
	required string ListID = 1;
	optional string BidID = 2;
	optional string ClientBidID = 3;
	optional int64 ProgRptReqs = 4;
	required int64 BidType = 5;
	optional int64 ProgPeriodInterval = 6;
	optional string CancellationRights = 7;
	optional string MoneyLaunderingStatus = 8;
	optional string RegistID = 9;
	optional string ListExecInstType = 10;
	optional string ListExecInst = 11;
	optional uint32 EncodedListExecInstLen = 12;
	optional bytes EncodedListExecInst = 13;
	optional float AllowableOneSidednessPct = 14;
	optional float AllowableOneSidednessValue = 15;
	optional string AllowableOneSidednessCurr = 16;
	required int64 TotNoOrders = 17;
	optional bool LastFragment = 18;
	required uint32 NoOrders = 19;
	message OrdersGroup {
		required string ClOrdID = 1;
		optional string SecondaryClOrdID = 2;
		required int64 ListSeqNo = 3;
		optional string ClOrdLinkID = 4;
		optional string SettlInstMode = 5;
		optional string TradeOriginationDate = 6;
		optional string TradeDate = 7;
		optional string Account = 8;
		optional int64 AcctIDSource = 9;
		optional int64 AccountType = 10;
		optional string DayBookingInst = 11;
		optional string BookingUnit = 12;
		optional string AllocID = 13;
		optional string PreallocMethod = 14;
		optional string SettlType = 15;
		optional string SettlDate = 16;
		optional string CashMargin = 17;
		optional string ClearingFeeIndicator = 18;
		optional string HandlInst = 19;
		optional string ExecInst = 20;
		optional float MinQty = 21;
		optional float MaxFloor = 22;
		optional string ExDestination = 23;
		optional string ProcessCode = 24;
		optional float PrevClosePx = 25;
		required string Side = 26;
		optional int64 SideValueInd = 27;
		optional bool LocateReqd = 28;
		optional string TransactTime = 29;
		optional int64 QtyType = 30;
		optional string OrdType = 31;
		optional int64 PriceType = 32;
		optional float Price = 33;
		optional float StopPx = 34;
		optional string Currency = 35;
		optional string ComplianceID = 36;
		optional bool SolicitedFlag = 37;
		optional string IOIid = 38;
		optional string QuoteID = 39;
		optional string TimeInForce = 40;
		optional string EffectiveTime = 41;
		optional string ExpireDate = 42;
		optional string ExpireTime = 43;
		optional int64 GTBookingInst = 44;
		optional string OrderCapacity = 45;
		optional string OrderRestrictions = 46;
		optional int64 CustOrderCapacity = 47;
		optional bool ForexReq = 48;
		optional string SettlCurrency = 49;
		optional int64 BookingType = 50;
		optional string Text = 51;
		optional uint32 EncodedTextLen = 52;
		optional bytes EncodedText = 53;
		optional string SettlDate2 = 54;
		optional float OrderQty2 = 55;
		optional float Price2 = 56;
		optional string PositionEffect = 57;
		optional int64 CoveredOrUncovered = 58;
		optional float MaxShow = 59;
		optional int64 TargetStrategy = 60;
		optional string TargetStrategyParameters = 61;
		optional float ParticipationRate = 62;
		optional string Designation = 63;
		optional uint32 NoAllocs = 64;
		message AllocsGroup {
			optional string AllocAccount = 1;
			optional int64 AllocAcctIDSource = 2;
			optional string AllocSettlCurrency = 3;
			optional string IndividualAllocID = 4;
			optional float AllocQty = 5;
			optional NestedPartiesComponent NestedParties = 6;
		}
		repeated AllocsGroup Allocs = 65;
		optional uint32 NoTradingSessions = 66;
		message TradingSessionsGroup {
			optional string TradingSessionID = 1;
			optional string TradingSessionSubID = 2;
		}
		repeated TradingSessionsGroup TradingSessions = 67;
		optional uint32 NoUnderlyings = 68;
		message UnderlyingsGroup {
			optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
		}
		repeated UnderlyingsGroup Underlyings = 69;
		optional PartiesComponent Parties = 70;
		required InstrumentComponent Instrument = 71;
		optional StipulationsComponent Stipulations = 72;
		required OrderQtyDataComponent OrderQtyData = 73;
		optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 74;
		optional YieldDataComponent YieldData = 75;
		optional CommissionDataComponent CommissionData = 76;
		optional PegInstructionsComponent PegInstructions = 77;
		optional DiscretionInstructionsComponent DiscretionInstructions = 78;
	}
	repeated OrdersGroup Orders = 20;
}

message ListStrikePrice {
	required string ListID = 1;
	required int64 TotNoStrikes = 2;
	optional bool LastFragment = 3;
	required uint32 NoStrikes = 4;
	message StrikesGroup {
		required InstrumentComponent Instrument = 1;
	}
	repeated StrikesGroup Strikes = 5;
	optional uint32 NoUnderlyings = 6;
	message UnderlyingsGroup {
		optional float PrevClosePx = 1;
		optional string ClOrdID = 2;
		optional string SecondaryClOrdID = 3;
		optional string Side = 4;
		required float Price = 5;
		optional string Currency = 6;
		optional string Text = 7;
		optional uint32 EncodedTextLen = 8;
		optional bytes EncodedText = 9;
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 10;
	}
	repeated UnderlyingsGroup Underlyings = 7;
}

message ListStatus {
	required string ListID = 1;
	required int64 ListStatusType = 2;
	required uint32 NoRpts = 3;
	required int64 ListOrderStatus = 4;
	required int64 RptSeq = 5;
	optional string ListStatusText = 6;
	optional uint32 EncodedListStatusTextLen = 7;
	optional bytes EncodedListStatusText = 8;
	optional string TransactTime = 9;
	required int64 TotNoOrders = 10;
	optional bool LastFragment = 11;
	required uint32 NoOrders = 12;
	message OrdersGroup {
		required string ClOrdID = 1;
		optional string SecondaryClOrdID = 2;
		required float CumQty = 3;
		required string OrdStatus = 4;
		optional bool WorkingIndicator = 5;
		required float LeavesQty = 6;
		required float CxlQty = 7;
		required float AvgPx = 8;
		optional int64 OrdRejReason = 9;
		optional string Text = 10;
		optional uint32 EncodedTextLen = 11;
		optional bytes EncodedText = 12;
	}
	repeated OrdersGroup Orders = 13;
}

message ListExecute {
	required string ListID = 1;
	optional string ClientBidID = 2;
	optional string BidID = 3;
	required string TransactTime = 4;
	optional string Text = 5;
	optional uint32 EncodedTextLen = 6;
	optional bytes EncodedText = 7;
}

message ListCancelRequest {
	required string ListID = 1;
	required string TransactTime = 2;
	optional string TradeOriginationDate = 3;
	optional string TradeDate = 4;
	optional string Text = 5;
	optional uint32 EncodedTextLen = 6;
	optional bytes EncodedText = 7;
}

message ListStatusRequest {
	required string ListID = 1;
	optional string Text = 2;
	optional uint32 EncodedTextLen = 3;
	optional bytes EncodedText = 4;
}

message AllocationInstruction {
	required string AllocID = 1;
	required string AllocTransType = 2;
	required int64 AllocType = 3;
	optional string SecondaryAllocID = 4;
	optional string RefAllocID = 5;
	optional int64 AllocCancReplaceReason = 6;
	optional int64 AllocIntermedReqType = 7;
	optional string AllocLinkID = 8;
	optional int64 AllocLinkType = 9;
	optional string BookingRefID = 10;
	required int64 AllocNoOrdersType = 11;
	optional bool PreviouslyReported = 12;
	optional bool ReversalIndicator = 13;
	optional string MatchType = 14;
	required string Side = 15;
	required float Quantity = 16;
	optional int64 QtyType = 17;
	optional string LastMkt = 18;
	optional string TradeOriginationDate = 19;
	optional string TradingSessionID = 20;
	optional string TradingSessionSubID = 21;
	optional int64 PriceType = 22;
	required float AvgPx = 23;
	optional float AvgParPx = 24;
	optional string Currency = 25;
	optional int64 AvgPxPrecision = 26;
	required string TradeDate = 27;
	optional string TransactTime = 28;
	optional string SettlType = 29;
	optional string SettlDate = 30;
	optional int64 BookingType = 31;
	optional float GrossTradeAmt = 32;
	optional float Concession = 33;
	optional float TotalTakedown = 34;
	optional float NetMoney = 35;
	optional string PositionEffect = 36;
	optional bool AutoAcceptIndicator = 37;
	optional string Text = 38;
	optional uint32 EncodedTextLen = 39;
	optional bytes EncodedText = 40;
	optional int64 NumDaysInterest = 41;
	optional float AccruedInterestRate = 42;
	optional float AccruedInterestAmt = 43;
	optional float TotalAccruedInterestAmt = 44;
	optional float InterestAtMaturity = 45;
	optional float EndAccruedInterestAmt = 46;
	optional float StartCash = 47;
	optional float EndCash = 48;
	optional bool LegalConfirm = 49;
	optional int64 TotNoAllocs = 50;
	optional bool LastFragment = 51;
	optional uint32 NoOrders = 52;
	message OrdersGroup {
		optional string ClOrdID = 1;
		optional string OrderID = 2;
		optional string SecondaryOrderID = 3;
		optional string SecondaryClOrdID = 4;
		optional string ListID = 5;
		optional float OrderQty = 6;
		optional float OrderAvgPx = 7;
		optional float OrderBookingQty = 8;
		optional NestedParties2Component NestedParties2 = 9;
	}
	repeated OrdersGroup Orders = 53;
	optional uint32 NoExecs = 54;
	message ExecsGroup {
		optional float LastQty = 1;
		optional string ExecID = 2;
		optional string SecondaryExecID = 3;
		optional float LastPx = 4;
		optional float LastParPx = 5;
		optional string LastCapacity = 6;
	}
	repeated ExecsGroup Execs = 55;
	optional uint32 NoUnderlyings = 56;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 57;
	optional uint32 NoLegs = 58;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 59;
	required uint32 NoAllocs = 60;
	message AllocsGroup {
		required string AllocAccount = 1;
		optional int64 AllocAcctIDSource = 2;
		optional string MatchStatus = 3;
		optional float AllocPrice = 4;
		required float AllocQty = 5;
		optional string IndividualAllocID = 6;
		optional string ProcessCode = 7;
		optional bool NotifyBrokerOfCredit = 8;
		optional int64 AllocHandlInst = 9;
		optional string AllocText = 10;
		optional uint32 EncodedAllocTextLen = 11;
		optional bytes EncodedAllocText = 12;
		optional float AllocAvgPx = 13;
		optional float AllocNetMoney = 14;
		optional float SettlCurrAmt = 15;
		optional float AllocSettlCurrAmt = 16;
		optional string SettlCurrency = 17;
		optional string AllocSettlCurrency = 18;
		optional float SettlCurrFxRate = 19;
		optional string SettlCurrFxRateCalc = 20;
		optional float AccruedInterestAmt = 21;
		optional float AllocAccruedInterestAmt = 22;
		optional float AllocInterestAtMaturity = 23;
		optional string SettlInstMode = 24;
		optional int64 NoClearingInstructions = 25;
		optional int64 ClearingInstruction = 26;
		optional string ClearingFeeIndicator = 27;
		optional int64 AllocSettlInstType = 28;
		optional uint32 NoMiscFees = 29;
		message MiscFeesGroup {
			optional float MiscFeeAmt = 1;
			optional string MiscFeeCurr = 2;
			optional string MiscFeeType = 3;
			optional int64 MiscFeeBasis = 4;
		}
		repeated MiscFeesGroup MiscFees = 30;
		optional NestedPartiesComponent NestedParties = 31;
		optional CommissionDataComponent CommissionData = 32;
		optional SettlInstructionsDataComponent SettlInstructionsData = 33;
	}
	repeated AllocsGroup Allocs = 61;
	required InstrumentComponent Instrument = 62;
	optional InstrumentExtensionComponent InstrumentExtension = 63;
	optional FinancingDetailsComponent FinancingDetails = 64;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 65;
	optional PartiesComponent Parties = 66;
	optional StipulationsComponent Stipulations = 67;
	optional YieldDataComponent YieldData = 68;
}

message AllocationInstructionAck {
	required string AllocID = 1;
	optional string SecondaryAllocID = 2;
	optional string TradeDate = 3;
	required string TransactTime = 4;
	required int64 AllocStatus = 5;
	optional int64 AllocRejCode = 6;
	optional int64 AllocType = 7;
	optional int64 AllocIntermedReqType = 8;
	optional string MatchStatus = 9;
	optional int64 Product = 10;
	optional string SecurityType = 11;
	optional string Text = 12;
	optional uint32 EncodedTextLen = 13;
	optional bytes EncodedText = 14;
	optional uint32 NoAllocs = 15;
	message AllocsGroup {
		optional string AllocAccount = 1;
		optional int64 AllocAcctIDSource = 2;
		optional float AllocPrice = 3;
		optional string IndividualAllocID = 4;
		optional int64 IndividualAllocRejCode = 5;
		optional string AllocText = 6;
		optional uint32 EncodedAllocTextLen = 7;
		optional bytes EncodedAllocText = 8;
	}
	repeated AllocsGroup Allocs = 16;
	optional PartiesComponent Parties = 17;
}

message AllocationReport {
	required string AllocReportID = 1;
	optional string AllocID = 2;
	required string AllocTransType = 3;
	optional string AllocReportRefID = 4;
	optional int64 AllocCancReplaceReason = 5;
	optional string SecondaryAllocID = 6;
	required int64 AllocReportType = 7;
	required int64 AllocStatus = 8;
	optional int64 AllocRejCode = 9;
	optional string RefAllocID = 10;
	optional int64 AllocIntermedReqType = 11;
	optional string AllocLinkID = 12;
	optional int64 AllocLinkType = 13;
	optional string BookingRefID = 14;
	required int64 AllocNoOrdersType = 15;
	optional bool PreviouslyReported = 16;
	optional bool ReversalIndicator = 17;
	optional string MatchType = 18;
	required string Side = 19;
	required float Quantity = 20;
	optional int64 QtyType = 21;
	optional string LastMkt = 22;
	optional string TradeOriginationDate = 23;
	optional string TradingSessionID = 24;
	optional string TradingSessionSubID = 25;
	optional int64 PriceType = 26;
	required float AvgPx = 27;
	optional float AvgParPx = 28;
	optional string Currency = 29;
	optional int64 AvgPxPrecision = 30;
	required string TradeDate = 31;
	optional string TransactTime = 32;
	optional string SettlType = 33;
	optional string SettlDate = 34;
	optional int64 BookingType = 35;
	optional float GrossTradeAmt = 36;
	optional float Concession = 37;
	optional float TotalTakedown = 38;
	optional float NetMoney = 39;
	optional string PositionEffect = 40;
	optional bool AutoAcceptIndicator = 41;
	optional string Text = 42;
	optional uint32 EncodedTextLen = 43;
	optional bytes EncodedText = 44;
	optional int64 NumDaysInterest = 45;
	optional float AccruedInterestRate = 46;
	optional float AccruedInterestAmt = 47;
	optional float TotalAccruedInterestAmt = 48;
	optional float InterestAtMaturity = 49;
	optional float EndAccruedInterestAmt = 50;
	optional float StartCash = 51;
	optional float EndCash = 52;
	optional bool LegalConfirm = 53;
	optional int64 TotNoAllocs = 54;
	optional bool LastFragment = 55;
	optional uint32 NoOrders = 56;
	message OrdersGroup {
		optional string ClOrdID = 1;
		optional string OrderID = 2;
		optional string SecondaryOrderID = 3;
		optional string SecondaryClOrdID = 4;
		optional string ListID = 5;
		optional float OrderQty = 6;
		optional float OrderAvgPx = 7;
		optional float OrderBookingQty = 8;
		optional NestedParties2Component NestedParties2 = 9;
	}
	repeated OrdersGroup Orders = 57;
	optional uint32 NoExecs = 58;
	message ExecsGroup {
		optional float LastQty = 1;
		optional string ExecID = 2;
		optional string SecondaryExecID = 3;
		optional float LastPx = 4;
		optional float LastParPx = 5;
		optional string LastCapacity = 6;
	}
	repeated ExecsGroup Execs = 59;
	optional uint32 NoUnderlyings = 60;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 61;
	optional uint32 NoLegs = 62;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 63;
	required uint32 NoAllocs = 64;
	message AllocsGroup {
		required string AllocAccount = 1;
		optional int64 AllocAcctIDSource = 2;
		optional string MatchStatus = 3;
		optional float AllocPrice = 4;
		required float AllocQty = 5;
		optional string IndividualAllocID = 6;
		optional string ProcessCode = 7;
		optional bool NotifyBrokerOfCredit = 8;
		optional int64 AllocHandlInst = 9;
		optional string AllocText = 10;
		optional uint32 EncodedAllocTextLen = 11;
		optional bytes EncodedAllocText = 12;
		optional float AllocAvgPx = 13;
		optional float AllocNetMoney = 14;
		optional float SettlCurrAmt = 15;
		optional float AllocSettlCurrAmt = 16;
		optional string SettlCurrency = 17;
		optional string AllocSettlCurrency = 18;
		optional float SettlCurrFxRate = 19;
		optional string SettlCurrFxRateCalc = 20;
		optional float AllocAccruedInterestAmt = 21;
		optional float AllocInterestAtMaturity = 22;
		optional string ClearingFeeIndicator = 23;
		optional int64 AllocSettlInstType = 24;
		optional uint32 NoMiscFees = 25;
		message MiscFeesGroup {
			optional float MiscFeeAmt = 1;
			optional string MiscFeeCurr = 2;
			optional string MiscFeeType = 3;
			optional int64 MiscFeeBasis = 4;
		}
		repeated MiscFeesGroup MiscFees = 26;
		optional int64 NoClearingInstructions = 27;
		message ClearingInstructionsGroup {
			optional int64 ClearingInstruction = 1;
		}
		repeated ClearingInstructionsGroup ClearingInstructions = 28;
		optional NestedPartiesComponent NestedParties = 29;
		optional CommissionDataComponent CommissionData = 30;
		optional SettlInstructionsDataComponent SettlInstructionsData = 31;
	}
	repeated AllocsGroup Allocs = 65;
	required InstrumentComponent Instrument = 66;
	optional InstrumentExtensionComponent InstrumentExtension = 67;
	optional FinancingDetailsComponent FinancingDetails = 68;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 69;
	optional PartiesComponent Parties = 70;
	optional StipulationsComponent Stipulations = 71;
	optional YieldDataComponent YieldData = 72;
}

message AllocationReportAck {
	required string AllocReportID = 1;
	required string AllocID = 2;
	optional string SecondaryAllocID = 3;
	optional string TradeDate = 4;
	required string TransactTime = 5;
	required int64 AllocStatus = 6;
	optional int64 AllocRejCode = 7;
	optional int64 AllocReportType = 8;
	optional int64 AllocIntermedReqType = 9;
	optional string MatchStatus = 10;
	optional int64 Product = 11;
	optional string SecurityType = 12;
	optional string Text = 13;
	optional uint32 EncodedTextLen = 14;
	optional bytes EncodedText = 15;
	optional uint32 NoAllocs = 16;
	message AllocsGroup {
		optional string AllocAccount = 1;
		optional int64 AllocAcctIDSource = 2;
		optional float AllocPrice = 3;
		optional string IndividualAllocID = 4;
		optional int64 IndividualAllocRejCode = 5;
		optional string AllocText = 6;
		optional uint32 EncodedAllocTextLen = 7;
		optional bytes EncodedAllocText = 8;
	}
	repeated AllocsGroup Allocs = 17;
	optional PartiesComponent Parties = 18;
}

message Confirmation {
	required string ConfirmID = 1;
	optional string ConfirmRefID = 2;
	optional string ConfirmReqID = 3;
	required int64 ConfirmTransType = 4;
	required int64 ConfirmType = 5;
	optional bool CopyMsgIndicator = 6;
	optional bool LegalConfirm = 7;
	required int64 ConfirmStatus = 8;
	optional string AllocID = 9;
	optional string SecondaryAllocID = 10;
	optional string IndividualAllocID = 11;
	required string TransactTime = 12;
	required string TradeDate = 13;
	required float AllocQty = 14;
	optional int64 QtyType = 15;
	required string Side = 16;
	optional string Currency = 17;
	optional string LastMkt = 18;
	required string AllocAccount = 19;
	optional int64 AllocAcctIDSource = 20;
	optional int64 AllocAccountType = 21;
	required float AvgPx = 22;
	optional int64 AvgPxPrecision = 23;
	optional int64 PriceType = 24;
	optional float AvgParPx = 25;
	optional float ReportedPx = 26;
	optional string Text = 27;
	optional uint32 EncodedTextLen = 28;
	optional bytes EncodedText = 29;
	optional string ProcessCode = 30;
	required float GrossTradeAmt = 31;
	optional int64 NumDaysInterest = 32;
	optional string ExDate = 33;
	optional float AccruedInterestRate = 34;
	optional float AccruedInterestAmt = 35;
	optional float InterestAtMaturity = 36;
	optional float EndAccruedInterestAmt = 37;
	optional float StartCash = 38;
	optional float EndCash = 39;
	optional float Concession = 40;
	optional float TotalTakedown = 41;
	required float NetMoney = 42;
	optional float MaturityNetMoney = 43;
	optional float SettlCurrAmt = 44;
	optional string SettlCurrency = 45;
	optional float SettlCurrFxRate = 46;
	optional string SettlCurrFxRateCalc = 47;
	optional string SettlType = 48;
	optional string SettlDate = 49;
	optional float SharedCommission = 50;
	optional uint32 NoOrders = 51;
	message OrdersGroup {
		optional string ClOrdID = 1;
		optional string OrderID = 2;
		optional string SecondaryOrderID = 3;
		optional string SecondaryClOrdID = 4;
		optional string ListID = 5;
		optional float OrderQty = 6;
		optional float OrderAvgPx = 7;
		optional float OrderBookingQty = 8;
		optional NestedParties2Component NestedParties2 = 9;
	}
	repeated OrdersGroup Orders = 52;
	required uint32 NoUnderlyings = 53;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 54;
	required uint32 NoLegs = 55;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 56;
	required uint32 NoCapacities = 57;
	message CapacitiesGroup {
		required string OrderCapacity = 1;
		optional string OrderRestrictions = 2;
		required float OrderCapacityQty = 3;
	}
	repeated CapacitiesGroup Capacities = 58;
	optional uint32 NoMiscFees = 59;
	message MiscFeesGroup {
		optional float MiscFeeAmt = 1;
		optional string MiscFeeCurr = 2;
		optional string MiscFeeType = 3;
		optional int64 MiscFeeBasis = 4;
	}
	repeated MiscFeesGroup MiscFees = 60;
	optional PartiesComponent Parties = 61;
	optional TrdRegTimestampsComponent TrdRegTimestamps = 62;
	required InstrumentComponent Instrument = 63;
	optional InstrumentExtensionComponent InstrumentExtension = 64;
	optional FinancingDetailsComponent FinancingDetails = 65;
	optional YieldDataComponent YieldData = 66;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 67;
	optional SettlInstructionsDataComponent SettlInstructionsData = 68;
	optional CommissionDataComponent CommissionData = 69;
	optional StipulationsComponent Stipulations = 70;
}

message ConfirmationAck {
	required string ConfirmID = 1;
	required string TradeDate = 2;
	required string TransactTime = 3;
	required int64 AffirmStatus = 4;
	optional int64 ConfirmRejReason = 5;
	optional string MatchStatus = 6;
	optional string Text = 7;
	optional uint32 EncodedTextLen = 8;
	optional bytes EncodedText = 9;
}

message ConfirmationRequest {
	required string ConfirmReqID = 1;
	required int64 ConfirmType = 2;
	optional string AllocID = 3;
	optional string SecondaryAllocID = 4;
	optional string IndividualAllocID = 5;
	required string TransactTime = 6;
	optional string AllocAccount = 7;
	optional int64 AllocAcctIDSource = 8;
	optional int64 AllocAccountType = 9;
	optional string Text = 10;
	optional uint32 EncodedTextLen = 11;
	optional bytes EncodedText = 12;
	optional uint32 NoOrders = 13;
	message OrdersGroup {
		optional string ClOrdID = 1;
		optional string OrderID = 2;
		optional string SecondaryOrderID = 3;
		optional string SecondaryClOrdID = 4;
		optional string ListID = 5;
		optional float OrderQty = 6;
		optional float OrderAvgPx = 7;
		optional float OrderBookingQty = 8;
		optional NestedParties2Component NestedParties2 = 9;
	}
	repeated OrdersGroup Orders = 14;
}

message SettlementInstructions {
	required string SettlInstMsgID = 1;
	optional string SettlInstReqID = 2;
	required string SettlInstMode = 3;
	optional int64 SettlInstReqRejCode = 4;
	optional string Text = 5;
	optional uint32 EncodedTextLen = 6;
	optional bytes EncodedText = 7;
	optional string SettlInstSource = 8;
	optional string ClOrdID = 9;
	required string TransactTime = 10;
	optional uint32 NoSettlInst = 11;
	message SettlInstGroup {
		optional string SettlInstID = 1;
		optional string SettlInstTransType = 2;
		optional string SettlInstRefID = 3;
		optional string Side = 4;
		optional int64 Product = 5;
		optional string SecurityType = 6;
		optional string CFICode = 7;
		optional string EffectiveTime = 8;
		optional string ExpireTime = 9;
		optional string LastUpdateTime = 10;
		optional int64 PaymentMethod = 11;
		optional string PaymentRef = 12;
		optional string CardHolderName = 13;
		optional string CardNumber = 14;
		optional string CardStartDate = 15;
		optional string CardExpDate = 16;
		optional string CardIssNum = 17;
		optional string PaymentDate = 18;
		optional string PaymentRemitterID = 19;
		optional PartiesComponent Parties = 20;
		optional SettlInstructionsDataComponent SettlInstructionsData = 21;
	}
	repeated SettlInstGroup SettlInst = 12;
}

message SettlementInstructionRequest {
	required string SettlInstReqID = 1;
	required string TransactTime = 2;
	optional string AllocAccount = 3;
	optional int64 AllocAcctIDSource = 4;
	optional string Side = 5;
	optional int64 Product = 6;
	optional string SecurityType = 7;
	optional string CFICode = 8;
	optional string EffectiveTime = 9;
	optional string ExpireTime = 10;
	optional string LastUpdateTime = 11;
	optional int64 StandInstDbType = 12;
	optional string StandInstDbName = 13;
	optional string StandInstDbID = 14;
	optional PartiesComponent Parties = 15;
}

message TradeCaptureReportRequest {
	required string TradeRequestID = 1;
	required int64 TradeRequestType = 2;
	optional string SubscriptionRequestType = 3;
	optional string TradeReportID = 4;
	optional string SecondaryTradeReportID = 5;
	optional string ExecID = 6;
	optional string ExecType = 7;
	optional string OrderID = 8;
	optional string ClOrdID = 9;
	optional string MatchStatus = 10;
	optional int64 TrdType = 11;
	optional int64 TrdSubType = 12;
	optional string TransferReason = 13;
	optional int64 SecondaryTrdType = 14;
	optional string TradeLinkID = 15;
	optional string TrdMatchID = 16;
	optional string ClearingBusinessDate = 17;
	optional string TradingSessionID = 18;
	optional string TradingSessionSubID = 19;
	optional string TimeBracket = 20;
	optional string Side = 21;
	optional string MultiLegReportingType = 22;
	optional string TradeInputSource = 23;
	optional string TradeInputDevice = 24;
	optional int64 ResponseTransportType = 25;
	optional string ResponseDestination = 26;
	optional string Text = 27;
	optional uint32 EncodedTextLen = 28;
	optional bytes EncodedText = 29;
	optional uint32 NoUnderlyings = 30;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 31;
	optional uint32 NoLegs = 32;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 33;
	optional int64 NoDates = 34;
	message DatesGroup {
		optional string TradeDate = 1;
		optional string TransactTime = 2;
	}
	repeated DatesGroup Dates = 35;
	optional PartiesComponent Parties = 36;
	optional InstrumentComponent Instrument = 37;
	optional InstrumentExtensionComponent InstrumentExtension = 38;
	optional FinancingDetailsComponent FinancingDetails = 39;
}

message TradeCaptureReportRequestAck {
	required string TradeRequestID = 1;
	required int64 TradeRequestType = 2;
	optional string SubscriptionRequestType = 3;
	optional int64 TotNumTradeReports = 4;
	required int64 TradeRequestResult = 5;
	required int64 TradeRequestStatus = 6;
	optional string MultiLegReportingType = 7;
	optional int64 ResponseTransportType = 8;
	optional string ResponseDestination = 9;
	optional string Text = 10;
	optional uint32 EncodedTextLen = 11;
	optional bytes EncodedText = 12;
	optional uint32 NoUnderlyings = 13;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 14;
	optional uint32 NoLegs = 15;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 16;
	optional InstrumentComponent Instrument = 17;
}

message TradeCaptureReport {
	required string TradeReportID = 1;
	optional int64 TradeReportTransType = 2;
	optional int64 TradeReportType = 3;
	optional string TradeRequestID = 4;
	optional int64 TrdType = 5;
	optional int64 TrdSubType = 6;
	optional int64 SecondaryTrdType = 7;
	optional string TransferReason = 8;
	optional string ExecType = 9;
	optional int64 TotNumTradeReports = 10;
	optional bool LastRptRequested = 11;
	optional bool UnsolicitedIndicator = 12;
	optional string SubscriptionRequestType = 13;
	optional string TradeReportRefID = 14;
	optional string SecondaryTradeReportRefID = 15;
	optional string SecondaryTradeReportID = 16;
	optional string TradeLinkID = 17;
	optional string TrdMatchID = 18;
	optional string ExecID = 19;
	optional string OrdStatus = 20;
	optional string SecondaryExecID = 21;
	optional int64 ExecRestatementReason = 22;
	required bool PreviouslyReported = 23;
	optional int64 PriceType = 24;
	optional int64 QtyType = 25;
	optional string UnderlyingTradingSessionID = 26;
	optional string UnderlyingTradingSessionSubID = 27;
	required float LastQty = 28;
	required float LastPx = 29;
	optional float LastParPx = 30;
	optional float LastSpotRate = 31;
	optional float LastForwardPoints = 32;
	optional string LastMkt = 33;
	required string TradeDate = 34;
	optional string ClearingBusinessDate = 35;
	optional float AvgPx = 36;
	optional int64 AvgPxIndicator = 37;
	optional string MultiLegReportingType = 38;
	optional string TradeLegRefID = 39;
	required string TransactTime = 40;
	optional string SettlType = 41;
	optional string SettlDate = 42;
	optional string MatchStatus = 43;
	optional string MatchType = 44;
	optional bool CopyMsgIndicator = 45;
	optional bool PublishTrdIndicator = 46;
	optional int64 ShortSaleReason = 47;
	optional uint32 NoUnderlyings = 48;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 49;
	optional uint32 NoLegs = 50;
	message LegsGroup {
		optional float LegQty = 1;
		optional int64 LegSwapType = 2;
		optional string LegPositionEffect = 3;
		optional int64 LegCoveredOrUncovered = 4;
		optional string LegRefID = 5;
		optional float LegPrice = 6;
		optional string LegSettlType = 7;
		optional string LegSettlDate = 8;
		optional float LegLastPx = 9;
		optional InstrumentLegComponent InstrumentLeg = 10;
		optional LegStipulationsComponent LegStipulations = 11;
		optional NestedPartiesComponent NestedParties = 12;
	}
	repeated LegsGroup Legs = 51;
	required uint32 NoSides = 52;
	message SidesGroup {
		required string Side = 1;
		required string OrderID = 2;
		optional string SecondaryOrderID = 3;
		optional string ClOrdID = 4;
		optional string SecondaryClOrdID = 5;
		optional string ListID = 6;
		optional string Account = 7;
		optional int64 AcctIDSource = 8;
		optional int64 AccountType = 9;
		optional string ProcessCode = 10;
		optional bool OddLot = 11;
		optional string ClearingFeeIndicator = 12;
		optional string TradeInputSource = 13;
		optional string TradeInputDevice = 14;
		optional string OrderInputDevice = 15;
		optional string Currency = 16;
		optional string ComplianceID = 17;
		optional bool SolicitedFlag = 18;
		optional string OrderCapacity = 19;
		optional string OrderRestrictions = 20;
		optional int64 CustOrderCapacity = 21;
		optional string OrdType = 22;
		optional string ExecInst = 23;
		optional string TransBkdTime = 24;
		optional string TradingSessionID = 25;
		optional string TradingSessionSubID = 26;
		optional string TimeBracket = 27;
		optional float GrossTradeAmt = 28;
		optional int64 NumDaysInterest = 29;
		optional string ExDate = 30;
		optional float AccruedInterestRate = 31;
		optional float AccruedInterestAmt = 32;
		optional float InterestAtMaturity = 33;
		optional float EndAccruedInterestAmt = 34;
		optional float StartCash = 35;
		optional float EndCash = 36;
		optional float Concession = 37;
		optional float TotalTakedown = 38;
		optional float NetMoney = 39;
		optional float SettlCurrAmt = 40;
		optional string SettlCurrency = 41;
		optional float SettlCurrFxRate = 42;
		optional string SettlCurrFxRateCalc = 43;
		optional string PositionEffect = 44;
		optional string Text = 45;
		optional uint32 EncodedTextLen = 46;
		optional bytes EncodedText = 47;
		optional int64 SideMultiLegReportingType = 48;
		optional string ExchangeRule = 49;
		optional int64 TradeAllocIndicator = 50;
		optional string PreallocMethod = 51;
		optional string AllocID = 52;
		optional int64 NoClearingInstructions = 53;
		message ClearingInstructionsGroup {
			optional int64 ClearingInstruction = 1;
		}
		repeated ClearingInstructionsGroup ClearingInstructions = 54;
		optional uint32 NoContAmts = 55;
		message ContAmtsGroup {
			optional int64 ContAmtType = 1;
			optional float ContAmtValue = 2;
			optional string ContAmtCurr = 3;
		}
		repeated ContAmtsGroup ContAmts = 56;
		optional uint32 NoMiscFees = 57;
		message MiscFeesGroup {
			optional float MiscFeeAmt = 1;
			optional string MiscFeeCurr = 2;
			optional string MiscFeeType = 3;
			optional int64 MiscFeeBasis = 4;
		}
		repeated MiscFeesGroup MiscFees = 58;
		optional uint32 NoAllocs = 59;
		message AllocsGroup {
			optional string AllocAccount = 1;
			optional int64 AllocAcctIDSource = 2;
			optional string AllocSettlCurrency = 3;
			optional string IndividualAllocID = 4;
			optional float AllocQty = 5;
			optional NestedParties2Component NestedParties2 = 6;
		}
		repeated AllocsGroup Allocs = 60;
		optional PartiesComponent Parties = 61;
		optional CommissionDataComponent CommissionData = 62;
		optional StipulationsComponent Stipulations = 63;
	}
	repeated SidesGroup Sides = 53;
	required InstrumentComponent Instrument = 54;
	optional FinancingDetailsComponent FinancingDetails = 55;
	optional OrderQtyDataComponent OrderQtyData = 56;
	optional YieldDataComponent YieldData = 57;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 58;
	optional PositionAmountDataComponent PositionAmountData = 59;
	optional TrdRegTimestampsComponent TrdRegTimestamps = 60;
}

message TradeCaptureReportAck {
	required string TradeReportID = 1;
	optional int64 TradeReportTransType = 2;
	optional int64 TradeReportType = 3;
	optional int64 TrdType = 4;
	optional int64 TrdSubType = 5;
	optional int64 SecondaryTrdType = 6;
	optional string TransferReason = 7;
	required string ExecType = 8;
	optional string TradeReportRefID = 9;
	optional string SecondaryTradeReportRefID = 10;
	optional int64 TrdRptStatus = 11;
	optional int64 TradeReportRejectReason = 12;
	optional string SecondaryTradeReportID = 13;
	optional string SubscriptionRequestType = 14;
	optional string TradeLinkID = 15;
	optional string TrdMatchID = 16;
	optional string ExecID = 17;
	optional string SecondaryExecID = 18;
	optional string TransactTime = 19;
	optional int64 ResponseTransportType = 20;
	optional string ResponseDestination = 21;
	optional string Text = 22;
	optional uint32 EncodedTextLen = 23;
	optional bytes EncodedText = 24;
	optional string ClearingFeeIndicator = 25;
	optional string OrderCapacity = 26;
	optional string OrderRestrictions = 27;
	optional int64 CustOrderCapacity = 28;
	optional string Account = 29;
	optional int64 AcctIDSource = 30;
	optional int64 AccountType = 31;
	optional string PositionEffect = 32;
	optional string PreallocMethod = 33;
	optional uint32 NoLegs = 34;
	message LegsGroup {
		optional float LegQty = 1;
		optional int64 LegSwapType = 2;
		optional string LegPositionEffect = 3;
		optional int64 LegCoveredOrUncovered = 4;
		optional string LegRefID = 5;
		optional float LegPrice = 6;
		optional string LegSettlType = 7;
		optional string LegSettlDate = 8;
		optional float LegLastPx = 9;
		optional InstrumentLegComponent InstrumentLeg = 10;
		optional LegStipulationsComponent LegStipulations = 11;
		optional NestedPartiesComponent NestedParties = 12;
	}
	repeated LegsGroup Legs = 35;
	optional uint32 NoAllocs = 36;
	message AllocsGroup {
		optional string AllocAccount = 1;
		optional int64 AllocAcctIDSource = 2;
		optional string AllocSettlCurrency = 3;
		optional string IndividualAllocID = 4;
		optional float AllocQty = 5;
		optional NestedParties2Component NestedParties2 = 6;
	}
	repeated AllocsGroup Allocs = 37;
	required InstrumentComponent Instrument = 38;
	optional TrdRegTimestampsComponent TrdRegTimestamps = 39;
}

message RegistrationInstructions {
	required string RegistID = 1;
	required string RegistTransType = 2;
	required string RegistRefID = 3;
	optional string ClOrdID = 4;
	optional string Account = 5;
	optional int64 AcctIDSource = 6;
	optional string RegistAcctType = 7;
	optional int64 TaxAdvantageType = 8;
	optional string OwnershipType = 9;
	optional uint32 NoRegistDtls = 10;
	message RegistDtlsGroup {
		optional string RegistDtls = 1;
		optional string RegistEmail = 2;
		optional string MailingDtls = 3;
		optional string MailingInst = 4;
		optional int64 OwnerType = 5;
		optional string DateOfBirth = 6;
		optional string InvestorCountryOfResidence = 7;
		optional NestedPartiesComponent NestedParties = 8;
	}
	repeated RegistDtlsGroup RegistDtls = 11;
	optional uint32 NoDistribInsts = 12;
	message DistribInstsGroup {
		optional int64 DistribPaymentMethod = 1;
		optional float DistribPercentage = 2;
		optional string CashDistribCurr = 3;
		optional string CashDistribAgentName = 4;
		optional string CashDistribAgentCode = 5;
		optional string CashDistribAgentAcctNumber = 6;
		optional string CashDistribPayRef = 7;
		optional string CashDistribAgentAcctName = 8;
	}
	repeated DistribInstsGroup DistribInsts = 13;
	optional PartiesComponent Parties = 14;
}

message RegistrationInstructionsResponse {
	required string RegistID = 1;
	required string RegistTransType = 2;
	required string RegistRefID = 3;
	optional string ClOrdID = 4;
	optional string Account = 5;
	optional int64 AcctIDSource = 6;
	required string RegistStatus = 7;
	optional int64 RegistRejReasonCode = 8;
	optional string RegistRejReasonText = 9;
	optional PartiesComponent Parties = 10;
}

message PositionMaintenanceRequest {
	required string PosReqID = 1;
	required int64 PosTransType = 2;
	required int64 PosMaintAction = 3;
	optional string OrigPosReqRefID = 4;
	optional string PosMaintRptRefID = 5;
	required string ClearingBusinessDate = 6;
	optional string SettlSessID = 7;
	optional string SettlSessSubID = 8;
	required string Account = 9;
	optional int64 AcctIDSource = 10;
	required int64 AccountType = 11;
	optional string Currency = 12;
	required string TransactTime = 13;
	optional int64 AdjustmentType = 14;
	optional bool ContraryInstructionIndicator = 15;
	optional bool PriorSpreadIndicator = 16;
	optional float ThresholdAmount = 17;
	optional string Text = 18;
	optional uint32 EncodedTextLen = 19;
	optional bytes EncodedText = 20;
	optional uint32 NoLegs = 21;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 22;
	optional uint32 NoUnderlyings = 23;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 24;
	optional uint32 NoTradingSessions = 25;
	message TradingSessionsGroup {
		optional string TradingSessionID = 1;
		optional string TradingSessionSubID = 2;
	}
	repeated TradingSessionsGroup TradingSessions = 26;
	required PartiesComponent Parties = 27;
	required InstrumentComponent Instrument = 28;
	required PositionQtyComponent PositionQty = 29;
}

message PositionMaintenanceReport {
	required string PosMaintRptID = 1;
	required int64 PosTransType = 2;
	optional string PosReqID = 3;
	required int64 PosMaintAction = 4;
	required string OrigPosReqRefID = 5;
	required int64 PosMaintStatus = 6;
	optional int64 PosMaintResult = 7;
	required string ClearingBusinessDate = 8;
	optional string SettlSessID = 9;
	optional string SettlSessSubID = 10;
	required string Account = 11;
	optional int64 AcctIDSource = 12;
	required int64 AccountType = 13;
	optional string Currency = 14;
	required string TransactTime = 15;
	optional int64 AdjustmentType = 16;
	optional float ThresholdAmount = 17;
	optional string Text = 18;
	optional uint32 EncodedTextLen = 19;
	optional bytes EncodedText = 20;
	optional uint32 NoLegs = 21;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 22;
	optional uint32 NoUnderlyings = 23;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 24;
	optional uint32 NoTradingSessions = 25;
	message TradingSessionsGroup {
		optional string TradingSessionID = 1;
		optional string TradingSessionSubID = 2;
	}
	repeated TradingSessionsGroup TradingSessions = 26;
	optional PartiesComponent Parties = 27;
	required InstrumentComponent Instrument = 28;
	required PositionQtyComponent PositionQty = 29;
	required PositionAmountDataComponent PositionAmountData = 30;
}

message RequestForPositions {
	required string PosReqID = 1;
	required int64 PosReqType = 2;
	optional string MatchStatus = 3;
	optional string SubscriptionRequestType = 4;
	required string Account = 5;
	optional int64 AcctIDSource = 6;
	required int64 AccountType = 7;
	optional string Currency = 8;
	required string ClearingBusinessDate = 9;
	optional string SettlSessID = 10;
	optional string SettlSessSubID = 11;
	required string TransactTime = 12;
	optional int64 ResponseTransportType = 13;
	optional string ResponseDestination = 14;
	optional string Text = 15;
	optional uint32 EncodedTextLen = 16;
	optional bytes EncodedText = 17;
	optional uint32 NoLegs = 18;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 19;
	optional uint32 NoUnderlyings = 20;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 21;
	optional uint32 NoTradingSessions = 22;
	message TradingSessionsGroup {
		optional string TradingSessionID = 1;
		optional string TradingSessionSubID = 2;
	}
	repeated TradingSessionsGroup TradingSessions = 23;
	required PartiesComponent Parties = 24;
	optional InstrumentComponent Instrument = 25;
}

message RequestForPositionsAck {
	required string PosMaintRptID = 1;
	optional string PosReqID = 2;
	optional int64 TotalNumPosReports = 3;
	optional bool UnsolicitedIndicator = 4;
	required int64 PosReqResult = 5;
	required int64 PosReqStatus = 6;
	required string Account = 7;
	optional int64 AcctIDSource = 8;
	required int64 AccountType = 9;
	optional string Currency = 10;
	optional int64 ResponseTransportType = 11;
	optional string ResponseDestination = 12;
	optional string Text = 13;
	optional uint32 EncodedTextLen = 14;
	optional bytes EncodedText = 15;
	optional uint32 NoLegs = 16;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 17;
	optional uint32 NoUnderlyings = 18;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 19;
	required PartiesComponent Parties = 20;
	optional InstrumentComponent Instrument = 21;
}

message PositionReport {
	required string PosMaintRptID = 1;
	optional string PosReqID = 2;
	optional int64 PosReqType = 3;
	optional string SubscriptionRequestType = 4;
	optional int64 TotalNumPosReports = 5;
	optional bool UnsolicitedIndicator = 6;
	required int64 PosReqResult = 7;
	required string ClearingBusinessDate = 8;
	optional string SettlSessID = 9;
	optional string SettlSessSubID = 10;
	required string Account = 11;
	optional int64 AcctIDSource = 12;
	required int64 AccountType = 13;
	optional string Currency = 14;
	required float SettlPrice = 15;
	required int64 SettlPriceType = 16;
	required float PriorSettlPrice = 17;
	optional string RegistStatus = 18;
	optional string DeliveryDate = 19;
	optional string Text = 20;
	optional uint32 EncodedTextLen = 21;
	optional bytes EncodedText = 22;
	optional uint32 NoLegs = 23;
	message LegsGroup {
		optional InstrumentLegComponent InstrumentLeg = 1;
	}
	repeated LegsGroup Legs = 24;
	optional uint32 NoUnderlyings = 25;
	message UnderlyingsGroup {
		required float UnderlyingSettlPrice = 1;
		required int64 UnderlyingSettlPriceType = 2;
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 3;
	}
	repeated UnderlyingsGroup Underlyings = 26;
	required PartiesComponent Parties = 27;
	optional InstrumentComponent Instrument = 28;
	required PositionQtyComponent PositionQty = 29;
	required PositionAmountDataComponent PositionAmountData = 30;
}

message AssignmentReport {
	required string AsgnRptID = 1;
	optional int64 TotNumAssignmentReports = 2;
	optional bool LastRptRequested = 3;
	optional string Account = 4;
	required int64 AccountType = 5;
	optional string Currency = 6;
	optional uint32 NoLegs = 7;
	optional float ThresholdAmount = 8;
	required float SettlPrice = 9;
	required int64 SettlPriceType = 10;
	required float UnderlyingSettlPrice = 11;
	optional string ExpireDate = 12;
	required string AssignmentMethod = 13;
	optional float AssignmentUnit = 14;
	required float OpenInterest = 15;
	required string ExerciseMethod = 16;
	required string SettlSessID = 17;
	required string SettlSessSubID = 18;
	required string ClearingBusinessDate = 19;
	optional string Text = 20;
	optional uint32 EncodedTextLen = 21;
	optional bytes EncodedText = 22;
	optional uint32 NoUnderlyings = 23;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 24;
	required PartiesComponent Parties = 25;
	optional InstrumentComponent Instrument = 26;
	optional InstrumentLegComponent InstrumentLeg = 27;
	required PositionQtyComponent PositionQty = 28;
	required PositionAmountDataComponent PositionAmountData = 29;
}

message CollateralRequest {
	required string CollReqID = 1;
	required int64 CollAsgnReason = 2;
	required string TransactTime = 3;
	optional string ExpireTime = 4;
	optional string Account = 5;
	optional int64 AccountType = 6;
	optional string ClOrdID = 7;
	optional string OrderID = 8;
	optional string SecondaryOrderID = 9;
	optional string SecondaryClOrdID = 10;
	optional string SettlDate = 11;
	optional float Quantity = 12;
	optional int64 QtyType = 13;
	optional string Currency = 14;
	optional uint32 NoLegs = 15;
	optional float MarginExcess = 16;
	optional float TotalNetValue = 17;
	optional float CashOutstanding = 18;
	optional string Side = 19;
	optional float Price = 20;
	optional int64 PriceType = 21;
	optional float AccruedInterestAmt = 22;
	optional float EndAccruedInterestAmt = 23;
	optional float StartCash = 24;
	optional float EndCash = 25;
	optional string TradingSessionID = 26;
	optional string TradingSessionSubID = 27;
	optional string SettlSessID = 28;
	optional string SettlSessSubID = 29;
	optional string ClearingBusinessDate = 30;
	optional string Text = 31;
	optional uint32 EncodedTextLen = 32;
	optional bytes EncodedText = 33;
	optional uint32 NoExecs = 34;
	message ExecsGroup {
		optional string ExecID = 1;
	}
	repeated ExecsGroup Execs = 35;
	optional uint32 NoTrades = 36;
	message TradesGroup {
		optional string TradeReportID = 1;
		optional string SecondaryTradeReportID = 2;
	}
	repeated TradesGroup Trades = 37;
	optional uint32 NoUnderlyings = 38;
	message UnderlyingsGroup {
		optional int64 CollAction = 1;
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 2;
	}
	repeated UnderlyingsGroup Underlyings = 39;
	optional uint32 NoMiscFees = 40;
	message MiscFeesGroup {
		optional float MiscFeeAmt = 1;
		optional string MiscFeeCurr = 2;
		optional string MiscFeeType = 3;
		optional int64 MiscFeeBasis = 4;
	}
	repeated MiscFeesGroup MiscFees = 41;
	optional PartiesComponent Parties = 42;
	optional InstrumentComponent Instrument = 43;
	optional FinancingDetailsComponent FinancingDetails = 44;
	optional InstrumentLegComponent InstrumentLeg = 45;
	optional TrdRegTimestampsComponent TrdRegTimestamps = 46;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 47;
	optional StipulationsComponent Stipulations = 48;
}

message CollateralAssignment {
	required string CollAsgnID = 1;
	optional string CollReqID = 2;
	required int64 CollAsgnReason = 3;
	required int64 CollAsgnTransType = 4;
	optional string CollAsgnRefID = 5;
	required string TransactTime = 6;
	optional string ExpireTime = 7;
	optional string Account = 8;
	optional int64 AccountType = 9;
	optional string ClOrdID = 10;
	optional string OrderID = 11;
	optional string SecondaryOrderID = 12;
	optional string SecondaryClOrdID = 13;
	optional string SettlDate = 14;
	optional float Quantity = 15;
	optional int64 QtyType = 16;
	optional string Currency = 17;
	optional uint32 NoLegs = 18;
	optional float MarginExcess = 19;
	optional float TotalNetValue = 20;
	optional float CashOutstanding = 21;
	optional string Side = 22;
	optional float Price = 23;
	optional int64 PriceType = 24;
	optional float AccruedInterestAmt = 25;
	optional float EndAccruedInterestAmt = 26;
	optional float StartCash = 27;
	optional float EndCash = 28;
	optional string TradingSessionID = 29;
	optional string TradingSessionSubID = 30;
	optional string SettlSessID = 31;
	optional string SettlSessSubID = 32;
	optional string ClearingBusinessDate = 33;
	optional string Text = 34;
	optional uint32 EncodedTextLen = 35;
	optional bytes EncodedText = 36;
	optional uint32 NoExecs = 37;
	message ExecsGroup {
		optional string ExecID = 1;
	}
	repeated ExecsGroup Execs = 38;
	optional uint32 NoTrades = 39;
	message TradesGroup {
		optional string TradeReportID = 1;
		optional string SecondaryTradeReportID = 2;
	}
	repeated TradesGroup Trades = 40;
	optional uint32 NoUnderlyings = 41;
	message UnderlyingsGroup {
		optional int64 CollAction = 1;
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 2;
	}
	repeated UnderlyingsGroup Underlyings = 42;
	optional uint32 NoMiscFees = 43;
	message MiscFeesGroup {
		optional float MiscFeeAmt = 1;
		optional string MiscFeeCurr = 2;
		optional string MiscFeeType = 3;
		optional int64 MiscFeeBasis = 4;
	}
	repeated MiscFeesGroup MiscFees = 44;
	optional PartiesComponent Parties = 45;
	optional InstrumentComponent Instrument = 46;
	optional FinancingDetailsComponent FinancingDetails = 47;
	optional InstrumentLegComponent InstrumentLeg = 48;
	optional TrdRegTimestampsComponent TrdRegTimestamps = 49;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 50;
	optional StipulationsComponent Stipulations = 51;
	optional SettlInstructionsDataComponent SettlInstructionsData = 52;
}

message CollateralResponse {
	required string CollRespID = 1;
	required string CollAsgnID = 2;
	optional string CollReqID = 3;
	required int64 CollAsgnReason = 4;
	optional int64 CollAsgnTransType = 5;
	required int64 CollAsgnRespType = 6;
	optional int64 CollAsgnRejectReason = 7;
	required string TransactTime = 8;
	optional string Account = 9;
	optional int64 AccountType = 10;
	optional string ClOrdID = 11;
	optional string OrderID = 12;
	optional string SecondaryOrderID = 13;
	optional string SecondaryClOrdID = 14;
	optional string SettlDate = 15;
	optional float Quantity = 16;
	optional int64 QtyType = 17;
	optional string Currency = 18;
	optional uint32 NoLegs = 19;
	optional float MarginExcess = 20;
	optional float TotalNetValue = 21;
	optional float CashOutstanding = 22;
	optional string Side = 23;
	optional float Price = 24;
	optional int64 PriceType = 25;
	optional float AccruedInterestAmt = 26;
	optional float EndAccruedInterestAmt = 27;
	optional float StartCash = 28;
	optional float EndCash = 29;
	optional string Text = 30;
	optional uint32 EncodedTextLen = 31;
	optional bytes EncodedText = 32;
	optional uint32 NoExecs = 33;
	message ExecsGroup {
		optional string ExecID = 1;
	}
	repeated ExecsGroup Execs = 34;
	optional uint32 NoTrades = 35;
	message TradesGroup {
		optional string TradeReportID = 1;
		optional string SecondaryTradeReportID = 2;
	}
	repeated TradesGroup Trades = 36;
	optional uint32 NoUnderlyings = 37;
	message UnderlyingsGroup {
		optional int64 CollAction = 1;
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 2;
	}
	repeated UnderlyingsGroup Underlyings = 38;
	optional uint32 NoMiscFees = 39;
	message MiscFeesGroup {
		optional float MiscFeeAmt = 1;
		optional string MiscFeeCurr = 2;
		optional string MiscFeeType = 3;
		optional int64 MiscFeeBasis = 4;
	}
	repeated MiscFeesGroup MiscFees = 40;
	optional PartiesComponent Parties = 41;
	optional InstrumentComponent Instrument = 42;
	optional FinancingDetailsComponent FinancingDetails = 43;
	optional InstrumentLegComponent InstrumentLeg = 44;
	optional TrdRegTimestampsComponent TrdRegTimestamps = 45;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 46;
	optional StipulationsComponent Stipulations = 47;
}

message CollateralReport {
	required string CollRptID = 1;
	optional string CollInquiryID = 2;
	required int64 CollStatus = 3;
	optional int64 TotNumReports = 4;
	optional bool LastRptRequested = 5;
	optional string Account = 6;
	optional int64 AccountType = 7;
	optional string ClOrdID = 8;
	optional string OrderID = 9;
	optional string SecondaryOrderID = 10;
	optional string SecondaryClOrdID = 11;
	optional string SettlDate = 12;
	optional float Quantity = 13;
	optional int64 QtyType = 14;
	optional string Currency = 15;
	optional uint32 NoLegs = 16;
	optional float MarginExcess = 17;
	optional float TotalNetValue = 18;
	optional float CashOutstanding = 19;
	optional string Side = 20;
	optional float Price = 21;
	optional int64 PriceType = 22;
	optional float AccruedInterestAmt = 23;
	optional float EndAccruedInterestAmt = 24;
	optional float StartCash = 25;
	optional float EndCash = 26;
	optional string TradingSessionID = 27;
	optional string TradingSessionSubID = 28;
	optional string SettlSessID = 29;
	optional string SettlSessSubID = 30;
	optional string ClearingBusinessDate = 31;
	optional string Text = 32;
	optional uint32 EncodedTextLen = 33;
	optional bytes EncodedText = 34;
	optional uint32 NoExecs = 35;
	message ExecsGroup {
		optional string ExecID = 1;
	}
	repeated ExecsGroup Execs = 36;
	optional uint32 NoTrades = 37;
	message TradesGroup {
		optional string TradeReportID = 1;
		optional string SecondaryTradeReportID = 2;
	}
	repeated TradesGroup Trades = 38;
	optional uint32 NoUnderlyings = 39;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 40;
	optional uint32 NoMiscFees = 41;
	message MiscFeesGroup {
		optional float MiscFeeAmt = 1;
		optional string MiscFeeCurr = 2;
		optional string MiscFeeType = 3;
		optional int64 MiscFeeBasis = 4;
	}
	repeated MiscFeesGroup MiscFees = 42;
	optional PartiesComponent Parties = 43;
	optional InstrumentComponent Instrument = 44;
	optional FinancingDetailsComponent FinancingDetails = 45;
	optional InstrumentLegComponent InstrumentLeg = 46;
	optional TrdRegTimestampsComponent TrdRegTimestamps = 47;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 48;
	optional StipulationsComponent Stipulations = 49;
	optional SettlInstructionsDataComponent SettlInstructionsData = 50;
}

message CollateralInquiry {
	optional string CollInquiryID = 1;
	optional string SubscriptionRequestType = 2;
	optional int64 ResponseTransportType = 3;
	optional string ResponseDestination = 4;
	optional string Account = 5;
	optional int64 AccountType = 6;
	optional string ClOrdID = 7;
	optional string OrderID = 8;
	optional string SecondaryOrderID = 9;
	optional string SecondaryClOrdID = 10;
	optional string SettlDate = 11;
	optional float Quantity = 12;
	optional int64 QtyType = 13;
	optional string Currency = 14;
	optional uint32 NoLegs = 15;
	optional float MarginExcess = 16;
	optional float TotalNetValue = 17;
	optional float CashOutstanding = 18;
	optional string Side = 19;
	optional float Price = 20;
	optional int64 PriceType = 21;
	optional float AccruedInterestAmt = 22;
	optional float EndAccruedInterestAmt = 23;
	optional float StartCash = 24;
	optional float EndCash = 25;
	optional string TradingSessionID = 26;
	optional string TradingSessionSubID = 27;
	optional string SettlSessID = 28;
	optional string SettlSessSubID = 29;
	optional string ClearingBusinessDate = 30;
	optional string Text = 31;
	optional uint32 EncodedTextLen = 32;
	optional bytes EncodedText = 33;
	optional uint32 NoCollInquiryQualifier = 34;
	message CollInquiryQualifierGroup {
		optional int64 CollInquiryQualifier = 1;
	}
	repeated CollInquiryQualifierGroup CollInquiryQualifier = 35;
	optional uint32 NoExecs = 36;
	message ExecsGroup {
		optional string ExecID = 1;
	}
	repeated ExecsGroup Execs = 37;
	optional uint32 NoTrades = 38;
	message TradesGroup {
		optional string TradeReportID = 1;
		optional string SecondaryTradeReportID = 2;
	}
	repeated TradesGroup Trades = 39;
	optional uint32 NoUnderlyings = 40;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 41;
	optional PartiesComponent Parties = 42;
	optional InstrumentComponent Instrument = 43;
	optional FinancingDetailsComponent FinancingDetails = 44;
	optional InstrumentLegComponent InstrumentLeg = 45;
	optional TrdRegTimestampsComponent TrdRegTimestamps = 46;
	optional SpreadOrBenchmarkCurveDataComponent SpreadOrBenchmarkCurveData = 47;
	optional StipulationsComponent Stipulations = 48;
	optional SettlInstructionsDataComponent SettlInstructionsData = 49;
}

message NetworkStatusRequest {
	required int64 NetworkRequestType = 1;
	required string NetworkRequestID = 2;
	optional uint32 NoCompIDs = 3;
	message CompIDsGroup {
		optional string RefCompID = 1;
		optional string RefSubID = 2;
		optional string LocationID = 3;
		optional string DeskID = 4;
	}
	repeated CompIDsGroup CompIDs = 4;
}

message NetworkStatusResponse {
	required int64 NetworkStatusResponseType = 1;
	optional string NetworkRequestID = 2;
	optional string NetworkResponseID = 3;
	optional string LastNetworkResponseID = 4;
	required uint32 NoCompIDs = 5;
	message CompIDsGroup {
		optional string RefCompID = 1;
		optional string RefSubID = 2;
		optional string LocationID = 3;
		optional string DeskID = 4;
		optional int64 StatusValue = 5;
		optional string StatusText = 6;
	}
	repeated CompIDsGroup CompIDs = 6;
}

message CollateralInquiryAck {
	required string CollInquiryID = 1;
	required int64 CollInquiryStatus = 2;
	optional int64 CollInquiryResult = 3;
	optional int64 TotNumReports = 4;
	optional string Account = 5;
	optional int64 AccountType = 6;
	optional string ClOrdID = 7;
	optional string OrderID = 8;
	optional string SecondaryOrderID = 9;
	optional string SecondaryClOrdID = 10;
	optional string SettlDate = 11;
	optional float Quantity = 12;
	optional int64 QtyType = 13;
	optional string Currency = 14;
	optional uint32 NoLegs = 15;
	optional string TradingSessionID = 16;
	optional string TradingSessionSubID = 17;
	optional string SettlSessID = 18;
	optional string SettlSessSubID = 19;
	optional string ClearingBusinessDate = 20;
	optional int64 ResponseTransportType = 21;
	optional string ResponseDestination = 22;
	optional string Text = 23;
	optional uint32 EncodedTextLen = 24;
	optional bytes EncodedText = 25;
	optional uint32 NoCollInquiryQualifier = 26;
	message CollInquiryQualifierGroup {
		optional int64 CollInquiryQualifier = 1;
	}
	repeated CollInquiryQualifierGroup CollInquiryQualifier = 27;
	optional uint32 NoExecs = 28;
	message ExecsGroup {
		optional string ExecID = 1;
	}
	repeated ExecsGroup Execs = 29;
	optional uint32 NoTrades = 30;
	message TradesGroup {
		optional string TradeReportID = 1;
		optional string SecondaryTradeReportID = 2;
	}
	repeated TradesGroup Trades = 31;
	optional uint32 NoUnderlyings = 32;
	message UnderlyingsGroup {
		optional UnderlyingInstrumentComponent UnderlyingInstrument = 1;
	}
	repeated UnderlyingsGroup Underlyings = 33;
	optional PartiesComponent Parties = 34;
	optional InstrumentComponent Instrument = 35;
	optional FinancingDetailsComponent FinancingDetails = 36;
	optional InstrumentLegComponent InstrumentLeg = 37;
}

